C**************************************************************************
C
C  GFAC2PDB.F  -  Program to generate a PDB-format file of a set of NOE
C                 and/or H-bond restraints, showing violations and
C                 upper-bound excesses for a user-selected range of
C                 models and residues
C
C     Written by Roman Laskowski, University College, London, July 1996.
C
C     Original version was part of v.3.4.3 of the PROCHECK suite of programs.
C     
C     Subsequent amendments will be labelled by CHECK v.m.n--> and
C     CHECK v.m.n<-- where m.n is the version number corresponding to the
C     change
C
C v.3.5.1 - Amendment to statement in REAPDB giving very odd results under
C           some compiler conditions (as used for the CCP4 suite).
C                                            Roman Laskowski (20 Apr 1998)
C
C v.3.6.3 - Amendments to generate a RasMol script file
C                                            Roman Laskowski (18 Jul 2005)
C
C--------------------------------------------------------------------------
C
C Compiling under g77:-
C
C f77 -Wimplicit -fbounds-check -c gfac2pdb.f
C f77 -Wimplicit -fbounds-check -c ps.f
C f77 -o gfac2pdb gfac2pdb.o ps.o
C
C Compilation and linking (on VAX VMS)
C -----------------------
C
C FORT GFAC2PDB
C FORT PS
C LINK GFAC2PDB, PS
C
C--------------------------------------------------------------------------
C     
C  Files
C  -----
C     
C  1  <filename>.new - Input .new file holding the structure to be processed
C  2  rascript.rasmol - Input RasMol script file generated by rascript
C  3  <filename>.sdh - Input file, created by PROCHECK containing all
C                      the residue-by-residue G-factor values
C  7  <filename>_gfact.pdb - Output PDB-format file, being the same as
C                            the .new file but with the B-factors of the
C                            atoms adjusted to reflect the corresponding
C                            torsional G-factors
C  8  <filename>_gfact.rasmol - As above, but including RasMol script
C                            commands
C
C--------------------------------------------------------------------------
C     
C     Subroutine calling tree
C     -----------------------
C     
C     MAIN    --> INITS
C             --> GETPDB
C             --> REAPDB  --> LENSTR
C             --> RASHED  --> LENSTR
C                         --> NONPRO
C             --> GETSDH  --> COLBND
C             --> RASCLO
C             --> WRIOUT  --> LENSTR
C
C--------------------------------------------------------------------------
      
      
      PROGRAM VIOL2
      
      INCLUDE 'gfac2pdb.inc'

C---- Initialise variables
      CALL INITS
      
C---- Request the name of the PDB file
      CALL GETPDB
      IF (IFAIL) GO TO 999

C---- Read in the structure from the PDB file
      CALL REAPDB
      IF (IFAIL) GO TO 999

CHECK v.3.6.3-->
C---- Open the RasMol script file and write out headers
      CALL RASHED
      IF (IFAIL) GO TO 999
CHECK v.3.6.3<--

C---- Read in the G-factors and update the corresponding B-values
      CALL GETSDH
      IF (IFAIL) GO TO 999

CHECK v.3.6.3-->
C---- Write closing lines to the RasMol script
      CALL RASCLO
CHECK v.3.6.3<--

C---- Write the PDB file out with replaced temperature factors
      CALL WRIOUT

 999  CONTINUE
      IF (IFAIL) THEN
         PRINT*, '**** Program terminated with error'
      ELSE 
         PRINT*, 'Program complete'
      ENDIF
      END
      
C--------------------------------------------------------------------------
C**************************************************************************
C     
C  SUBROUTINE INITS  -  Initialise variables
C     
C----------------------------------------------------------------------+---
      
      SUBROUTINE INITS
      
      INCLUDE 'gfac2pdb.inc'
      
      CHARACTER*3   AMNAME(NAMINO)
      INTEGER       IAMINO, IATOM

      DATA AMNAME /'ALA', 'ARG', 'ASN', 'ASP', 'CYS', 'GLN', 'GLU',
     -             'GLY', 'HIS', 'ILE', 'LEU', 'LYS', 'MET', 'PHE',
     -             'PRO', 'SER', 'THR', 'TRP', 'TYR', 'VAL' /

C---- Initialise variables
      DO 50, IAMINO = 1, NAMINO
          AMINO(IAMINO) = AMNAME(IAMINO)
 50   CONTINUE
      DO 100, IATOM = 1, MXATOM
          BVALUE(IATOM) = 0.0
 100  CONTINUE
      CHAIN = ' '
      FSTRES = 1
      IFAIL = .FALSE.

      RETURN
      END
      
C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE GETPDB  -  Read in the name out the output file and the
C                        chain
C
C----------------------------------------------------------------------+--- 
 
      SUBROUTINE GETPDB
 
      INCLUDE 'gfac2pdb.inc'
 
      INTEGER       IEND, ISTART, LINE
      LOGICAL       IERROR


C---- Initialise variables
      LINE = 0

C---- Accept name of output file
      PRINT*, 'Enter name of input PDB file'
      READ(*,110,ERR=900) PDBFIL
 110  FORMAT(A)
      PRINT*
      PRINT*

C---- Peel off directory path and extension
CHECK v.3.6.4-->
C      CALL GETNAM(PDBFIL,ISTART,IEND,IERROR)
      CALL GETNAM(PDBFIL,FNAMLN,ISTART,IEND,IERROR)
CHECK v.3.6.4<--
      IF (IERROR) GO TO 990

C---- Form names of other files that will be required in default directory
      FILNEW = PDBFIL(ISTART:IEND) // '.new'
      FILSDH = PDBFIL(ISTART:IEND) // '.sdh'
      FILOUT = PDBFIL(ISTART:IEND) // '_gfact.pdb'
CHECK v.3.6.3-->
      FILRAS = PDBFIL(ISTART:IEND) // '_gfact.rasmol'
CHECK v.3.6.3<--

      GO TO 999

C---- Fatal errors
 900  CONTINUE
      PRINT*, '**** ERROR. Data error in entered filename'
      GO TO 990

990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE REAPDB  -  Read through appropriate .new file and
C                        accumulate coords to calculate mean positions
C
C----------------------------------------------------------------------+---

      SUBROUTINE REAPDB

      SAVE

      INCLUDE 'gfac2pdb.inc'

      CHARACTER*1   INCHN
      CHARACTER*3   RESDUE
      CHARACTER*4   ATNAME
      CHARACTER*5   SEQNO
      CHARACTER*6   IDENT, INSEQ, RSLAST
      CHARACTER*13  ATMKEY
      CHARACTER*80  IREC
      INTEGER       I, IATOM, IERR, LENSTR, LINE, RNO
      LOGICAL       ENDFIL
      REAL          COORDS(3)

C---- Initialise variables
      ENDFIL = .FALSE.
      IFAIL = .FALSE.
      LINE = 0
      IATOM = 0
      NRESID = 0
      RSLAST = ' '

C---- Open the PDB file
      PRINT*, 'Reading in structure from file, ', 
     -    FILNEW(1:LENSTR(FILNEW)), ' ...'
      PRINT*
      OPEN(UNIT=1, FILE=FILNEW, STATUS='OLD', FORM='FORMATTED',
     -     ACCESS='SEQUENTIAL',
CVAX     -     CARRIAGECONTROL = 'LIST', READONLY,
     -     ERR=900)

C---- Loop through the PDB file, picking out all the ATOM and HETATM
C     records
200   CONTINUE
          READ(1,120,END=800,ERR=904) IREC
 120      FORMAT(A)
          LINE = LINE + 1
          IDENT = IREC(1:6)

C----     Determine whether this record is required for processing
          IF (IDENT.EQ.'ATOM  ' .OR. IDENT.EQ.'HETATM') THEN

C----         Pick off atom name, residue name, chain and sequence number
              ATNAME = IREC(13:16)
              RESDUE = IREC(18:20)
              INCHN = IREC(22:22)
              INSEQ = IREC(22:27)
              SEQNO = IREC(23:27)
              READ(INSEQ,240,IOSTAT=IERR) RNO
 240          FORMAT(I5,1X)
              IF (IERR.NE.0) RNO = 0

C----         Retrieve the atomic coordinates
              READ(IREC,280,ERR=902) (COORDS(I), I = 1, 3)
 280          FORMAT(30X,3F8.0)

C----         Form the unique, identifying key for this atom
              ATMKEY = INSEQ // RESDUE // ATNAME

C----         Increment atom-store
              IATOM = IATOM + 1
              IF (IATOM.GT.MXATOM) GO TO 906

C----         Retrieve the atom number
              READ(IREC,320,ERR=902) ATOMNO(IATOM)
 320          FORMAT(6X,I5)

C----         Save the ATOM ID and coordinates
              ATOMID(IATOM) = ATMKEY
              ATMXYZ(1,IATOM) = COORDS(1)
              ATMXYZ(2,IATOM) = COORDS(2)
              ATMXYZ(3,IATOM) = COORDS(3)
              RESNUM(IATOM) = RNO
CHECK v.3.5.1-->
C              RESNO(IATOM) = INCHN // SEQNO
              RESNO(IATOM)(1:1) = INCHN 
              RESNO(IATOM)(2:) = SEQNO
CHECK v.3.5.1<--

C----         If residue has changes, then store residue details and
C             starting atom number
              IF (RESNO(IATOM).NE.RSLAST) THEN
                  IF (RESDUE.NE.'HOH') THEN
                      NRESID = NRESID + 1
                      IF (NRESID.GT.MXRES) GO TO 908
                      RESDET(NRESID) = RESNO(IATOM)
                      FSTATM(NRESID) = IATOM
                  ENDIF
                  RSLAST = RESNO(IATOM)
              ENDIF

C----     If ENDMDL record, or second MODEL record, encountered then read
C         no more
          ELSE IF (IDENT.EQ.'ENDMDL' .OR.
     -        (IDENT.EQ.'MODEL ' .AND. IATOM.GT.0)) THEN
              ENDFIL = .TRUE.
          ENDIF
      IF (.NOT.ENDFIL) GO TO 200

C---- End of Brookhaven file reached
 800  CONTINUE

C---- Show statistics on the models read in
      NATOMS = IATOM
      IF (NATOMS.EQ.0) GO TO 910
      PRINT*
      PRINT *, 'Total no. of residues stored:    ', NRESID
      PRINT *, 'Total no. of atoms stored:       ', NATOMS
      PRINT*

      GO TO 999

C---- Fatal errors
 900  CONTINUE
      PRINT*, '**** ERROR. Unable to open input PDB file:'
      PRINT*, '****        ', FILNEW(1:LENSTR(FILNEW))
      GO TO 990

 902  CONTINUE
      PRINT*, '**** Error in coords for atom: ', ATNAME, '-', RESDUE,
     -    '-', INSEQ
      GO TO 200

 904  CONTINUE
      PRINT*, '**** Data error reading file:  [',
     -    FILNEW(1:LENSTR(FILNEW)), ']'
      PRINT*, '    Line: ', LINE
      GO TO 990

 906  CONTINUE
      PRINT*, '**** Maximum number of atoms per protein exceeded:',
     -    MXATOM
      GO TO 990

 908  CONTINUE
      PRINT*, '**** Maximum number of residues per protein exceeded:',
     -    MXRES
      GO TO 990

 910  CONTINUE
      PRINT*, '**** No atoms stored from input PDB file'
      GO TO 990

 990  CONTINUE
      IFAIL = .TRUE.

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE GETSDH  -  Read through the .sdh G-factors file
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE GETSDH

      INCLUDE 'gfac2pdb.inc'
 
      CHARACTER*1   INCHN
      CHARACTER*2   ATNAME, ATUPD(2,5)
      CHARACTER*3   INRES
      CHARACTER*5   INSEQ
CHECK v.3.6.3-->
C      CHARACTER*6   RESKEY
      CHARACTER*6   LSTKEY, RESKEY
CHECK v.3.6.3<--
      CHARACTER*120 IREC
      INTEGER       IATOM, IDISTR, IEND, IRES, IRESID, ISTART, IVALUE,
CHECK v.3.6.3-->
C     -              LENSTR, LINE
     -              LENSTR, LINE, LRESID
CHECK v.3.6.3<--
      LOGICAL       WANTED
      REAL          BFACT, MAXB, MAXG, MINB, MING, VALUE(NDISTR)

      DATA ATUPD / 'N ', 'CA',
     -             'CB', '*G',
     -             'CB', '  ',
     -             '*D', '*E',
     -             'C ', '  ' /
      DATA MINB, MAXB / 0.0, 80.0 /
      DATA MING, MAXG / -4.0, 1.0 /

C---- Initialise variables
      LINE = 0
CHECK v.3.6.3-->
      LRESID = -1
      LSTKEY = ' '
CHECK v.3.6.3<--

C---- Open the file, <filename>.sdh
      PRINT*, 'Reading in G-factors from file, ', 
     -    FILSDH(1:LENSTR(FILSDH)), ' ...'
      PRINT*
      OPEN(UNIT=3, FILE=FILSDH, STATUS='OLD', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    READONLY,
     -    ERR=900)

C---- Read through the records until get to the final line with mean-values
 100  CONTINUE
          READ(3,120,END=500,ERR=904) IREC
 120      FORMAT(A)
          LINE = LINE + 1

C----     If it is the "Means" record, store the overall stereochemical
C         R-factor
          IF (IREC(1:5).EQ.'Means') THEN

C----         Extract the G-factors
              READ(IREC,140,ERR=904) (GFACTR(IDISTR),
     -            IDISTR = 1, NDISTR)
 140          FORMAT(17X,10F9.4)
              SFACT = GFACTR(NDISTR)

C----     Otherwise read in log-odds values to determine the maximum
          ELSE
              READ(IREC,180,ERR=904) INCHN, INRES, INSEQ,
     -            (VALUE(IVALUE), IVALUE = 1, NDISTR)
 180          FORMAT(6X,1X,A1,1X,A3,A5,10F9.4)

C----         Only process this residue if it belongs to the required
C             chain
              IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN

C----             Loop through all the residues until reach the current
C                 one
                  IRESID = 0
                  RESKEY = INCHN // INSEQ

CHECK v.3.6.3-->
C----             If same residue as last one, have residue no. already
                  IF (RESKEY.EQ.LSTKEY) THEN
                      IRESID = LRESID
                  ELSE
CHECK v.3.6.3<--

                      DO 200, IRES = 1, NRESID
                          IF (RESDET(IRES).EQ.RESKEY) THEN
                              IRESID = IRES
CHECK v.3.6.3-->
                              GO TO 210
CHECK v.3.6.3<--
                          ENDIF
 200                  CONTINUE
CHECK v.3.6.3-->
                  ENDIF
CHECK v.3.6.3<--

C----             If have found the appropriate residue, then find
C                 its start- and end-atoms
CHECK v.3.6.3-->
 210              CONTINUE
CHECK v.3.6.3<--
                  IF (IRESID.GT.0) THEN

CHECK v.3.6.3-->
C----                 Get central bonds and colour by G-factor for any
C                     dodgy ones
                      CALL COLBND(IRESID,VALUE)
CHECK v.3.6.3<--

C----                 Colour atom's B-value by G-factors
                      ISTART = FSTATM(IRESID)
                      IF (IRESID.EQ.NRESID) THEN
                          IEND = NATOMS
                      ELSE
                          IEND = FSTATM(IRESID + 1) - 1
                      ENDIF

C----                 For each given G-factor, search for the corresponding
C                     atom and update its B-value
                      DO 400, IDISTR = 1, 5

C----                     Calculate a pseudo B-value for this G-factor
C                         value
                          IF (VALUE(IDISTR).LT.900.0) THEN
                              BFACT = (VALUE(IDISTR) - MING)
     -                            / (MAXG - MING)
                              IF (BFACT.LT.0.0) BFACT = 0.0
                              IF (BFACT.GT.1.0) BFACT = 1.0
                              BFACT = MINB
     -                            + (1.0 - BFACT) * (MAXB - MINB)

C----                         Loop to find this atom in this residue
                              DO 300, IATOM = ISTART, IEND

C----                             Get the atom's name and determine
C                                 whether it matches the search template
                                  WANTED = .FALSE.
                                  ATNAME = ATOMID(IATOM)(11:12)
                                  IF ((ATNAME(1:1).EQ.
     -                                ATUPD(1,IDISTR)(1:1) .OR.
     -                                ATUPD(1,IDISTR)(1:1).EQ.'*') .AND.
     -                                (ATNAME(2:2).EQ.
     -                                ATUPD(1,IDISTR)(2:2) .OR.
     -                                ATUPD(1,IDISTR)(2:2).EQ.'*')) THEN
                                      WANTED = .TRUE.
                                  ENDIF
                                  IF ((ATNAME(1:1).EQ.
     -                                ATUPD(2,IDISTR)(1:1) .OR.
     -                                ATUPD(2,IDISTR)(1:1).EQ.'*') .AND.
     -                                (ATNAME(2:2).EQ.
     -                                ATUPD(2,IDISTR)(2:2) .OR.
     -                                ATUPD(2,IDISTR)(2:2).EQ.'*')) THEN
                                      WANTED = .TRUE.
                                  ENDIF

C----                             If this atom matches the template, then
C                                 update its B-value
                                  IF (WANTED) THEN
                                      BVALUE(IATOM) = BFACT
                                  ENDIF
 300                          CONTINUE
                          ENDIF
 400                  CONTINUE

                  ELSE
                      PRINT*, '*** Residue not found in PDB file:',
     -                    INCHN, ' ', INRES, INSEQ
                  ENDIF

CHECK v.3.6.3-->
C----             Store current residue details
                  LRESID = IRESID
                  LSTKEY = RESKEY
CHECK v.3.6.3<--

C----             Update the appropriate residue's atomic B-factors
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

      GO TO 999
 
C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Unable to open .sdh file'
      GO TO 990
 
 904  CONTINUE
      PRINT*, '*** ERROR. Error reading .sdh file at line:', LINE + 1
      GO TO 990
 
990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE WRIOUT  -  Read through .new file again, writing out all the
C                        atom records with their altered B-factors
C
C----------------------------------------------------------------------+---

      SUBROUTINE WRIOUT

      SAVE

      INCLUDE 'gfac2pdb.inc'

      CHARACTER*1   INCHN
      CHARACTER*3   RESDUE
      CHARACTER*4   ATNAME
      CHARACTER*5   SEQNO
      CHARACTER*6   IDENT, INSEQ
      CHARACTER*13  ATMKEY
      CHARACTER*80  IREC
CHECK v.3.6.3-->
C      INTEGER       IATOM, LENSTR, LINE
      INTEGER       I, IATOM, LENSTR, LINE, NCOORD
CHECK v.3.6.3<--
      LOGICAL       ENDFIL
CHECK v.3.6.3-->
      REAL          CCOORD(3), COORDS(3)
CHECK v.3.6.3<--

C---- Initialise variables
      ENDFIL = .FALSE.
      IFAIL = .FALSE.
      LINE = 0
      IATOM = 0
CHECK v.3.6.3-->
      NCOORD = 0
      DO 50, I = 1, 3
          CCOORD(I) = 0.0
 50   CONTINUE
CHECK v.3.6.3<--

C---- Rewind input .new file
      REWIND(1)

C---- Open the output PDB file
      PRINT*, 'Writing modified B-factors to file, ', 
     -    FILOUT(1:LENSTR(FILOUT)), ' ...'
      PRINT*
      OPEN(UNIT=7, FILE=FILOUT, STATUS='UNKNOWN', FORM='FORMATTED',
     -     ACCESS='SEQUENTIAL',
CVAX     -     CARRIAGECONTROL = 'LIST',
     -     ERR=900)

C---- Loop through the PDB file, picking out all the ATOM and HETATM
C     records
200   CONTINUE
          READ(1,120,END=800,ERR=904) IREC
 120      FORMAT(A)
          LINE = LINE + 1
          IDENT = IREC(1:6)

C----     Determine whether this record is required for processing
          IF ((IDENT.EQ.'ATOM  ' .OR. IDENT.EQ.'HETATM') .AND.
     -        .NOT.ENDFIL) THEN

C----         Increment atom-count
              IATOM = IATOM + 1

C----         Pick off atom name, residue name, chain and sequence number
              ATNAME = IREC(13:16)
              RESDUE = IREC(18:20)
              INCHN = IREC(22:22)
              INSEQ = IREC(22:27)
              SEQNO = IREC(23:27)

C----         Form the unique, identifying key for this atom
              ATMKEY = INSEQ // RESDUE // ATNAME

C----         Check that details agree
              IF (ATMKEY.EQ.ATOMID(IATOM)) THEN

C----             Replace existing B-factor with computed B-factor
C                 representing the corresponding G-factor
                  WRITE(IREC(61:66),160) BVALUE(IATOM)
 160              FORMAT(F6.2)

C----             Write out the modified record
                  WRITE(7,120) IREC(1:LENSTR(IREC))
CHECK v.3.6.3-->
                  WRITE(8,120) IREC(1:LENSTR(IREC))

C----             Retrieve the coordinates and update the centre of
C                 gravity accumulator
                  READ(IREC,280,ERR=904) (COORDS(I), I = 1, 3)
 280              FORMAT(30X,3F8.0)
                  NCOORD = NCOORD + 1
                  DO 300, I = 1, 3
                      CCOORD(I) = CCOORD(I) + COORDS(I)
 300              CONTINUE
CHECK v.3.6.3<--

C----         If details don't agree, print error message
              ELSE
                  PRINT*, '*** WARNING. Atom-order in file has changed',
     -                '. Could be program error!'
              ENDIF

C----     If an ENDMDL record, or second MODEL record, encountered then
C         don't process any more ATOM and HETATM records
          ELSE IF (IDENT.EQ.'ENDMDL' .OR.
     -        (IDENT.EQ.'MODEL ' .AND. IATOM.GT.0)) THEN
              ENDFIL = .TRUE.
              WRITE(7,120) IREC(1:LENSTR(IREC))

C----     If not an ATOM or HETATM record, then write out as it stands
          ELSE
              WRITE(7,120) IREC(1:LENSTR(IREC))
          ENDIF

C---- Loop back for next record
      GO TO 200

C---- End of Brookhaven file reached
 800  CONTINUE

CHECK v.3.6.3-->
C---- Write dummy atom to RasMol script file
C      IF (NCOORD.GT.0) THEN
C          DO 810, I = 1, 3
C              CCOORD(I) = CCOORD(I) / NCOORD
C 810      CONTINUE
C      ENDIF
C      WRITE(8,820) 1, ' N  ', 'XXX', ' ', '   1', (CCOORD(I), I = 1, 3)
C 820  FORMAT('HETATM',I5,1X,A4,1X,A3,1X,A1,A5,3X,3F8.3,'  1.00 80.00')

C---- Close files
      CLOSE(7)
      CLOSE(8)
CHECK v.3.6.3<--

      GO TO 999

C---- Fatal errors
 900  CONTINUE
CHECK v.3.6.3-->
C      PRINT*, '**** ERROR. Unable to open input PDB file:'
      PRINT*, '**** ERROR. Unable to open output PDB file:'
CHECK v.3.6.3<--
      PRINT*, '****        ', FILOUT(1:LENSTR(FILOUT))
      GO TO 990

 904  CONTINUE
      PRINT*, '**** Data error reading file:  [',
     -    FILNEW(1:LENSTR(FILNEW)), ']'
      PRINT*, '    Line: ', LINE
      GO TO 990

 990  CONTINUE
      IFAIL = .TRUE.

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.6.3-->
C**************************************************************************
C
C  SUBROUTINE RASHED  -  Write out the header details for the Rasmol
C                        script file
C
C----------------------------------------------------------------------+---

      SUBROUTINE RASHED

      INCLUDE 'gfac2pdb.inc'

      INTEGER       LENSTR

C---- Open the output RasMol script file
      OPEN(UNIT=8, FILE=FILRAS, STATUS='UNKNOWN', FORM='FORMATTED',
     -     ACCESS='SEQUENTIAL',
CVAX     -     CARRIAGECONTROL = 'LIST',
     -     ERR=900)

C---- Write initial lines to script file
      WRITE(8,100) PDBFIL(1:LENSTR(PDBFIL))
 100  FORMAT(
     -    '#!rasmol -script',/,
     -    '# Generated by gfac2pdb - R A Laskowski, Jul 2005',/,
     -    ' ',/,
     -    '# PDB file: ',A,/,
     -    ' ',/,
     -    'zap',/,
     -    'load inline',/,
     -    'background [220,220,220]',/,
     -    'set ambient 60',/,
     -    'set specular off',/,
     -    'slab off',/,
     -    'rotate x 180',/,
     -    ' ',/,
     -    'set bonds off',/,
     -    'set axes off',/,
     -    'set boundingbox off',/,
     -    'set unitcell off',/,
     -    'set bondmode and',/,
     -    'dots off',/)

C---- Initialise colours
      WRITE(8,200)
 200  FORMAT(
     -    '# Initialise colours',/,
     -    'select all',/,
     -    'colour bonds none',/,
     -    'colour backbone none',/,
     -    'colour hbonds none',/,
     -    'colour hbonds none',/,
     -    'colour ssbonds none',/,
     -    'colour ribbons none',//)

C---- Echo PDB code and title
      WRITE(8,300)
 300  FORMAT(
     -    '# Show details of structure',/,
     -    'echo " "',/,
     -    'echo "   +-----------------------------------------------+"',
     -    /,
     -    'echo "   | Structure coloured by torsion angle G-factors |"',
     -    /,
     -    'echo "   +-----------------------------------------------+"',
     -    /,
     -    'echo " "',//)

C---- Select all atoms and colour blue
      WRITE(8,400)
 400  FORMAT(
     -    'select all',/,
     -    'wireframe on',/,
     -    'colour [0,150,255]',/)

C---- If there is a rascript.rasmol file, transfer all script commands
C     pertaining to the non-protein objects in it
      CALL NONPRO

      GO TO 999

C---- Fatal errors
 900  CONTINUE
      PRINT*, '**** ERROR. Unable to open output RasMol script file:'
      PRINT*, '****        ', FILRAS(1:LENSTR(FILRAS))
      GO TO 990

 990  CONTINUE
      IFAIL = .TRUE.

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE NONPRO  -  Read through the rascript.rasmol file and copy
C                        across any script commands for the non-protein
C                        molecules in the structure
C
C----------------------------------------------------------------------+---

      SUBROUTINE NONPRO

      CHARACTER*80  IREC
      INTEGER       LENSTR
      LOGICAL       DONE, WANTED


C---- Initialise variables
      DONE = .FALSE.
      WANTED = .FALSE.

C---- Open the rascript.rasmol file
      PRINT*, 'Reading in rascript.rasmol file ...'
      PRINT*
      OPEN(UNIT=2, FILE='rascript.rasmol', STATUS='OLD',
     -     FORM='FORMATTED', ACCESS='SEQUENTIAL',
CVAX     -     CARRIAGECONTROL = 'LIST', READONLY,
     -     ERR=999)

C---- Loop through the file, picking up the required commands
 200  CONTINUE
          READ(2,120,END=999,ERR=999) IREC
 120      FORMAT(A)

C----     If this is a comment line, check what it is
          IF (IREC(1:1).EQ.'#') THEN

C----         Check for nucleic acid chain
              IF (IREC(1:7).EQ.'# Chain' .AND. 
     -            IREC(13:24).EQ.'nucleic acid') THEN

C----             Set flag that wanted
                  WANTED = .TRUE.

C----         Check for metal or ligand
              ELSE IF (IREC(1:8).EQ.'# Ligand' .OR.
     -            IREC(1:8).EQ.'# Metal:') THEN

C----             Set flag that wanted
                  WANTED = .TRUE.

C----         Otherwise, not wanted
              ELSE
                  WANTED = .FALSE.
              ENDIF

C----     Check for echo commands
          ELSE IF (IREC(1:4).EQ.'echo') THEN
              WANTED = .FALSE.

C----     Check for exit line
          ELSE IF (IREC(1:4).EQ.'exit') THEN
              DONE = .TRUE.
          ENDIF

C----     If current line is wanted, then write straight out
          IF (WANTED .AND. IREC.NE.' ') THEN
              WRITE(8,120) IREC(1:LENSTR(IREC))
          ENDIF

C---- If not yet done, loop back for next record
      IF (.NOT.DONE) GO TO 200

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE COLBND  -  Determine which torsion angles are unusual, and
C                        colour the central bond according to the G-factor
C
C----------------------------------------------------------------------+---

      SUBROUTINE COLBND(IRESID,VALUE)

      INCLUDE 'gfac2pdb.inc'

      CHARACTER*4   ATNAME
      CHARACTER*5   ATNUM(3)
      CHARACTER*13  BNDCOL(NGSTEP)
      CHARACTER*80  OUTLIN
      INTEGER       I, IATOM, IDISTR, IEND, IRANGE, IRESID, ISTART,
     -              J, JRANGE, LENSTR, NEND, NSTART, ISELEC(3), NSELEC
      LOGICAL       WANTED
      REAL          GMAX, VALUE(5), WIDTH

      DATA BNDCOL / '[255,255,0]', '[255,215,0]', '[255,165,0]',
     -              '[255,69,0]', '[255,20,147]', '[255,0,0]' /
c      DATA GMAX   / GMIN - (NGSTEP - 1) * GSTEP /

C---- Initialise
      GMAX = GMIN - (NGSTEP - 1) * GSTEP

C---- Get the residue's start and end atoms
      ISTART = FSTATM(IRESID)
      IF (IRESID.EQ.NRESID) THEN
         IEND = NATOMS
      ELSE
         IEND = FSTATM(IRESID + 1) - 1
      ENDIF

C---- Repeat for next residue
      IF (IRESID.LT.NRESID) THEN
          NSTART = FSTATM(IRESID + 1)
          IF (IRESID + 1.EQ.NRESID) THEN
             NEND = NATOMS
          ELSE
             NEND = FSTATM(IRESID + 2) - 1
          ENDIF
      ELSE
          NSTART = 0
          NEND = 0
      ENDIF

C---- Loop over the torsion angle G-factors
      DO 800, IDISTR = 1, 5

C----     If G-factor represents an unusual conformation, locate atoms
C         defining central bond
          IF (VALUE(IDISTR).LT.GMIN) THEN

C----         Determine which colour range this falls into
              IRANGE = (GMIN - VALUE(IDISTR)) / GSTEP + 1
              JRANGE = 1

C----         If G-factor is coloured red, determine which fatness range
C             it falls into
              IF (IRANGE.GT.NGSTEP) THEN

C----             Set colour range at maximum
                  IRANGE = NGSTEP

C----             Determine bond fatness
                  JRANGE = (GMAX - VALUE(IDISTR)) / FSTEP + 1
                  IF (JRANGE.GT.NFSTEP) JRANGE = NFSTEP
              ENDIF

C----         Initialise selected atom numbers
              DO 50, I = 1, 3
                  ISELEC(I) = 0
 50           CONTINUE

C----         Loop to find the required atoms in this residue
              DO 100, IATOM = ISTART, IEND

C----             Get the atom's name
                  ATNAME = ATOMID(IATOM)(10:13)

C----             Distribution 1: Ramachandran phi-psi (atoms
C                 N, CA and C)
                  IF (IDISTR.EQ.1) THEN
                      IF (ATNAME.EQ.' N  ') THEN
                          ISELEC(1) = IATOM
                      ELSE IF (ATNAME.EQ.' CA ') THEN
                          ISELEC(2) = IATOM
                      ELSE IF (ATNAME.EQ.' C  ') THEN
                          ISELEC(3) = IATOM
                      ENDIF

C----             Distribution 2: chi1-chi2 (atoms CA, CB and CG)
                  ELSE IF (IDISTR.EQ.2) THEN
                      IF (ATNAME.EQ.' CA ') THEN
                          ISELEC(1) = IATOM
                      ELSE IF (ATNAME(1:3).EQ.' CB ') THEN
                          ISELEC(2) = IATOM
                      ELSE IF (ATNAME(1:3).EQ.' CG') THEN
                          IF (ATNAME(4:4).EQ.' ' .OR.
     -                        ATNAME(4:4).EQ.'1') THEN
                              ISELEC(3) = IATOM
                          ENDIF
                      ENDIF

C----             Distribution 3: chi1 only (atoms CA and CB)
                  ELSE IF (IDISTR.EQ.3) THEN
                      IF (ATNAME.EQ.' CA ') THEN
                          ISELEC(1) = IATOM
                      ELSE IF (ATNAME(1:3).EQ.' CB ') THEN
                          ISELEC(2) = IATOM
                      ENDIF

C----             Distribution : chi3 and chi4 (atoms CG, CD/SD and
C                 CE/OE/NE)
                  ELSE IF (IDISTR.EQ.4) THEN
                      IF (ATNAME.EQ.' CG ') THEN
                          ISELEC(1) = IATOM
                      ELSE IF (ATNAME(1:3).EQ.' CD' .OR.
     -                    ATNAME(1:3).EQ.' ND' .OR.
     -                    ATNAME(1:3).EQ.' SD') THEN
                          IF (ATNAME(4:4).EQ.' ' .OR.
     -                        ATNAME(4:4).EQ.'1') THEN
                              ISELEC(2) = IATOM
                          ENDIF
                      ELSE IF (ATNAME(1:3).EQ.' CE' .OR.
     -                    ATNAME(1:3).EQ.' NE' .OR.
     -                    ATNAME(1:3).EQ.' OE') THEN
                          IF (ATNAME(4:4).EQ.' ' .OR.
     -                        ATNAME(4:4).EQ.'1') THEN
                              ISELEC(3) = IATOM
                          ENDIF
                      ENDIF

C----             Distribution: omega (atoms C and N(i+1))
                  ELSE IF (IDISTR.EQ.5) THEN
                      IF (ATNAME.EQ.' C  ') THEN
                          ISELEC(1) = IATOM
                      ENDIF
                  ENDIF
 100          CONTINUE

C----         If this is the omega distribution, pick up the following
C             residue's N atom
              IF (IDISTR.EQ.5) THEN

C----             Loop to find the N atom
                  DO 200, IATOM = NSTART, NEND

C----                 Get the atom's name
                      ATNAME = ATOMID(IATOM)(10:13)

C----                 If this is the N, STORE AND JUMP OUT
                      IF (ATNAME.EQ.' N  ') THEN
                          ISELEC(2) = IATOM
                          GO TO 210
                      ENDIF
 200              CONTINUE
              ENDIF

C----         Determine whether have any atoms to write out
 210          CONTINUE
              NSELEC = 0
              DO 300, I = 1, 3

C----             If have an atom number, format it
                  IF (ISELEC(I).GT.0) THEN

C----                 Increment count of valid atom numbers
                      NSELEC = NSELEC + 1

C----                 Format the atom number
                      WRITE(ATNUM(NSELEC),220) ATOMNO(ISELEC(I))
 220                  FORMAT(I5)
                      DO 250, J = 1, 4
                          IF (ATNUM(NSELEC)(1:1).EQ.' ') THEN
                              ATNUM(NSELEC) = ATNUM(NSELEC)(2:)
                          ELSE
                              GO TO 300
                          ENDIF
 250                  CONTINUE
                  ENDIF
 300          CONTINUE

C----         Write out the current selection to RasMol script
              IF (NSELEC.GT.1) THEN

C----             Start the output line
                  OUTLIN = 'select '

C----             Loop over the atom numbers
                  DO 350, I = 1, NSELEC

C----                 Add to current line
                      IF (I.GT.1) THEN
                          OUTLIN = OUTLIN(1:LENSTR(OUTLIN)) // ' | '
                      ENDIF
                      OUTLIN = OUTLIN(1:LENSTR(OUTLIN)) // ' atomno=' //
     -                    ATNUM(I)
 350              CONTINUE

C----             Write out the RasMol atom-selection command
                  WRITE(8,420) OUTLIN(1:LENSTR(OUTLIN))
 420              FORMAT(10A)

C----             Colour bond according to G-factor
                  WRITE(8,420) 'colour bonds ', BNDCOL(IRANGE)

C----             Determine bond width
                  WIDTH = FMIN + (JRANGE - 1) * FSIZE
                  WRITE(8,440) WIDTH
 440              FORMAT('wireframe ',F6.1)
              ENDIF
          ENDIF
 800  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE RASCLO  -  Write closing lines to the Rasmol script file
C
C----------------------------------------------------------------------+---

      SUBROUTINE RASCLO

      INCLUDE 'gfac2pdb.inc'

      INTEGER       LENSTR

C---- Switch all the waters off
      WRITE(8,*)
      WRITE(8,150)
 150  FORMAT(
     -    '# Waters off',/,
     -    'select HOH',/,
     -    'wireframe off')

C---- Start for user-set definitions
      WRITE(8,300)
 300  FORMAT(
     -    'select all',/,
     -    'exit',//)

      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.6.3<--
