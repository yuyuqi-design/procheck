C**************************************************************************
C
C  PPLOT.FOR  -  Plot of various stereochemical quality parameters
C                Program accepts the filename of structure (in Brookhaven
C                format) to be plotted, and its resolution
C
C                The data files need to have been generated by running the
C                programs CLEAN, SECSTR, ANGLEN and NB on the original .pdb
C                file for the structure in question. The output files
C                that should have been produced will be .new, .rin, .lan,
C                and .nb files, respectively.
C
C  Reference:-
C
C  Laskowski R A, MacArthur M W, Moss D S & Thornton J M (1993). PROCHECK: a
C  program to check the stereochemical quality of protein structures. J. Appl.
C  Cryst., 26, 283-291.
C
C
C--------------------------------------------------------------------------
C
C Compiling under g77:-
C
C f77 -Wimplicit -fbounds-check -c pplot.f
C f77 -Wimplicit -fbounds-check -c ps.f
C f77 -o pplot pplot.o ps.o
C
C Compilation and linking (on unix)
C -----------------------
C
C f77 -u -c pplot.f
C f77 -u -c ps.f
C f77 -o pplot pplot.o ps.o
C
C Compilation and linking (on VAX VMS)
C -----------------------
C
C FORT PPLOT
C FORT PS
C LINK PPLOT, PS
C
C--------------------------------------------------------------------------
C
C  History:-
C
C  Written by Roman Laskowski, University College, London, April 1992.
C
C  Based on four programs written by Malcolm MacArthur: bb.f, sc.f, pins.f,
C  and astra.f.
C
C  Original version was part of v.1.0 of the PROCHECK suite of programs.
C  Version 2.0 involved significant amendment to convert Simpleplot calls
C  to routines to write out PostScript files. These amendments have not
C  been identified in the code as they involved major rewrites of many
C  routines. All old lines of code which were commented out by amendments
C  between v.2.0 and v.3.0 have also been removed.
C
C  Amendments subsequent to v.3.0 have been labelled by CHECK v.m.n-->
C  and CHECK v.m.n<-- where m.n is the version number corresponding to the
C  change
C
C  v.1.0     Original version.                 Roman Laskowski   April 1992
C
C  v.2.0     Amendments to allow any input filename for input .pdb file,
C            rather than the restricted format of p<code>.pdb.
C            Removal of all calls to Simpleplot routines, and replacement by
C            routines to directly write PostScript files.
C            Major changes to appearance of plot - in particular addition of
C            shading (incl. regions on Ramachandran plot), and replacement
C            of old `pins' plot by the new Residues plot.
C                                              Roman Laskowski Jul/Aug 1992
C
C  v.2.0.1 - Bug-fix. Problem with certain compilers not liking uninitialised
C            and unSAVEd variables              Roman Laskowski 12 Aug 1992
C            Change to allow non-numeric sequence numbers (eg P1P, etc)
C                                               Roman Laskowski 14 Aug 1992
C
C  v.2.0.2 - Bug-fix. Border between ~b and ~l regions drawn in when it
C            shouldn't be on the Ramachandran plot
C                                               Roman Laskowski 19 Aug 1992
C
C  v.2.1   - Addition of .sco output file for writing out the scores of the
C            various stereochemical parameters              (19-20 Oct 1992)
C            Amendment to definition of what makes a Bad Contact by the
C            addition of a check on whether atoms belong to a donor-acceptor
C            pair                                               (9 Nov 1992)
C            Amendment for Residues Plot to show residue numbers on x-axes
C            rather than simple sequential numbering. Chain breaks also shown
C            on this plot                                      (30 Nov 1992)
C            Addition of chain ID on residues plot. Removal of all references
C            to accessibilities file                            (1 Dec 1992)
C            Allowance for cis-peptides. Omega torsion angles between -45
C            and +45 taken to be cis-peptides, and shown as such in the
C            output                                             (6 Jan 1993)
C            Allow upper limit on y-axis of Quality plots to increase when
C            data point is off the end of the scale. Addition of marker
C            identifying D-amino acids                          (7 Jan 1993)
C            Bug fix in routine READNB where leading zeros in sequence number
C            not stripped off, so no bad contacts found for .out listing
C                                                               (7 Jan 1993)
C            Initialisation of unitialised variables            (8 Jan 1993)
C            Correction of line-counts                         (14 Jan 1993)
C                                           Roman Laskowski Oct 93 - Jan 93
C
C  v.2.1.1 - Bug-fix. Water atoms for some structures (eg 5pti) represented
C            by residue type DOD, and atom types D1, O, and D2. Program
C            amended to ignore the hydrogens and water-water contacts
C                                              Roman Laskowski (24 Jan 1993)
C
C  v.2.1.2 - Bug-fix. On asterisks-only prints getting EOF on internal
C            writes. Cause: range provided for character field was too small.
C            Error now corrected.
C                                              Roman Laskowski (17 Feb 1993)
C
C  v.2.1.3 - Addition of routines for IDITIS table data (internal use only)
C                                              Roman Laskowski ( 5 Mar 1993)
C            Addition of asterisks to error prints so that can be plucked
C            out of the log files and displayed by the script file.
C            Change of 'Better' and 'Worse' remarks on the plot statistics
C            to the less emotionally-charged 'Inside'
C                                              Roman Laskowski (26 Mar 1993)
C
C  v.2.1.4 - Minor amendments suggested by George Sheldrick - mainly to cope
C            with compilation problems on the IBM RS/6000. Also amendment to
C            change name of residue information files from .res to .rin so as
C            not to clash with the .rin files produced by SHELX
C                                              Roman Laskowski (12 May 1993)
C
C  v.2.2   - Addition of asterisk to show plot-files produced.
C            Amendment to skip "plane" information in .lan file (this info
C            generated by the new version of anglen for plotting by bplot.f).
C            New parameters written out to procheck.prm (not used here,
C            but used by bplot.f)
C                                             Roman Laskowski (4-8 Nov 1993)
C
C  v.3.0   - Removal of Chi1-Chi2 plot (now done by program tplot.f on a
C            residue-by-residue basis).
C            Removal of MKEPAR routine which creates the parameter file
C            procheck.prm. The parameter file is now created by the
C            script file that runs PROCHECK.
C            Amendments to PostScript to routines to ensure that any lines
C            output to the output PostScript file are not longer than 80
C            characters (as some laser printers can't cope with long lines!).
C            Addition of new stereochemical parameter to Quality Plots
C            and print-outs, being the protein's average log-odds score
C            based on phi-psi and chi1-chi2 dihedral angle pairings.
C            Addition of plot of Ooi numbers to Residues Plot.
C            Amendments to secondary structure "wiring diagram", to show
C            on a shaded background representing relative accessibility.
C            Rearrangements of Residues plot to include the G-factors on
C            the PROCHECKer board.
C            Complete overhaul of parameter file, procheck.prm, and
C            routines to read it. Addition of colour option for all plots.
C            Removal of Ramachandran plot to tplot.f.
C            Removal of all CHECK v.m.n comments and commented out lines
C            of code so that v.3.0 is the new starting point for amendments.
C            Addition of option to accept a single chain-ID to restrict
C            all the plots to just the residues of a single chain.
C                                      Roman Laskowski (14 Nov-14 Dec 1993)
C
C  v.3.0.1 - Commented out unreferenced labels (producing compiler warnings
C            when compiling on Convex).
C                                              Roman Laskowski (6 Apr 1994)
C
C  v.3.1   - Routines to pick up the calculated solvent accessibility from
C            the .rsa file (if it is present) and use these rather than the
C            estimated accessibilities based on Ooi numbers.
C            Transfer of FINKEY, GETCOL and GETNAM routines to ps.f.
C            Minor bug-fix in "Highlighted residues" legend on Residue
C            Properties plot.
C            Addition of plot description to display of plot file name.
C                                            Roman Laskowski (7-19 Apr 1994)
C
C  v.3.2   - Addition of identifying plot handle to each plot filename.
C            Addition of descriptive plot title to header of PostScript
C            file.
C            Addition of .sum file holding a summary page.
C            Print of G-factor values on the Residue Properties plot.
C            Addition of option to print plot filename on the plot itself.
C            Chain ID made case-insensitive.
C            Addition of B-value standard deviations, both for the main-chain
C            and side-chain atoms. Added to the options on the 3 main
C            graphs in the Residue Properties plot.
C            Change B-value plot headings to U-value if all values are very
C            small and hence clearly U-values.
C            Correction of cis-peptide definition wherein a residue is
C            defined as cis if the omega dihedral angle associated with
C            the PREVIOUS residue is near zero.
C                                           Roman Laskowski (25-30 Apr 1994)
C            Addition of option allowing plots of same type to be combined
C            in a single PostScript file.
C                                              Roman Laskowski (12 Oct 1994)
C            Minor amendments to various statements to make them
C            acceptable to f2c, and to deal with various uninitialised
C            variables.(Amendments supplied by Dave Love at Daresbury).
C                                   David Love/Roman Laskowski (18 Oct 1994)
C
C  v.3.3.2 - Output of summary statistics in html format
C            Amendments to accessibility-reading routines to cope with new
C            format of the .rsa files.
C                                           Roman Laskowski (21-28 Aug 1995)
C
C  v.3.4   - Amendments to PSPAGE calls to comply with additional parameter
C            (used by other programs).
C                                              Roman Laskowski (25 Mar 1996)
C            Transfer of routines to ps.f:- PINRNO, PINTIC, and DHELIX
C                                              Roman Laskowski (10 Apr 1996)
C            Bug-fix on accessibility-shading when in colour.
C            Increase of number of colours that can be user-defined.
C                                              Roman Laskowski (24 Apr 1996)
C            Output of HTML file only if being run for WWW pages.
C                                              Roman Laskowski ( 1 Oct 1996)
C
C  v.3.4.3 - Amendment to make html file be written out only if appropriate
C            parameter is set in the parameter file.
C                                              Roman Laskowski ( 1 Oct 1996)
C
C  v.3.4.4 - Bug-fix on Quality plots where colour of marker not defined.
C            (Bug spotted by Huub Driessen).
C                                              Roman Laskowski (30 Oct 1996)
C  v.3.5.1 - Addition of G-factor smoothing across a window of residues.
C                                              Roman Laskowski (28 Oct 1998)
C  v.3.5.2 - Addition of RasMol-script output for non-bonded contacts.
C                                              Roman Laskowski ( 4 Mar 1999)
C  v.3.6     Implementation of new Ramachandran regions.
C                                              Roman Laskowski (18 Dec 2012)
C  v.3.6.4   Change to OPEN statement for .sum file in ps.f (to work under
C            Win-64).
C            Changes to GETNAM in ps.f to recognize full path in Win-64
C            version.
C            Increase in filename lengths to 512 characters.
C                                              Roman Laskowski ( 8 Aug 2013)
C
C  v.3.6.5 - Hard-coded filename lengths as some compilers not happy with
C            changes made for v.3.6.4.
C                                              Roman Laskowski (18 Nov 2013)
C
C  v.3.6.6 - Increase of MXRES parameter from 8000 to 80000.
C                                              Roman Laskowski (16 Apr 2015)
C
C--------------------------------------------------------------------------
C
C Files
C -----
C
C  1  <filename>.rin - File generated by program CLEAN, containing the residue-
C                      by-residue information on the given structure
C  2  <filename>.nb  - File generated by program NB, containing a list of
C                      non-bonded contacts
C  3  <filename>.sdh - File generated by TPLOT program containing the
C                      residue-by-residue log-odds scores for various
C                      properties
C  4  <filename>.lan - File generated by program ANGLEN, holding all the
C                      mainchain bond lengths and bond angles
C  7  <filename>.out - Output print file highlighting any residue-by-residue
C                      values that differ from ideal means
C  8  <filename>.sco - Output print containing the values of several 
C                      stereochemical parameters
C  9  <filename>.ast - Output print containing the maximum asterisk values
C                      for each residue (for input to IDITIS tables)
C 10  procheck.prm   - Input parameter file holding all the user-defined
C                      options
C 11  <filename>_nn.ps - Output PostScript files, numbered nn = 01, 02, ...
C                      with the last-used number being picked up from
C                      the ps.number file
C 12  ps.number      - Input file holding last-used number for the
C                      PostScript files
C 13  <filename>.rsa - Residue-accessibility file created by the naccess
C                      programs
C 14  <filename>.sum - Output summary page showing summarised results from
C                      all the plots
C 15  <filename>.html- Output html file giving summary statistics in html
C                      format
C 16  <filename>.scr - Output RasMol script file which will highlight all
C                      the residues involved in bad contacts
C
C--------------------------------------------------------------------------
C
C Subroutine calling tree
C -----------------------
C
C MAIN        Read in parameters from procheck.prm or create if not found
C         --> PARAMS   --> FINKEY
C                      --> GETCOL
C         --> GETPSN
C
C             Get filename and resolution of structure
C         --> GETCOD   --> GETNAM
C         --> OPESUM
C         --> OPEHTM
C
C             1st pass through data: Calculate means of all parameters
C         --> MEANS    --> RAMREG / RAMNEW
C
C             Read through the input data files to calculate maximum
C             residue-by-residue values and overall means
C         --> GETSDH
C         --> GETRSA
C         --> CALCS
C         --> GETNB    --> ISBAD
C         --> GETLAN
C
C             2nd pass through data: Calculate standard deviations of all
C             parameters
C         --> STDEVS
C         --> SCALCS
C
C             Plot the Main-chain and Side-chain Properties plots (if required)
C         --> QUALIT   --> PSNAME
C                      --> PSOPEN
C                      --> PSPAGE
C                      --> PSLWID
C                      --> PSCTXT
C                      --> PSHADE
C                      --> PSUBOX
C                      --> AXES    --> PSLWID
C                                  --> PSLINE
C                                  --> PSCTXT
C                      --> PSRCTX
C                      --> CURSHD  --> PSHADE
C                                  --> PSUBOX
C                                  --> PSLINE
C                      --> PSMARK  --> PSBBOX
C                                  --> PSTRIA
C                      --> PSBBOX
C                      --> QSTAT   --> PSCTXT
C                                  --> QPUT    --> PSTEXT
C                                              --> PSCTXT
C                                  --> PSLWID
C                                  --> PSLINE
C                                  --> BANDIS
C                      --> PSENDP
C                      --> PSCLOS
C
C             3rd pass through data: Produce the residue-by-residue listing
C             and the Residues plot
C         --> PINS     --> ASTOPE
C                      --> REASDH
C                      --> REARSA
C                      --> ASTPRN  --> ASTHED  --> ASTABL
C                                              --> ASTOPT
C                                              --> COLHD1
C                                              --> COLHD2
C                                              --> COLHD3
C                                  --> RAMREG / RAMNEW
C                                  --> ASTDEV
C                                  --> READNB  --> ISBAD
C                      --> PSENDP
C                      --> PSCLOS
C                      --> PINPLT  --> PSNAME
C                                  --> PSOPEN
C                                  --> PSPAGE
C                                  --> PSLWID
C                                  --> PSCTXT
C                                  --> PSTEXT
C                                  --> ASTDEV
C                                  --> PINTIC  --> PSLWID
C                                              --> PSLINE
C                                  --> PINRAM  --> PSHADE
C                                              --> PSTRIA
C                                              --> PSBBOX
C                                              --> PSTEXT
C                                  --> PINCHQ  --> PSCALE
C                                              --> PSBBOX
C                                              --> PSTEXT
C                                  --> ACCSHD  --> PSLWID
C                                              --> PSCALE
C                                              --> PSUBOX
C                                  --> SSPLOT  --> PSLWID
C                                              --> PSLINE
C                                              --> PSHADE
C                                              --> PSUBOX
C                                              --> PSUTRI
C                                              --> PSTEXT
C                                              --> DHELIX  --> PSHADE
C                                                          --> PSUBOX
C                                                          --> PSLWID
C                                  --> PINGRF  --> PSHADE
C                                              --> PSUBOX
C                                              --> AXES    --> PSLWID
C                                                          --> PSLINE
C                                                          --> PSCTXT
C                                              --> PSLINE
C                                              --> PSCTXT
C                                              --> PSRCTX
C                                  --> PINRNO  --> PSLWID
C                                              --> PSLINE
C                                              --> PSCTXT
C                                  --> PINBOX  --> PSHADE
C                                              --> PSBBOX
C                      --> PINGFS  --> PSCALE
C                                  --> PSBBOX
C                                  --> PSTEXT
C                      --> ASTEND  --> ASTDEV
C                                  --> ASTHED  --> (see above)
C                      --> ASTMEA  --> ASTDEV
C                                  --> ASTHED  --> (see above)
C                      --> ASTKEY  --> ASTHED  --> (see above)
C                      --> ASTLAN  --> ASTHED  --> (see above)
C                                  --> ASTDEV
C                                  --> COLHD2
C                                  --> LANPRN  --> ASTHED  --> (see above)
C                                              --> ASTDEV
C                                  --> ASTEND
C                                  --> ASTBLA  --> ASTHED  --> (see above)
C                                              --> ASTDEV
C                      --> ASTBAD  --> ASTHED  --> (see above)
C                                  --> ISBAD
C                      --> ASTATS  --> ASTHED  --> (see above)
C                                  --> BANDIS
C                      --> HSTATS
C                      --> MCLASS  --> ASTHED
C                      --> GFACTS  --> ASTHED
C                      --> GHTML
C
C             Write out overall seterochemical parameters
C         --> WRIPAR
C         --> PUTPSN
C         --> WRISUM
C
C--------------------------------------------------------------------------


      PROGRAM PPLOT
 
      INCLUDE 'pplot.inc'

 
C---- Read in the user-defined parameters
      CALL PARAMS
      IF (IFAIL) GO TO 990

C---- Read in the last-used plot-number for the PostScript files
      CALL GETPSN(IPLOT)

C---- Initialise variables
      BADCOP = 0.0
      IFAIL = .FALSE.
      ILINE = NLINES
      IPAGE = 0
 
C---- Read in the code of the Brookhaven file and the structure's resolution
      CALL GETCOD
      IF (IFAIL) GO TO 990

CHECK v.3.2-->
C---- Open the summary file
      CALL OPESUM(FILSUM,.FALSE.,IFAIL)
      IF (IFAIL) GO TO 990
CHECK v.3.2<--

CHECK v.3.3.2-->
C---- Open the html file
CHECK v.3.4.3-->
      IF (WWWOUT) THEN
CHECK v.3.4.3<--
          CALL OPEHTM(FILHTM,.FALSE.,IFAIL)
          IF (IFAIL) GO TO 990
CHECK v.3.4.3-->
      ENDIF
CHECK v.3.4.3<--
CHECK v.3.3.2<--

C---- Read in the data and perform accumulations for the various mean
C     values, and some of the deviations from ideal values
      CALL MEANS
      IF (IFAIL) GO TO 990

C---- Read through the log-odds scores file to find the final means
      CALL GETSDH
      IF (IFAIL) GO TO 990

CHECK v.3.1-->
C---- Read through the residue accessibilities in the .rsa file (if present)
C     and calculate maximum and minimum values
      CALL GETRSA
CHECK v.3.1<--

C---- Calculate the means and deviations from ideal values
      CALL CALCS

C---- Read through the bond lengths and bond angles file to find the mean
C     and maximum and minimum values
      CALL GETLAN
      IF (IFAIL) GO TO 990

C---- Read through the non-bonded interactions file to pick up number
C     of bad contacts per 100 residues
      CALL GETNB(FILNB,NBAD,BADCOP,VWDIST,NONBON,NRESID,IFAIL)
      IF (IFAIL) GO TO 990

C---- Re-read the data for calculation of the various standard
C     deviations required
      CALL STDEVS
      IF (IFAIL) GO TO 990

C---- Calculate the standard deviations
      CALL SCALCS

C---- Plot all the stereochemical quality parameters
      CALL QUALIT

C---- Read through a third time and produce the pinplots
      CALL PINS

C---- Write out the stereochemical parameters
      CALL WRIPAR
      IF (IFAIL) GO TO 990

C---- Write out the current PostScript plot number
      CALL PUTPSN(IPLOT)

CHECK v.3.2-->
C---- Write out data to the summary file
      CALL WRISUM
CHECK v.3.2<--

C---- Close the output file
      CLOSE(7)

990   CONTINUE
      IF (IFAIL) THEN
          PRINT*, '* Program pplot terminated with error'
CHECK v.3.2-->
          WRITE(14,*)
          WRITE(14,*) '*** Program pplot terminated with error. See lo',
     -        'g file:  pplot.log'
          WRITE(14,*)
CHECK v.3.2<--
      ELSE 
          PRINT*, '*'
          PRINT*, '* Detailed listing: ', FILOUT(1:ILEN + 4)
          PRINT*, '*'
          PRINT*, '* Program complete'
      ENDIF
      END
 
C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE PARAMS  -  Read in program parameters from parameter file
C
C----------------------------------------------------------------------+---

      SUBROUTINE PARAMS

      INCLUDE 'pplot.inc'

      CHARACTER*1   YESNO
CHECK v.3.4-->
      CHARACTER*80  IREC
CHECK v.3.4<--
      INTEGER       I, ICOL, INUMB, INUMB1, INUMB2, INUMB3, LINE
CHECK v.3.4-->
C      LOGICAL       ALLCOL, FINERR
      LOGICAL       ALLCOL, ENDCOL, FINERR
CHECK v.3.4<--
      REAL          RNUMB

C---- Initialise variables and set default parameter values
      ALLCOL = .FALSE.
      ASTONL = .FALSE.
      BCLIST = .TRUE.
      BSHADE(1) = .TRUE.
      BSHADE(2) = .TRUE.
      BSHADE(3) = .TRUE.
      CHAIN = ' '
CHECK v.3.2-->
      COMBPS = .FALSE.
CHECK v.3.2<--
      HEADIN = .TRUE.
      INCOLR(1) = .FALSE.
      INCOLR(2) = .FALSE.
      INCOLR(3) = .FALSE.
      LINE = 0
CHECK v.3.6-->
      NEWREG = .FALSE.
CHECK v.3.6<--
      NLINES = 66
      NPLOTS = 0
      ONLYHI = .FALSE.
CHECK v.3.2-->
      PLABEL = .TRUE.
CHECK v.3.2<--
      PLOTPN = .TRUE.
      PLOTQ1 = .TRUE.
      PLOTQ2 = .TRUE.
      PLTNUM(1) = 1
      PLTNUM(2) = 2
      PLTNUM(3) = 3
      SHOWAC = .TRUE.
      STDLIM = 0.0
CHECK v.3.2-->
      WITHAN = .FALSE.
CHECK v.3.2<--
CHECK v.3.4.3-->
      WWWOUT = .FALSE.
CHECK v.3.4.3<--

C---- Open parameter file
      OPEN(UNIT=10, FILE='procheck.prm', STATUS='OLD',
     -     FORM='FORMATTED', ACCESS='SEQUENTIAL',
CVAX     -     CARRIAGECONTROL = 'LIST', READONLY,
     -     ERR=900)
      FINERR = .FALSE.
      LINE = 0

C---- Read in the parameters

C---- Check that have the right version number in the parameter file
CHECK v.3.2-->
C      CALL FINKEY('PROCHECK v.3.0',14,LINE,FINERR)
      CALL FINKEY('PROCHECK v.3.3',14,LINE,FINERR)
      IF (FINERR) THEN
          CALL FINKEY('PROCHECK v.3',12,LINE,FINERR)
          IF (FINERR) THEN
              GO TO 901
          ELSE
              PRINT*, '* Warning. Parameter file not up-to-date'
              PRINT*, '*          Defaults will be used for missing',
     -            ' items'
          ENDIF
      ENDIF
CHECK v.3.2<--
      IF (FINERR) GO TO 901

C---- Find the colours key-word
      CALL FINKEY('Colours',7,LINE,FINERR)
      IF (FINERR) GO TO 990

C---- Read in all the RGB colours and corresponding colour names
CHECK v.3.4-->
C      DO 100, ICOL = 1, MXCOLR
C          LINE = LINE + 1
C          READ(10,*,END=902,ERR=904) (RGB(I, ICOL), I = 1, 3),
C     -        COLNAM(ICOL)
C 100  CONTINUE
      ENDCOL = .FALSE.
      NCOLOR = MXCOLR
      DO 100, ICOL = 1, MXCOLR
          IF (.NOT.ENDCOL) THEN
              LINE = LINE + 1
              READ(10,20,END=902,ERR=904) IREC
 20           FORMAT(A)
              IF (IREC.EQ.' ') THEN
                  ENDCOL = .TRUE.
              ELSE
                  READ(IREC,*,ERR=904) (RGB(I,ICOL), I = 1, 3),
     -                COLNAM(ICOL)
                  NCOLOR = ICOL
              ENDIF
          ENDIF

C----     If have reached end of colours then insert default
          IF (ENDCOL) THEN
              RGB(1,ICOL) = 0.0
              RGB(2,ICOL) = 0.0
              RGB(3,ICOL) = 0.0
              COLNAM(ICOL) = 'WHITE'
          ENDIF
 100  CONTINUE
CHECK v.3.4<--

CHECK v.3.6-->
C---- See if new Ramachandran regions are to be used
      CALL FINKEY('Ramachandran regions',20,LINE,FINERR)
      IF (.NOT.FINERR) THEN
          READ(10,120,END=902,ERR=904) YESNO
          IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
              NEWREG = .TRUE.
          ELSE
              NEWREG = .FALSE.
          ENDIF
      ENDIF
CHECK v.3.6<--

C---- Determine whether all plots are to be in colour

C---- Find the colour-all-plots keywords
      CALL FINKEY('Colour all plots?',17,LINE,FINERR)
      IF (FINERR) GO TO 990

C---- Determine whether all plots are to be in colour
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          ALLCOL = .TRUE.
CHECK v.3.4.3-->
      ELSE IF (YESNO.EQ.'W' .OR. YESNO.EQ.'w') THEN
          ALLCOL = .TRUE.
          WWWOUT = .TRUE.
CHECK v.3.4.3<--
      ELSE
          ALLCOL = .FALSE.
      ENDIF

C---- Determine which plots are to be produced

C---- Find the "Which plots" keyword
      CALL FINKEY('Which plots',11,LINE,FINERR)
      IF (FINERR) GO TO 990

C---- Skip the first 3 options as these done by tplot.f
      DO 150, I = 1, 3
          LINE = LINE + 1
          READ(10,120,END=902,ERR=904) YESNO
 120      FORMAT(A)
 150  CONTINUE

C---- 4. Main-chain parameters (Y/N)
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          PLOTQ1 = .TRUE.
          NPLOTS = NPLOTS + 1
      ELSE
          PLOTQ1 = .FALSE.
      ENDIF

C---- 5. Side-chain parameters (Y/N)
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          PLOTQ2 = .TRUE.
          NPLOTS = NPLOTS + 1
      ELSE
          PLOTQ2 = .FALSE.
      ENDIF

C---- 6. Residue properties (Y/N)
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          PLOTPN = .TRUE.
          NPLOTS = NPLOTS + 1
      ELSE
          PLOTPN = .FALSE.
      ENDIF

C---- Check whether any plots are to be produced
      IF (NPLOTS.GT.0) THEN
          NOPLOT = .FALSE.
      ELSE
          NOPLOT = .TRUE.
      ENDIF

C---- Read in the plot parameters

C---- Find the Main-chain Parameters key-word
      CALL FINKEY('4. Main-chain param',19,LINE,FINERR)
      IF (FINERR) GO TO 990
      PLTYPE = 1

C---- Plot options

C---- Background shading (Y/N)?
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          BSHADE(PLTYPE) = .TRUE.
      ELSE
          BSHADE(PLTYPE) = .FALSE.
      ENDIF

C---- Produce a black-and-white or colour PostScript file
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          INCOLR(PLTYPE) = .TRUE.
      ELSE
          INCOLR(PLTYPE) = .FALSE.
      ENDIF

C---- Get each of the user-defined colours for this plot
      DO 200, ICOL = 1, 3
          CALL GETCOL(COLPLT(PLTYPE,ICOL),LINE,COLNAM,MXCOLR)
 200  CONTINUE

C---- Find the Side-chain Parameters key-word
      CALL FINKEY('5. Side-chain param',19,LINE,FINERR)
      IF (FINERR) GO TO 990
      PLTYPE = 2

C---- Plot options

C---- Background shading (Y/N)?
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          BSHADE(PLTYPE) = .TRUE.
      ELSE
          BSHADE(PLTYPE) = .FALSE.
      ENDIF

C---- Produce a black-and-white or colour PostScript file
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          INCOLR(PLTYPE) = .TRUE.
      ELSE
          INCOLR(PLTYPE) = .FALSE.
      ENDIF

C---- Get each of the user-defined colours for this plot
      DO 300, ICOL = 1, 3
          CALL GETCOL(COLPLT(PLTYPE,ICOL),LINE,COLNAM,MXCOLR)
 300  CONTINUE

C---- 6. Residue properties plot

C---- Find the key-word
      CALL FINKEY('6. Residue properties',21,LINE,FINERR)
      IF (FINERR) GO TO 990
      PLTYPE = 3

C---- Which 3 plots are to appear on the Residues plot (1 - MXPLOT)
      NRGRAF = 0
      LINE = LINE + 1
      READ(10,*,END=902,ERR=904) INUMB1, INUMB2, INUMB3
      IF (INUMB1.GE.0 .AND. INUMB1.LE.MXPLOT) PLTNUM(1) = INUMB1
      IF (PLTNUM(1).GT.0) NRGRAF = NRGRAF + 1
      IF (INUMB2.GE.0 .AND. INUMB2.LE.MXPLOT) PLTNUM(2) = INUMB2
      IF (PLTNUM(2).GT.0) NRGRAF = NRGRAF + 1
      IF (INUMB3.GE.0 .AND. INUMB3.LE.MXPLOT) PLTNUM(3) = INUMB3
      IF (PLTNUM(3).GT.0) NRGRAF = NRGRAF + 1

C---- Background shading (Y/N)?
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          BSHADE(PLTYPE) = .TRUE.
      ELSE
          BSHADE(PLTYPE) = .FALSE.
      ENDIF

C---- No. of standard deviations for highlighting on Residues plot
      LINE = LINE + 1
      READ(10,*,END=902,ERR=904) RNUMB
      LIMRES = RNUMB
      IF (LIMRES.LT.0.0) LIMRES = 0.0
      IF (LIMRES.GT.99.9) LIMRES = 99.9

C---- Shading showing estimated accessibility (Y/N)?
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          SHOWAC = .TRUE.
      ELSE
          SHOWAC = .FALSE.
      ENDIF

C---- Produce a black-and-white or colour PostScript file
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          INCOLR(PLTYPE) = .TRUE.
      ELSE
          INCOLR(PLTYPE) = .FALSE.
      ENDIF

C---- Get each of the user-defined colours for this plot
      DO 400, ICOL = 1, 13
          CALL GETCOL(COLPLT(PLTYPE,ICOL),LINE,COLNAM,MXCOLR)
 400  CONTINUE

C---- Listing options

C---- Find the key-word
      CALL FINKEY('Listing options',15,LINE,FINERR)
      IF (FINERR) GO TO 990

C---- Print explanatory test at head of printout (Y/N)
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          HEADIN = .TRUE.
      ELSE
          HEADIN = .FALSE.
      ENDIF
      IF (YESNO.EQ.'X' .OR. YESNO.EQ.'x') THEN
          IDITIS = .TRUE.
      ELSE
          IDITIS = .FALSE.
      ENDIF

C---- Print only asterisks on printout (ie no values) (Y/N)
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          ASTONL = .TRUE.
      ELSE
          ASTONL = .FALSE.
      ENDIF

C---- Print only highlighted residues (Y/N)
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          ONLYHI = .TRUE.
      ELSE
          ONLYHI = .FALSE.
      ENDIF

C---- Minimum deviation from the ideal. (Only parameters whose deviation from
C     the ideal value is greater than, or equal, to this number of standard
C     deviations will be printed).
      LINE = LINE + 1
      READ(10,*,END=902,ERR=904) RNUMB
      STDLIM = RNUMB
 
C---- Number of lines per page of the asterisks listing
      LINE = LINE + 1
      READ(10,*,END=902,ERR=904) INUMB
      NLINES = INUMB
 
C---- List the bad contacts on the printout (Y/N)
      LINE = LINE + 1
      READ(10,120,END=902,ERR=904) YESNO
      IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
          BCLIST = .TRUE.
      ELSE
          BCLIST = .FALSE.
      ENDIF

CHECK v.3.2-->
C---- Find whether file-handles are required or not
      CALL FINKEY('File-handles',12,LINE,FINERR)
      IF (.NOT.FINERR) THEN

C----     See whether the file-handle is required
          LINE = LINE + 1
          READ(10,120,END=902,ERR=904) YESNO
          IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
              WITHAN = .TRUE.
          ELSE
              WITHAN = .FALSE.
          ENDIF

C----     See whether plot filename to be printed on the plot itself
          LINE = LINE + 1
          READ(10,*,END=902,ERR=904)
          LINE = LINE + 1
          READ(10,120,END=902,ERR=904) YESNO
          IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
              PLABEL = .TRUE.
          ELSE
              PLABEL = .FALSE.
          ENDIF

C----     See whether all pages of same plot to be combined in one
C         paginated PostScript file
          LINE = LINE + 1
          READ(10,120,END=902,ERR=904) YESNO
          IF (YESNO.EQ.'Y' .OR. YESNO.EQ.'y') THEN
              COMBPS = .TRUE.
          ELSE
              COMBPS = .FALSE.
          ENDIF
      ENDIF
CHECK v.3.2<--

C---- If all plots are required to be in colour, then set all the
C     appropriate flags to TRUE
      IF (ALLCOL) THEN
          DO 600, PLTYPE = 1, 3
              INCOLR(PLTYPE) = .TRUE.
 600      CONTINUE
      ENDIF

      GO TO 999


C---- Errors reading parameter file
900   CONTINUE
      PRINT*, '* Parameters file (procheck.prm) not found.'
      GO TO 990

 901  CONTINUE
      PRINT*, '* Failed to find correct version number in parameters ',
     -        'file, procheck.prm'
      GO TO 990

902   CONTINUE
      PRINT*, '* Premature end of parameters file, procheck.prm, ',
     -        'encountered at line', LINE
      GO TO 990

904   CONTINUE
      PRINT*, '* Error reading parameter file, procheck.prm, at ',
     -    'line', LINE
      GO TO 990

C---- Close the parameter file
 990  CONTINUE
      PRINT*, '* Default values have been assumed for the ',
     -    'parameters'
      CLOSE(10)

999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE GETCOD  -  Read in the coordinates filename and the
C                        structure's resolution
C
C----------------------------------------------------------------------+--- 
 
      SUBROUTINE GETCOD
 
      INCLUDE 'pplot.inc'
 
CHECK v.3.2-->
C      INTEGER       LINE
      CHARACTER*1   LOWERA
      CHARACTER*26  UPPER
      INTEGER       LINE, N
CHECK v.3.2<--
      LOGICAL       IERROR

CHECK v.3.2-->
      DATA  LOWERA / 'a' /
      DATA  UPPER  / 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' /
CHECK v.3.2<--

C---- Initialise variables
      LINE = 0

C---- Accept name of original .pdb file holding the structure
      PRINT*, 'Enter filename containing coordinates of structure'
      READ(*,110,ERR=900) PDBFIL
 110  FORMAT(A)

C---- Peel off directory path and extension
CHECK v.3.6.4-->
C      CALL GETNAM(PDBFIL,ISTART,IEND,IERROR)
      CALL GETNAM(PDBFIL,FNAMLN,ISTART,IEND,IERROR)
CHECK v.3.6.4<--
      IF (IERROR) GO TO 990

C---- Form names of other files that will be required in default directory
      ILEN = IEND - ISTART + 1
      BLEN = ILEN
      BRCODE = PDBFIL(ISTART:IEND)
      FILOUT = PDBFIL(ISTART:IEND) // '.out'
      FILNB = PDBFIL(ISTART:IEND) // '.nb'
      FILRIN = PDBFIL(ISTART:IEND) // '.rin'
      FILRSA = PDBFIL(ISTART:IEND) // '.rsa'
      FILLAN = PDBFIL(ISTART:IEND) // '.lan'
      FILPS = PDBFIL(ISTART:IEND)
      FILSCO = PDBFIL(ISTART:IEND) // '.sco'
      FILAST = PDBFIL(ISTART:IEND) // '.ast'
      FILSDH = PDBFIL(ISTART:IEND) // '.sdh'
CHECK v.3.2-->
      FILSUM = PDBFIL(ISTART:IEND) // '.sum'
CHECK v.3.2<--
CHECK v.3.3.2-->
      FILHTM = PDBFIL(ISTART:IEND) // '.html'
CHECK v.3.3.2<--

C---- Accept chain-ID
      PRINT*, 'Enter required chain-ID, or leave blank for all'
      READ(*,110,ERR=906) CHAIN

CHECK v.3.2-->
C---- Convert chain ID to upper-case if necessary
      N = ICHAR(CHAIN) - ICHAR(LOWERA) + 1
      IF (N.GE.1 .AND. N.LE.26) CHAIN = UPPER(N:N)
CHECK v.3.2<--

C---- Add chain identifier to plot headings
      IF (CHAIN.NE.' ') THEN
          BRCODE = BRCODE(1:ILEN) // ' - Chain ' // CHAIN
          BLEN = BLEN + 10
          IF (BLEN.GT.78) BLEN = 78
      ENDIF

C---- Accept protein's resolution
      PRINT*, 'Enter resolution'
      READ(*,*,ERR=904) RESOL
      IF (RESOL.LT.1.0) RESOL = 1.0
      IF (RESOL.GT.4.0) RESOL = 4.0

      GO TO 999

C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Data error in entered filename'
      GO TO 990

 904  CONTINUE
      PRINT*, '*** ERROR. Data error in entered resolution'
      GO TO 990

 906  CONTINUE
      PRINT*, '*** ERROR. Data error in entered chain-ID'
      GO TO 990

990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE MEANS  -  First pass through the data file(s), calculating
C                       the means of the appropriate quantities and,
C                       those standard deviations that are calculated round
C                       a global mean
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE MEANS

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   INCHN, SECSTR
      CHARACTER*2   REGION
      CHARACTER*3   RESDUE
      CHARACTER*5   SEQNO
      INTEGER       I, IRESID, LINE, OOI1, OOI2, REGNO, REGTYP, SERNO
      LOGICAL       DISALL
      REAL          CGAMB, CHI1, CHI2, CHI3, CHI4, DIHANG, DISULF,
CHECK v.3.2-->
C     -              ENHB, MCBVAL, OMEGA, PHI, PSI, SCBVAL
     -              ENHB, MCBSTD, MCBVAL, OMEGA, PHI, PSI, SCBSTD,
     -              SCBVAL
CHECK v.3.2<--


C---- Initialise variables
      ACDEV = 0.0
      ACMEAN = 0.0
      ACSTD = 0.0
      CH2DEV = 0.0
      CH2MEA = 0.0
      CH2STD = 0.0
      C3LMEA = 0.0
      C3LSTD = 0.0
      C3RMEA = 0.0
      C3RSTD = 0.0
      GMIDEV = 0.0
      GMIMEA = 0.0
      GMISTD = 0.0
      GPLDEV = 0.0
      GPLMEA = 0.0
      GPLSTD = 0.0
      GTRDEV = 0.0
      GTRMEA = 0.0
      GTRSTD = 0.0
      HBDEV = 0.0
      HBMEAN = 0.0
      HBSTD = 0.0
      HPMEAN = 0.0
      HPSTD = 0.0
      IRESID = 0
      LINE = 0
      NALPHC = 0
      NALLOW = 0
      NAROMA = 0
      NASN = 0
      NCORE = 0
      NCPOOL = 0
CHECK v.3.2-->
      NCHI2 = 0
CHECK v.3.2<--
      NCHI3L = 0
      NCHI3R = 0
      NCIS = 0
      NDAM = 0
      NDISUL = 0
      NENDCH = 0
      NGENER = 0
      NGLY = 0
      NGMINU = 0
      NGPLUS = 0
      NGTRAN = 0
      NHBOND = 0
      NHXPSI = 0
      NOMEGA = 0
      NONPG = 0
      NOUTSI = 0
      NPHIHX = 0
      NPRO = 0
      NPROPH = 0
      NRAMPL = 0
      OMDEV = 0.0
      OMSTD = 0.0
      OMMEAN = 0.0
      OOIMAX = 0
      OOIMIN = 999
      PHMEAN = 0.0
      PHSTD = 0.0
      DO 50, I = 1, MXPLOT
          PINMAX(I) = 0.0
 50   CONTINUE
      PLTSTD(PLTCH1) = LIMRES * (SDEVGM + SDEVGT + SDEVGP) / 3.0
      PLTSTD(PLTOME) = LIMRES * SDEVOM
      PLTSTD(PLTCAL) = LIMRES * SDEVDH
      PLTSTD(PLTHB) = LIMRES * SDEVHB
      PLTSTD(PLTCGB) = 999.9
      PLTSTD(PLTMCB) = 999.9
      PLTSTD(PLTSCB) = 999.9
      PLTSTD(PLTLAV) = 6.0
      PLTSTD(PLTLCC) = 6.0
      PLTSTD(PLTLPP) = 6.0
      PLTSTD(PLTOOI) = 100.0
      PINMAX(PLTOOI) =  99.0
CHECK v.3.1-->
      PLTSTD(PLTACC) = 100.0
      PINMAX(PLTACC) =  99.0
CHECK v.3.1<--
CHECK v.3.2-->
      PLTSTD(PLTSDM) = 999.9
      PLTSTD(PLTSDS) = 999.9
CHECK v.3.2<--
      POOMEA = 0.0
      POOSTD = 0.0
      PPMEAN = 0.0
      PPSTD = 0.0
      SSMEAN = 0.0
      SSSTD = 0.0

C---- Open the data file holding the residue information, <filename>.rin
      OPEN(UNIT=1, FILE=FILRIN, STATUS='OLD', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    READONLY,
     -    ERR=900)

C---- Read through the residues file
 100  CONTINUE
          READ(1,110,END=500,ERR=902) SERNO, RESDUE, INCHN, SEQNO,
     -        SECSTR, PHI, PSI, OMEGA, CHI1, CHI2, CHI3, CHI4, ENHB,
CHECK v.3.2-->
C     -        DISULF, DIHANG, CGAMB, MCBVAL, SCBVAL, OOI1, OOI2
C 110      FORMAT(I4,A3,1X,A1,A5,A1,11F7.2,2F7.3,2I3)
     -        DISULF, DIHANG, CGAMB, MCBVAL, SCBVAL, OOI1, OOI2,
     -        MCBSTD, SCBSTD
 110      FORMAT(I4,A3,1X,A1,A5,A1,11F7.2,2F7.3,2I3,2F7.3)
CHECK v.3.2<--
          LINE = LINE + 1

C----     Only process this residue if it belongs to the required chain
          IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN

C----         Increment residue-count
              IRESID = IRESID + 1

C----         Accumulate values for calculation of means

C----         Chi-1 torsion angle
              IF (RESDUE.EQ.'PRO') CHI1 = 999.9
              IF (CHI1.LT.0.0) CHI1 = CHI1 + 360.0
              IF (CHI1.EQ.360.0) CHI1 = 0.0
              IF (CHI1.GE.0.0 .AND. CHI1.LT.360.0) THEN
                  POOMEA = POOMEA + CHI1
                  NCPOOL = NCPOOL + 1

C----             Chi-1 gauche minus
                  IF (CHI1.GE.0.0 .AND. CHI1.LT.120.0) THEN
                      GMIMEA = GMIMEA + CHI1
                      GMIDEV = GMIDEV + (CHI1 - GLOBGM)
     -                    * (CHI1 - GLOBGM)
                      NGMINU = NGMINU + 1
                      PINMAX(PLTCH1) = MAX(ABS(CHI1 - GLOBGM),
     -                    PINMAX(PLTCH1))

C----             Chi-1 trans
                  ELSE IF (CHI1.GE.120.0 .AND. CHI1.LT.240.0) THEN
                      GTRMEA = GTRMEA + CHI1
                      GTRDEV = GTRDEV + (CHI1 - GLOBGT)
     -                    * (CHI1 - GLOBGT)
                      NGTRAN = NGTRAN + 1
                      PINMAX(PLTCH1) = MAX(ABS(CHI1 - GLOBGT),
     -                    PINMAX(PLTCH1))

C----             Chi-1 gauche plus
                  ELSE IF (CHI1.GE.240.0 .AND. CHI1.LT.360.0) THEN
                      GPLMEA = GPLMEA + CHI1
                      GPLDEV = GPLDEV + (CHI1 - GLOBGP)
     -                    * (CHI1 - GLOBGP)
                      NGPLUS = NGPLUS + 1
                      PINMAX(PLTCH1) = MAX(ABS(CHI1 - GLOBGP),
     -                    PINMAX(PLTCH1))
                  ENDIF
              ENDIF

C----         Chi-2 trans torsion angle
              IF (RESDUE.NE.'PHE' .AND. RESDUE.NE.'TYR' .AND.
     -            RESDUE.NE.'TRP' .AND. RESDUE.NE.'HIS' .AND.
     -            RESDUE.NE.'ASP' .AND. RESDUE.NE.'ASN') THEN
                  IF (CHI2.LE.0.0) CHI2 = CHI2 + 360.0
                  IF (CHI2.GT.120.0 .AND. CHI2.LE.240.0) THEN
                      CH2MEA = CH2MEA + CHI2
                      CH2DEV = CH2DEV + (CHI2 - GLOBC2)
     -                    * (CHI2 - GLOBC2)
                      NCHI2 = NCHI2 + 1
                  ENDIF
              ENDIF

C----         Proline phi
              IF (RESDUE.EQ.'PRO' .AND. PHI.NE.999.9) THEN
                  PPMEAN = PPMEAN + PHI
                  NPROPH = NPROPH + 1
              ENDIF

C----         Phi helix
              IF (SECSTR.EQ.'H' .AND. PHI.NE.999.9) THEN
                  PHMEAN = PHMEAN + PHI
                  NPHIHX = NPHIHX + 1
              ENDIF

C----         Helix psi
              IF (SECSTR.EQ.'H' .AND. PSI.NE.999.9) THEN
                  HPMEAN = HPMEAN + PSI
                  NHXPSI = NHXPSI + 1
              ENDIF

C----         Chi-3 right-hand
              IF (RESDUE.EQ.'CYS' .AND. CHI3.GT.0.0 .AND.
     -            CHI3.LE.180.0) THEN
                  C3RMEA = C3RMEA + CHI3
                  NCHI3R = NCHI3R + 1
              ENDIF

C----         Chi-3 left-hand
              IF (RESDUE.EQ.'CYS' .AND. CHI3.LE.0.0 .AND.
     -            CHI3.GE.-180.0) THEN
                  C3LMEA = C3LMEA + CHI3
                  NCHI3L = NCHI3L + 1
              ENDIF

C----         Disulphide bond
              IF (RESDUE.EQ.'CYS') THEN
                  IF (DISULF.NE.0.0) THEN
                      SSMEAN = SSMEAN + DISULF
                      NDISUL = NDISUL + 1
                  ENDIF
              ENDIF

C----         Case of trans peptide (ie abs(omega) > 45) 
              IF (ABS(OMEGA).GE.45.0 .AND. OMEGA.NE.999.9) THEN
                  IF (OMEGA.LE.0.0) OMEGA = OMEGA + 360.0
                  OMMEAN = OMMEAN + OMEGA
                  NOMEGA = NOMEGA + 1
                  PINMAX(PLTOME) = MAX(ABS(OMEGA - GLOBOM),
     -                PINMAX(PLTOME))

C----         Case of cis peptide (ie abs(omega) < 45) 
              ELSE IF (ABS(OMEGA).LT.45.0 .AND. OMEGA.NE.999.9) THEN
                  PINMAX(PLTOME) = MAX(ABS(OMEGA),PINMAX(PLTOME))
              ENDIF

C----         Hydrogen bond energy mean and standard deviation
              IF (ENHB.LT.0.0) THEN
                  HBMEAN = HBMEAN + ENHB
                  HBDEV = HBDEV + (ENHB - GLOBHB) * (ENHB - GLOBHB)
                  NHBOND = NHBOND + 1
                  PINMAX(PLTHB) = MAX(ABS(ENHB - GLOBHB),PINMAX(PLTHB))
              ENDIF

C----         Alpha-carbon tetrahedral chirality
              IF (DIHANG.LE.360.0) THEN
                  ACMEAN = ACMEAN + DIHANG
                  ACDEV = ACDEV + (DIHANG - GLOBDH) * (DIHANG - GLOBDH)
                  NALPHC = NALPHC + 1
                  PINMAX(PLTCAL) = MAX(ABS(DIHANG - GLOBDH),
     -                PINMAX(PLTCAL))
              ENDIF

C----         Ooi number
              OOIMIN = MIN(OOI2,OOIMIN)
              OOIMAX = MAX(OOI2,OOIMAX)

C----         Set maximum values for B-value measures for pins plot
              PINMAX(PLTCGB) = MAX(CGAMB,PINMAX(PLTCGB))
              PINMAX(PLTMCB) = MAX(MCBVAL,PINMAX(PLTMCB))
              PINMAX(PLTSCB) = MAX(SCBVAL,PINMAX(PLTSCB))
CHECK v.3.2-->
              PINMAX(PLTSDM) = MAX(MCBSTD,PINMAX(PLTSDM))
              PINMAX(PLTSDS) = MAX(SCBSTD,PINMAX(PLTSDS))
CHECK v.3.2<--

C----         Increment count of different types of residues
              IF (RESDUE.EQ.'ASN') NASN = NASN + 1
              IF (RESDUE.EQ.'GLY') NGLY = NGLY + 1
              IF (RESDUE.EQ.'PRO') NPRO = NPRO + 1
              IF (RESDUE.EQ.'PHE' .OR. RESDUE.EQ.'TYR' .OR.
     -            RESDUE.EQ.'TRP' .OR. RESDUE.EQ.'HIS' .OR.
     -            RESDUE.EQ.'ASP') NAROMA = NAROMA + 1
              DISALL = .FALSE.

C----         Determine which region of Ramachandran plot residue lies
C             in
CHECK v.3.6-->
C              CALL RAMREG(PHI,PSI,REGION,REGNO,REGTYP) 
              IF (NEWREG) THEN
                  CALL RAMNEW(PHI,PSI,REGION,REGNO,REGTYP) 
              ELSE
                  CALL RAMREG(PHI,PSI,REGION,REGNO,REGTYP) 
              ENDIF
CHECK v.3.6<--

C----         If residue is neither a glycine nor a proline, then
C             determine in which region of the Ramachandran plot its
C             phi-psi values fall
              IF (RESDUE.NE.'GLY' .AND. RESDUE.NE.'PRO') THEN

C----             Check whether this is an end-residue at a chain break
                  IF (PHI.EQ.999.9 .OR. PSI.EQ.999.9) THEN
                      NENDCH = NENDCH + 1

C----             If valid phi-psi, then determine region type
                  ELSE
                      NONPG = NONPG + 1

C----                 Increment counts of residues in each region type
                      IF (REGION.EQ.'XX') THEN
                          NOUTSI = NOUTSI + 1
                          DISALL = .TRUE.
                      ELSE IF (REGION.EQ.'B ' .OR. REGION.EQ.'A '
     -                    .OR. REGION.EQ.'L ') THEN
                          NCORE = NCORE + 1
                      ELSE IF (REGION.EQ.'b ' .OR. REGION.EQ.'a '
     -                    .OR. REGION.EQ.'l ' .OR. REGION.EQ.'p ') THEN
                          NALLOW = NALLOW + 1
                      ELSE IF (REGION.EQ.'~b' .OR. REGION.EQ.'~a'
     -                    .OR. REGION.EQ.'~l' .OR. REGION.EQ.'~p') THEN
                          NGENER = NGENER + 1
                      ENDIF
                  ENDIF
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE
      NRESID = IRESID

C---- Check that file wasn't empty
      IF (NRESID.EQ.0) GO TO 908

C---- Calculate percentages for residues in the different regions of the
C     Ramachandran plot
      IF (NONPG.GT.0) THEN
          ALLOWP = 100.0 * REAL(NALLOW) / REAL(NONPG)
          COREPC = 100.0 * REAL(NCORE) / REAL(NONPG)
          GENERP = 100.0 * REAL(NGENER) / REAL(NONPG)
          OUTSIP = 100.0 * REAL(NOUTSI) / REAL(NONPG)
      ELSE
          ALLOWP = 0.0
          COREPC = 0.0
          GENERP = 0.0
          OUTSIP = 0.0
      ENDIF

C---- Adjust Ooi-number maximum and minimum if equal
      IF (OOIMAX.LE.OOIMIN) OOIMAX = OOIMIN + 1.0

      GO TO 999
 
C---- Fatal errors
900   CONTINUE
      PRINT*, '*** ERROR. Unable to open .rin data file '
      PRINT*, FILRIN, '*'
      PRINT*, '           Run program CLEAN to create it'
      GO TO 990
 
902   CONTINUE
      PRINT*, '*** ERROR. Data error in .rin file at line:', LINE + 1
      GO TO 990
 
 908  CONTINUE
      PRINT*, '*** ERROR. Data file .rin empty. Nothing to plot !'
      GO TO 990
 
990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE CALCS  -  Calculate means and the deviations from ideal
C                       values
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE CALCS

      INCLUDE 'pplot.inc'

      INTEGER       I
 
C---- Calculate means and standard deviations

C---- Chi-1 torsion angle (gauche minus)
      IF (NGMINU.NE.0) THEN
          GMIMEA = GMIMEA / NGMINU
          IF (NGMINU.GT.1) THEN
              GMIDEV = SQRT(GMIDEV / (NGMINU - 1))
          ELSE
              GMIDEV =0.0
          ENDIF
      ENDIF

C---- Chi-1 torsion angle (trans)
      IF (NGTRAN.NE.0) THEN
          GTRMEA = GTRMEA / NGTRAN
          IF (NGTRAN.GT.1) THEN
              GTRDEV = SQRT(GTRDEV / (NGTRAN - 1))
          ELSE
              GTRDEV =0.0
          ENDIF
      ENDIF

C---- Chi-1 torsion angle (gauche plus)
      IF (NGPLUS.NE.0) THEN
          GPLMEA = GPLMEA / NGPLUS
          IF (NGPLUS.GT.1) THEN
              GPLDEV = SQRT(GPLDEV / (NGPLUS - 1))
          ELSE
              GPLDEV =0.0
          ENDIF
      ENDIF

C---- Chi-1 torsion angle (pooled standard deviation)
      IF (NCPOOL.NE.0) THEN
          POOSTD = NGMINU * GMIDEV + NGTRAN * GTRDEV + NGPLUS * GPLDEV
          POOSTD = POOSTD / (NGMINU + NGTRAN + NGPLUS)
      ELSE
          POOSTD =0.0
      ENDIF

C---- Chi-2 trans torsion angle
      IF (NCHI2.NE.0) THEN
          CH2MEA = CH2MEA / NCHI2
          IF (NCHI2.GT.1) THEN
              CH2DEV = SQRT(CH2DEV / (NCHI2 - 1))
          ELSE
              CH2DEV =0.0
          ENDIF
      ENDIF

C---- Proline phi torsion angle
      IF (NPROPH.NE.0) THEN
          PPMEAN = PPMEAN / NPROPH
      ENDIF

C---- Phi torsion angle in helices
      IF (NPHIHX.NE.0) THEN
          PHMEAN = PHMEAN / NPHIHX
      ENDIF

C---- Helix psi torsion angle
      IF (NHXPSI.NE.0) THEN
          HPMEAN = HPMEAN / NHXPSI
      ENDIF

C---- Chi-3 torsion angle, right-handed
      IF (NCHI3R.NE.0) THEN
          C3RMEA = C3RMEA / NCHI3R
      ENDIF

C---- Chi-3 torsion angle, left-handed
      IF (NCHI3L.NE.0) THEN
          C3LMEA = C3LMEA / NCHI3L
      ENDIF

C---- Disulphide bond
      IF (NDISUL.NE.0) THEN
          SSMEAN = SSMEAN / NDISUL
      ENDIF

C---- Omega torsion angle
      IF (NOMEGA.NE.0) THEN
          OMMEAN = OMMEAN / NOMEGA
      ENDIF

C---- Hydrogen bond energy
      IF (NHBOND.NE.0) THEN
          HBMEAN = HBMEAN / NHBOND
          IF (NHBOND.GT.1) THEN
              HBDEV = SQRT(HBDEV / (NHBOND - 1))
          ELSE
              HBDEV =0.0
          ENDIF
      ENDIF

C---- Alpha carbon tetrahedral distortion
      IF (NALPHC.NE.0) THEN
          ACMEAN = ACMEAN / NALPHC
          IF (NALPHC.GT.1) THEN
              ACDEV = SQRT(ACDEV / (NALPHC - 1))
          ELSE
              ACDEV =0.0
          ENDIF
      ENDIF

C---- Adjust maximum values, if necessary
      DO 100, I = 1, MXPLOT
          IF (PINMAX(I).LT.1.0) THEN
              PINMAX(I) = 1.0
          ELSE IF (PINMAX(I).LT.2.0) THEN
              PINMAX(I) = 2.0
          ELSE IF (PINMAX(I).LT.5.0) THEN
              PINMAX(I) = 5.0
          ELSE IF (PINMAX(I).LT.10.0) THEN
              PINMAX(I) = 10.0
          ELSE IF (PINMAX(I).LT.15.0) THEN
              PINMAX(I) = 15.0
          ELSE IF (PINMAX(I).LT.20.0) THEN
              PINMAX(I) = 20.0
          ELSE IF (PINMAX(I).LT.30.0) THEN
              PINMAX(I) = 30.0
          ELSE IF (PINMAX(I).LT.40.0) THEN
              PINMAX(I) = 40.0
          ELSE IF (PINMAX(I).LT.50.0) THEN
              PINMAX(I) = 50.0
          ELSE IF (PINMAX(I).LT.100.0) THEN
              PINMAX(I) = 100.0
          ELSE IF (PINMAX(I).LT.125.0) THEN
              PINMAX(I) = 125.0
          ELSE IF (PINMAX(I).LT.150.0) THEN
              PINMAX(I) = 120.0
          ELSE IF (PINMAX(I).LT.200.0) THEN
              PINMAX(I) = 200.0
          ELSE IF (PINMAX(I).LT.500.0) THEN
              PINMAX(I) = 500.0
          ENDIF
 100  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE GETNB  -  Read through the non-bonded interactions file
C                       to calculate no. of bad contacts per 100 residues
C                       figure
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE GETNB(FILNB,NBAD,BADCOP,VWDIST,NONBON,NRESID,IFAIL)

      CHARACTER*1   MS1, MS2
      CHARACTER*3   ATYPE1, ATYPE2
      CHARACTER*3   RESDU1, RESDU2
      CHARACTER*(*) FILNB
      INTEGER       LINE, NBAD, NRESID
      LOGICAL       BADYES, IFAIL, NONBON
      REAL          BADCOP, DIST, VWDIST


C---- Initialise variables
      LINE = 0
      NBAD = 0

C---- Open the data file holding non-bonded contacts, <filename>.nb
      OPEN(UNIT=2, FILE=FILNB, STATUS='OLD', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    READONLY,
     -    ERR=50)
      NONBON = .TRUE.
      GO TO 100

C---- Non-bonded interactions file is missing. So, plot without this data
 50   CONTINUE
      PRINT*
      PRINT*, '***** Non-bonded interactions file is missing:', FILNB
      PRINT*, '      Plots will be produced without this data'
      PRINT*
      NONBON = .FALSE.
      GO TO 999

C---- If the file exists, then read through it

C---- Read in next record
 100  CONTINUE
          READ(2,150,END=500,ERR=900) RESDU1, ATYPE1, RESDU2, ATYPE2,
     -        DIST, MS1, MS2
 150      FORMAT(16X,A3,1X,A3,13X,A3,1X,A3,1X,F4.0,1X,2A1)
          LINE = LINE + 1

C----     Check distance
          CALL ISBAD(RESDU1,ATYPE1,RESDU2,ATYPE2,DIST,VWDIST,BADYES)
          IF (BADYES) NBAD = NBAD + 1

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

C---- If non-bonded interactions file is empty, then set flag accordingly
      IF (LINE.EQ.0) NONBON = .FALSE.
      BADCOP = 100.0 * REAL(NBAD) / REAL(NRESID)

      GO TO 999
 
C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Error reading .nb file at line:', LINE + 1
      GO TO 990
 
990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ISBAD  -  Check whether supplied non-bonded distance is bad
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ISBAD(RESDU1,ATYPE1,RESDU2,ATYPE2,DIST,VWDIST,BADYES)

      CHARACTER*3   ATYPE1, ATYPE2, RESDU1, RESDU2
      LOGICAL       BADYES
      REAL          DIST, VWDIST

      INTEGER       MXACC, MXDON
      PARAMETER    (MXACC = 39, MXDON = 33)

      CHARACTER*7   ACCEPT(MXACC), ATOM1, ATOM2, DONOR(MXDON)
      INTEGER       ITYPE
      LOGICAL       ACCEP1, ACCEP2, DONOR1, DONOR2

      DATA DONOR  / 'ALA N  ','CYS N  ','ASP N  ','GLU N  ','PHE N  ',
     -              'GLY N  ','HIS N  ','ILE N  ','LYS N  ','LEU N  ',
     -              'MET N  ','ASN N  ','GLN N  ','ARG N  ','SER N  ',
     -              'THR N  ','VAL N  ','TRP N  ','TYR N  ','CYS SG ',
     -              'HIS ND1','HIS NE2','LYS NZ ','ASN ND2','GLN NE2',
     -              'ARG NE ','ARG NH1','ARG NH2','SER OG ','THR OG1',
     -              'TRP NE1','TYR OH ','CYH SG ' /

      DATA ACCEPT / 'ALA O  ','CYS O  ','ASP O  ','GLU O  ','PHE O  ',
     -              'GLY O  ','HIS O  ','ILE O  ','LYS O  ','LEU O  ',
     -              'MET O  ','ASN O  ','PRO O  ','GLN O  ','ARG O  ',
     -              'SER O  ','THR O  ','VAL O  ','TRP O  ','TYR O  ',
     -              'CYS SG ','ASP OD1','ASP OD2','GLU OE1','GLU OE2',
     -              'HIS ND1','HIS NE2','MET SD ','ASN OD1','GLN OE1',
     -              'SER OG ','THR OG1','TYR OH ','CYH SG ','CSS SG ',
     -              'HOH O  ','WAT O  ','H2O O  ','DOD O  ' /


C---- Check the distance
      BADYES = .FALSE.

C---- Initialise variables
      ACCEP1 = .FALSE.
      ACCEP2 = .FALSE.
      ATOM1 = RESDU1 // ' ' // ATYPE1
      ATOM2 = RESDU2 // ' ' // ATYPE2
      DONOR1 = .FALSE.
      DONOR2 = .FALSE.

C---- If distance is greater than van der Waals distance, then not a
C     bad contact and don't need to worry about the atom types
      IF (DIST.GT.VWDIST) GO TO 999

C---- Exclude water-hydrogens
      IF (ATOM1(1:5).EQ.'DOD D' .OR. ATOM2(1:5).EQ.'DOD D') GO TO 999

C---- Exclude likely H-bonded atoms

C---- Check whether either atom 1 is an acceptor and atom 2 is a donor
      DO 100, ITYPE = 1, MXACC
          IF (ATOM1.EQ.ACCEPT(ITYPE)) ACCEP1 = .TRUE.
 100  CONTINUE
      DO 200, ITYPE = 1, MXDON
          IF (ATOM2.EQ.DONOR(ITYPE)) DONOR2 = .TRUE.
 200  CONTINUE
      IF (ACCEP1 .AND. DONOR2) GO TO 999

C---- Check whether either atom 2 is an acceptor and atom 1 is a donor
      DO 300, ITYPE = 1, MXACC
          IF (ATOM2.EQ.ACCEPT(ITYPE)) ACCEP2 = .TRUE.
 300  CONTINUE
      DO 400, ITYPE = 1, MXDON
          IF (ATOM1.EQ.DONOR(ITYPE)) DONOR1 = .TRUE.
 400  CONTINUE
      IF (ACCEP2 .AND. DONOR1) GO TO 999

C---- Check whether both atoms are water molecule oxygens
      IF (ATOM1.EQ.ATOM2) THEN
          IF (ATOM1.EQ.'HOH O') GO TO 999
          IF (ATOM1.EQ.'WAT O') GO TO 999
          IF (ATOM1.EQ.'H2O O') GO TO 999
          IF (ATOM1.EQ.'DOD O') GO TO 999
      ENDIF

C---- If have reached here then this is a bad contact
      BADYES = .TRUE.

 999  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE GETLAN  -  Read through the bond lengths and angles file
C                        to calculate mean values and find minimum and
C                        maximum values
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE GETLAN

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   INCHN
      CHARACTER*3   RESNAM
      CHARACTER*80  IREC
      INTEGER       IMAIN, IRESID, LINEA
      REAL          VALUE

C---- Initialise variables
      LINEA = 0
      DO 20, IMAIN = 1, NMAIN
          MCHMEA(IMAIN) = 0.0
          MCHSTD(IMAIN) = 0.0
          MCHNUM(IMAIN) = 0
          MCHMAX(IMAIN) = 0.0
          MCHMIN(IMAIN) = 999.9
 20   CONTINUE

C---- Open lengths and angles file, <filename>.lan
      OPEN(UNIT=4, FILE=FILLAN, STATUS='OLD', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    READONLY,
     -    ERR=900)

C---- Read through the header records
      DO 50, IMAIN = 1, NALP
          READ(4,*)
 50   CONTINUE

C---- Loop while reading in records
 100  CONTINUE
          READ(4,200,END=500,ERR=904) IREC
 200      FORMAT(A)
          LINEA = LINEA + 1

C----     Only process this record if it is not a planar group
          IF (IREC(29:33).NE.'PLANE') THEN
              READ(IREC,210,ERR=906) IRESID, INCHN, RESNAM, IMAIN, VALUE
 210          FORMAT(I6,A1,5X,A3,I2,F9.4)

C----         Only process this residue if it belongs to the required
C             chain
              IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN

C----             Accumulate mean values
                  MCHMEA(IMAIN) = MCHMEA(IMAIN) + VALUE
                  MCHNUM(IMAIN) = MCHNUM(IMAIN) + 1
                  MCHMAX(IMAIN) = MAX(VALUE,MCHMAX(IMAIN))
                  MCHMIN(IMAIN) = MIN(VALUE,MCHMIN(IMAIN))
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

C---- Calculate mean values
      DO 800, IMAIN = 1, NMAIN
          IF (MCHNUM(IMAIN).GT.0) THEN
              MCHMEA(IMAIN) = MCHMEA(IMAIN) / REAL(MCHNUM(IMAIN))
          ENDIF
 800  CONTINUE

      GO TO 999
 
C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Unable to open .lan file'
      GO TO 990
 
 904  CONTINUE
      PRINT*, '*** ERROR. Error reading .lan file at line:', LINEA + 1
      GO TO 990
 
 906  CONTINUE
      PRINT*, '*** ERROR. Data error in .lan file at line:', LINEA + 1
      PRINT*, IREC
      GO TO 990
 
990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE GETSDH  -  Read through the log-odds scores file
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE GETSDH

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   INCHN
      CHARACTER*120 IREC
CHECK v.3.5.1-->
C      INTEGER       IDISTR, IVALUE, LINE
      INTEGER       IDISTR, IRESID, IVALUE, LINE
CHECK v.3.5.1<--
      REAL          VALUE(NDISTR)

C---- Initialise variables
CHECK v.3.5.1-->
      DO 50, IRESID = 1, MXRES
          RESGF(IRESID) = 0.0
 50   CONTINUE
      IRESID = 0
CHECK v.3.5.1<--
      LINE = 0

C---- Open the file, <filename>.sdh
      OPEN(UNIT=3, FILE=FILSDH, STATUS='OLD', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    READONLY,
     -    ERR=900)

C---- Read through the records until get to the final line with mean-values
 100  CONTINUE
          READ(3,120,END=500,ERR=904) IREC
 120      FORMAT(A)
          LINE = LINE + 1

C----     If it is the "Means" record, store the overall stereochemical
C         R-factor
          IF (IREC(1:5).EQ.'Means') THEN

C----         Extract the G-factors
              READ(IREC,140,ERR=904) (GFACTR(IDISTR),
     -            IDISTR = 1, NDISTR)
 140          FORMAT(17X,10F9.4)
              SFACT = GFACTR(NDISTR)

C----     Otherwise read in log-odds values to determine the maximum
          ELSE
              READ(IREC,180,ERR=904) INCHN, (VALUE(IVALUE), IVALUE = 1,
     -            NDISTR)
 180          FORMAT(6X,1X,A1,9X,10F9.4)

C----         Only process this residue if it belongs to the required
C             chain
              IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN
                  IF (VALUE(1).LT.0.0) THEN
                      PINMAX(PLTLPP) = MAX(ABS(VALUE(1)),PINMAX(PLTLPP))
                  ENDIF
                  IF (VALUE(2).LT.0.0) THEN
                      PINMAX(PLTLCC) = MAX(ABS(VALUE(2)),PINMAX(PLTLCC))
                  ENDIF
                  IF (VALUE(NDISTR).LT.0.0) THEN
                      PINMAX(PLTLAV)
     -                    = MAX(ABS(VALUE(NDISTR)),PINMAX(PLTLAV))
                  ENDIF

CHECK v.3.5.1-->
C----             Store the G-factor
CHECK v.3.6.6-->
                  IF (IRESID.LT.MXRES) THEN
CHECK v.3.6.6<--
                      IRESID = IRESID + 1
                      RESGF(IRESID) = VALUE(NDISTR)
CHECK v.3.6.6-->
                  ELSE IF (IRESID.EQ.MXRES) THEN
                      PRINT*, "*** Warning. Maximum number of residues",
     -                    " exceeded: ", MXRES
                  ENDIF
CHECK v.3.6.6<--
CHECK v.3.5.1<--
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

      GO TO 999
 
C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Unable to open .sdh file'
      GO TO 990
 
 904  CONTINUE
      PRINT*, '*** ERROR. Error reading .sdh file at line:', LINE + 1
      GO TO 990
 
CHECK v.3.0.1-->
C 906  CONTINUE
C      PRINT*, '*** ERROR. Data error in .sdh file at line:', LINE + 1
C      PRINT*, IREC
C      GO TO 990
CHECK v.3.0.1<--
 
990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.1-->
C**************************************************************************
C
C  SUBROUTINE GETRSA  -  Check whether .rsa file exists and, if so, read
C                        through the residue accessibilities
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE GETRSA

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   INCHN
      CHARACTER*120 IREC
      INTEGER       LINE, NVAL
      REAL          VALUE

C---- Initialise variables
      ACCESS = .FALSE.
      LINE = 0
      NVAL = 0

C---- Open the file, <filename>.rsa
      OPEN(UNIT=13, FILE=FILRSA, STATUS='OLD', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    READONLY,
     -    ERR=999)

C---- Read through the file
 100  CONTINUE
          READ(13,120,END=500,ERR=900) IREC
 120      FORMAT(A)
          LINE = LINE + 1

C----     Process only if it is an ATOM record
CHECK v.3.3.2-->
C          IF (IREC(1:4).EQ.'ATOM') THEN
          IF (IREC(1:3).EQ.'RES') THEN
CHECK v.3.3.2<--

C----         Read in the percentage residue accessibility
              READ(IREC,180,ERR=900) INCHN, VALUE
CHECK v.3.3.2-->
C 180          FORMAT(5X,A1,18X,F5.0)
 180          FORMAT(8X,A1,14X,F5.0)
CHECK v.3.3.2<--

C----         Only process this residue if it belongs to the required
C             chain
              IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN
                  NVAL = NVAL + 1
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

C---- If have come across any valid residue-accessibility records, then
C     set the accessibility-flag to TRUE
      IF (NVAL.GT.0) ACCESS = .TRUE.

      GO TO 999
 
C---- Errors
 900  CONTINUE
      PRINT*, '*** WARNING. Error reading .rsa file at line:', LINE + 1
      PRINT*, '***          Estimated accessibilities will be used'
      GO TO 999
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.1<--
C**************************************************************************
C
C  SUBROUTINE STDEVS  -   Second pass through data file(s), calculating
C                         standard deviations
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE STDEVS

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   INCHN, SECSTR
      CHARACTER*3   RESDUE
      CHARACTER*5   SEQNO
      INTEGER       LINE, SERNO
      REAL          CGAMB, CHI1, CHI2, CHI3, CHI4, DIHANG, DISULF, ENHB,
     -              OMEGA, PHI, PSI


C---- Rewind the residue-information file
      REWIND(1)

C---- Initialise variables
      LINE = 0
      NCHICH = 0

C---- Read through the residues file
 100  CONTINUE
          READ(1,110,END=500,ERR=902) SERNO, RESDUE, INCHN, SEQNO,
     -        SECSTR, PHI, PSI, OMEGA, CHI1, CHI2, CHI3, CHI4, ENHB,
     -        DISULF, DIHANG, CGAMB
 110      FORMAT(I4,A3,1X,A1,A5,A1,11F7.2)
          LINE = LINE + 1

C----     Only process this residue if it belongs to the required chain
          IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN

C----         Accumulate figures for calculation of standard deviations

C----         Chi-1 torsion angle
              IF (RESDUE.EQ.'PRO') CHI1 = 999.9
              IF (CHI1.LT.0.0) CHI1 = CHI1 + 360.0
              IF (CHI1.EQ.360.0) CHI1 = 0.0
              IF (CHI1.GE.0.0 .AND. CHI1.LT.360.0) THEN

C----             Chi-1 gauche minus
                  IF (CHI1.GE.0.0 .AND. CHI1.LT.120.0) THEN
                      GMISTD = GMISTD + (CHI1 - GMIMEA)
     -                    * (CHI1 - GMIMEA)

C----             Chi-1 trans
                  ELSE IF (CHI1.GE.120.0 .AND. CHI1.LT.240.0) THEN
                      GTRSTD = GTRSTD + (CHI1 - GTRMEA)
     -                    * (CHI1 - GTRMEA)

C----             Chi-1 gauche plus
                  ELSE IF (CHI1.GE.240.0 .AND. CHI1.LT.360.0) THEN
                      GPLSTD = GPLSTD + (CHI1 - GPLMEA)
     -                    * (CHI1 - GPLMEA)
                  ENDIF
              ENDIF

C----         Chi-2 trans torsion angle
              IF (CHI2.LE.0.0) CHI2 = CHI2 + 360.0
              IF (RESDUE.NE.'PHE' .AND. RESDUE.NE.'TYR' .AND.
     -            RESDUE.NE.'TRP' .AND. RESDUE.NE.'HIS' .AND.
     -            RESDUE.NE.'ASP' .AND. RESDUE.NE.'ASN') THEN
                  IF (CHI2.GT.120.0 .AND. CHI2.LE.240.0) THEN
                      CH2STD = CH2STD + (CHI2 - CH2MEA)
     -                    * (CHI2 - CH2MEA)
                  ENDIF
              ENDIF

C----         Proline phi
              IF (RESDUE.EQ.'PRO' .AND. PHI.NE.999.9) THEN
                  PPSTD = PPSTD + (PHI - PPMEAN) * (PHI - PPMEAN)
              ENDIF

C----         Phi helix
              IF (SECSTR.EQ.'H' .AND. PHI.NE.999.9) THEN
                  PHSTD = PHSTD + (PHI - PHMEAN) * (PHI - PHMEAN)
              ENDIF

C----         Helix psi
              IF (SECSTR.EQ.'H' .AND. PSI.NE.999.9) THEN
                  HPSTD = HPSTD + (PSI - HPMEAN) * (PSI - HPMEAN)
              ENDIF

C----         Chi-3 right-hand
              IF (RESDUE.EQ.'CYS' .AND. CHI3.GT.0.0 .AND.
     -            CHI3.LE.180.0) THEN
                  C3RSTD = C3RSTD + (CHI3 - C3RMEA) * (CHI3 - C3RMEA)
              ENDIF

C----         Chi-3 left-hand
              IF (RESDUE.EQ.'CYS' .AND. CHI3.LE.0.0 .AND.
     -            CHI3.GE.-180.0) THEN
                  C3LSTD = C3LSTD + (CHI3 - C3LMEA) * (CHI3 - C3LMEA)
              ENDIF

C----         Disulphide bond
              IF (RESDUE.EQ.'CYS') THEN
                  IF (DISULF.NE.0.0) THEN
                     SSSTD = SSSTD + (DISULF - SSMEAN)
     -                   * (DISULF - SSMEAN)
                  ENDIF
              ENDIF

C----         Omega torsion angle
              IF (ABS(OMEGA).GE.45.0 .AND. OMEGA.NE.999.9) THEN
                  IF (OMEGA.LE.0.0) OMEGA = OMEGA + 360.0
                  OMSTD = OMSTD + (OMEGA - OMMEAN) * (OMEGA - OMMEAN)
              ENDIF

C----         Hydrogen bond energy
              IF (ENHB.LT.0.0) THEN
                  HBSTD = HBSTD + (ENHB - HBMEAN) * (ENHB - HBMEAN)
              ENDIF

C----         Alpha-carbon tetrahedral chirality
              IF (DIHANG.LE.360.0) THEN
                  ACSTD = ACSTD + (DIHANG - ACMEAN) * (DIHANG - ACMEAN)
              ENDIF

C----         Plot this point on the Chi-1 vs Chi-2 plot
              IF (CHI1.NE.999.9 .AND. CHI2.NE.999.9) THEN
                  NCHICH = NCHICH + 1
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

      GO TO 999
 
C---- Fatal errors
902   CONTINUE
      PRINT*, '*** ERROR. Data error in .rin file at line:', LINE + 1
      GO TO 990
 
990   CONTINUE
      IFAIL = .TRUE.

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE SCALCS  -  Calculate standard deviations
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE SCALCS

      INCLUDE 'pplot.inc'
 
C---- Calculate means and standard deviations

C---- Chi-1 torsion angle (gauche minus)
      IF (NGMINU.GT.1) THEN
          GMISTD = SQRT(GMISTD / (NGMINU - 1))
      ELSE
          GMISTD =0.0
      ENDIF

C---- Chi-1 torsion angle (trans)
      IF (NGTRAN.GT.1) THEN
          GTRSTD = SQRT(GTRSTD / (NGTRAN - 1))
      ELSE
          GTRSTD =0.0
      ENDIF

C---- Chi-1 torsion angle (gauche plus)
      IF (NGPLUS.GT.1) THEN
          GPLSTD = SQRT(GPLSTD / (NGPLUS - 1))
      ELSE
          GPLSTD =0.0
      ENDIF

C---- Chi-2 trans torsion angle
      IF (NCHI2.GT.1) THEN
          CH2STD = SQRT(CH2STD / (NCHI2 - 1))
      ELSE
          CH2STD =0.0
      ENDIF

C---- Proline phi torsion angle
      IF (NPROPH.GT.1) THEN
          PPSTD = SQRT(PPSTD / (NPROPH - 1))
      ENDIF

C---- Phi torsion angle in helices
      IF (NPHIHX.GT.1) THEN
          PHSTD = SQRT(PHSTD / (NPHIHX - 1))
      ENDIF

C---- Helix psi torsion angle
      IF (NHXPSI.GT.1) THEN
          HPSTD = SQRT(HPSTD / (NHXPSI - 1))
      ENDIF

C---- Chi-3 torsion angle, right-handed
      IF (NCHI3R.GT.1) THEN
          C3RSTD = SQRT(C3RSTD / (NCHI3R - 1))
      ENDIF

C---- Chi-3 torsion angle, left-handed
      IF (NCHI3L.GT.1) THEN
          C3LSTD = SQRT(C3LSTD / (NCHI3L - 1))
      ENDIF

C---- Disulphide bond
      IF (NDISUL.GT.1) THEN
          SSSTD = SQRT(SSSTD / (NDISUL - 1))
      ENDIF

C---- Omega torsion angle
      IF (NOMEGA.GT.1) THEN
          OMSTD = SQRT(OMSTD / (NOMEGA - 1))
      ENDIF

C---- Hydrogen bond energy
      IF (NHBOND.GT.1) THEN
          HBSTD = SQRT(HBSTD / (NHBOND - 1))
      ELSE
          HBSTD =0.0
      ENDIF

C---- Alpha carbon chirality
      IF (NALPHC.GT.1) THEN
          ACSTD = SQRT(ACSTD / (NALPHC - 1))
      ENDIF

C---- Store the values used in the stereochemical quality plots
      SVALUE(1) = COREPC
      SVALUE(2) = OMSTD
      SVALUE(3) = BADCOP
      SVALUE(4) = ACSTD
      SVALUE(5) = HBSTD
      SVALUE(6) = SFACT
      SVALUE(7) = GMISTD
      SVALUE(8) = GTRSTD
      SVALUE(9) = GPLSTD
      SVALUE(10) = POOSTD
      SVALUE(11) = CH2STD
      NVALUE(1) = NONPG
      NVALUE(2) = NOMEGA
      NVALUE(3) = NBAD
      NVALUE(4) = NALPHC
      NVALUE(5) = NHBOND
      NVALUE(6) = NRESID
      NVALUE(7) = NGMINU
      NVALUE(8) = NGTRAN
      NVALUE(9) = NGPLUS
      NVALUE(10) = NGMINU + NGTRAN + NGPLUS
      NVALUE(11) = NCHI2


      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE QUALIT  -  Perform all the quality-assessment plots
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE QUALIT

      INCLUDE 'pplot.inc'

CHECK v.3.2-->
      CHARACTER*1   CNUMB
      CHARACTER*9   PLHAND
CHECK v.3.2<--
      CHARACTER*21  GTITLE(2)
      CHARACTER*30  DE(NQUALP)
CHECK v.3.1-->
      CHARACTER*30  PLDESC
CHECK v.3.1<--
      CHARACTER*50  GSTIT(NQUALP), YAXIS(NQUALP)
CHECK v.3.2-->
      CHARACTER*60  PTITLE
      CHARACTER*79   BLNKLN, SUMLIN
CHECK v.3.2<--
CHECK v.3.2-->
C      INTEGER       IGRAPH, INTRLY(NQUALP), IQUALP, ISET, NGRAPH,
C     -              JGRAPH, NGAPY(NQUALP), TITLEN(NQUALP), YLEN(NQUALP)
      INTEGER       IGRAPH, INTRLY(NQUALP), IQUALP, ISET, JGRAPH,
     -              NBETTE, NGRAPH, NINSID, NGAPY(NQUALP), NWORSE,
     -              TITLEN(NQUALP), YLEN(NQUALP)
CHECK v.3.2<--
      REAL          CO(3,NQUALP), SCALEX, TSIZE, X, XCENTR, XL, XR, Y,
     -              YB(NQUALP), YL, YLOWER(NQUALP), YR, YUPPER(NQUALP)

CHECK v.3.2-->
      DATA BLNKLN( 1:40) / ' |                                      ' /
      DATA BLNKLN(41:79) / '                                      |'  /
CHECK v.3.2<--

      DATA  CO     / 84.2, 11.2, -5.7,
     -                6.0,  0.0,  0.0,
     -               10.4,-15.7,  6.3,
     -               3.12,  0.0,  0.0,
     -               0.35,  0.23, 0.0,
     -               0.43, -0.41, 0.0,
     -              -0.14,  9.13, 0.0,
     -               4.23,  7.39, 0.0,
     -               2.49,  7.52, 0.0,
     -               2.85,  7.66, 0.0,
     -                9.6,  5.4,  0.0 /

      DATA DE     / 'a. %-tage residues in A, B, L ',
     -              'b. Omega angle st dev         ',
     -              'c. Bad contacts / 100 residues',
     -              'd. Zeta angle st dev          ',
     -              'e. H-bond energy st dev       ',
     -              'f. Overall G-factor           ',
     -              'a. Chi-1 gauche minus st dev  ',
     -              'b. Chi-1 trans st dev         ',
     -              'c. Chi-1 gauche plus st dev   ',
     -              'd. Chi-1 pooled st dev        ',
     -              'e. Chi-2 trans st dev         ' /

      DATA GSTIT  / 'a. Ramachandran plot quality assessment         ',
     -              'b. Peptide bond planarity - omega angle sd      ',
     -              'c. Measure of bad non-bonded interactions       ',
     -              'd. Alpha carbon tetrahedral distortion          ',
     -              'e. Hydrogen bond energies                       ',
     -              'f. Overall G-factor                             ',
     -              'a. Chi-1 gauche minus                           ',
     -              'b. Chi-1 trans                                  ',
     -              'c. Chi-1 gauche plus                            ',
     -              'd. Chi-1 pooled standard deviations             ',
     -              'e. Standard deviation of Chi-2 trans angle      '/

      DATA GTITLE / 'Main-chain parameters', 'Side-chain parameters' /

      DATA NGAPY  /     5,    5,    7,    8,   4,    7,    5,    5,
     -                  5,    5,    5 /

      DATA INTRLY /     0,    0,    0,    1,   1,    1,    0,    0,
     -                  0,    0,    0 /

      DATA TITLEN /    39,   42,   41,   38,  25,   19,   21,   14,
     -                 20,   34,   42 /

      DATA  YAXIS / '%-tage of residues in most favoured regions     ',
     -              'Standard deviation (degrees)                    ',
     -              'Bad contacts per 100 residues                   ',
     -              'Zeta angle standard dev. (degrees)              ',
     -              'Standard deviation (kcal/mol)                   ',
     -              'G-factor                                        ',
     -              'Standard deviation (degrees)                    ',
     -              'Standard deviation (degrees)                    ',
     -              'Standard deviation (degrees)                    ',
     -              'Standard deviation (degrees)                    ',
     -              'Standard deviation (degrees)                    '/

      DATA YB     /  10.0,  3.0, 10.0,  1.6, 0.2,  0.3,  6.5,  5.3,
     -                4.9,  4.85, 5.0 /

      DATA YLEN   /    43,   28,   29,   34,  29,    8,   28,   28,
     -                 28,   28,   28 /

      DATA YLOWER /   0.0,  0.0,  0.0,  0.0, 0.0, -2.5,  0.0,  0.0, 
     -                0.0,  0.0,  0.0 /

      DATA YUPPER / 100.0, 25.0, 70.0, 20.0, 2.0,  1.0, 50.0, 50.0,
     -               50.0, 50.0, 50.0 /


C---- Initialise variables
      DO 20, IQUALP = 1, NQUALP
          COEFF(1,IQUALP) = CO(1,IQUALP)
          COEFF(2,IQUALP) = CO(2,IQUALP)
          COEFF(3,IQUALP) = CO(3,IQUALP)
          DESC(IQUALP) = DE(IQUALP)
          YBAND(IQUALP) = YB(IQUALP)
 20   CONTINUE

C---- Loop through the two graphs: Main-chain and Side-chain properties
      DO 1000, ISET = 1, 2
          PLTYPE = ISET

CHECK v.3.2-->
C----     Initialise counts of points in the different regions
          NBETTE = 0
          NINSID = 0
          NWORSE = 0
CHECK v.3.2<--
          IF ((ISET.EQ.1 .AND. PLOTQ1) .OR.
     -        (ISET.EQ.2 .AND. PLOTQ2)) THEN

C----         Open new PostScript file
CHECK v.3.1-->
C              CALL PSNAME(FILPS,ILEN,IPLOT)
              IF (ISET.EQ.1) THEN
                  PLDESC = 'Main-chain parameters'
CHECK v.3.2-->
                  PLHAND = 'mainchpar'
CHECK v.3.2<--
              ELSE
                  PLDESC = 'Side-chain parameters'
CHECK v.3.2-->
                  PLHAND = 'sidechpar'
CHECK v.3.2<--
              ENDIF
CHECK v.3.2-->
C              CALL PSNAME(FILPS,ILEN,IPLOT,PLDESC)
              PTITLE = PLDESC
              CALL PSNAME(FILPS,ILEN,IPLOT,PLDESC,PLHAND,WITHAN)
CHECK v.3.2<--
CHECK v.3.1<--
CHECK v.3.2-->
C              CALL PSOPEN(FILPS,BBOXX1,BBOXX2,BBOXY1,BBOXY2,MXCOLR,
C     -            RGB,INCOLR(PLTYPE),COLPLT(PLTYPE,1))
CHECK v.3.4-->
C              CALL PSOPEN(FILPS,MXCOLR,RGB,INCOLR(PLTYPE),PTITLE,1)
              CALL PSOPEN(FILPS,MXCOLR,RGB,NCOLOR,INCOLR(PLTYPE),PTITLE,
     -            1)
CHECK v.3.4<--
              CALL PSPAGE(FILPS,BBOXX1,BBOXX2,BBOXY1,BBOXY2,MXCOLR,
CHECK v.3.4-->
C     -            RGB,INCOLR(PLTYPE),COLPLT(PLTYPE,1),1,PLABEL)
     -            RGB,INCOLR(PLTYPE),COLPLT(PLTYPE,1),1,PLABEL,.FALSE.)
CHECK v.3.4<--
CHECK v.3.2<--

C----         Initialise variables
              NGRAPH = (ISET - 1) * 6
              XCENTR = XORIGN + XMWID + XSEP / 2.0
              YL = YORIGN + 3.0 * YMWID + 2.0 * YSEP
              SCALEX = XMWID / (REND - RSTART)
              CALL PSLWID(0.1)

CHECK v.3.2-->
C----         Print program name in top left-hand corner
              CALL PSTEXT(BBOXX1 + 15.0,BBOXY2 - 10.0,10.0,
     -            'PROCHECK')
CHECK v.3.2<--

C----         Main graph heading
              CALL PSCTXT(XCENTR,YL + 56.0,30.0,GTITLE(ISET))
              CALL PSCTXT(XCENTR,YL + 26.0,25.0,BRCODE(1:BLEN))

C----         Plot the axes
              DO 200, IGRAPH = 1, 3
                  YL = YORIGN + (3 - IGRAPH) * (YMWID + YSEP)
                  YR = YL + YMWID
                  DO 100, JGRAPH = 1, 2
                      NGRAPH = NGRAPH + 1
                      XL = XORIGN + (JGRAPH - 1) * (XMWID + XSEP)
                      XR = XL + XMWID

C----                 If one of the graphs, then do the plot
                      IF (NGRAPH.LE.NQUALP) THEN

C----                     Write out background shade for the plot
                          CALL PSLWID(0.1)
                          IF (BSHADE(PLTYPE)) THEN
                              CALL PSHADE(0.95,COLPLT(PLTYPE,2),RGB,
     -                            MXCOLR,INCOLR(PLTYPE))
                              CALL PSUBOX(XL,YL,XL,YR,XR,YR,XR,YL)
                          ENDIF

C----                     Adjust upper y-bound if point off end of scale
 50                       CONTINUE
                          IF (SVALUE(NGRAPH).GT.YUPPER(NGRAPH)) THEN
                              YUPPER(NGRAPH) = 2.0 * YUPPER(NGRAPH)
                              GO TO 50
                          ENDIF

C----                     Draw axes
                          CALL AXES(XL,XR,YL,YR,NGAPX,NGAPY(NGRAPH),
     -                        RSTART,REND,YLOWER(NGRAPH),YUPPER(NGRAPH),
     -                        10.0,1,INTRLY(NGRAPH),15.0,.TRUE.,.TRUE.,
     -                        .FALSE.,.FALSE.,.FALSE.)
C----                     Graph heading and x-axis title
                          CALL PSCTXT((XL + XR) / 2.0,YL + YMWID + 8.0,
     -                        10.0,GSTIT(NGRAPH)(1:TITLEN(NGRAPH)))
                          CALL PSCTXT((XL + XR) / 2.0,YL - 16.0,10.0,
     -                        'Resolution (Angstroms)')

C----                     y-axis title
                          CALL PSRCTX(XL - 30.0,(YL + YR) / 2.0,10.0,
     -                        YAXIS(NGRAPH)(1:YLEN(NGRAPH)))

C----                     Draw the shaded band representing acceptable values
                          CALL CURSHD(0.0,COEFF(3,NGRAPH),
     -                        COEFF(2,NGRAPH),COEFF(1,NGRAPH),
     -                        YLOWER(NGRAPH),YUPPER(NGRAPH),
     -                        YBAND(NGRAPH),XL,XR,YL,YR,RSTART,
     -                        REND,RGAP,INCOLR(PLTYPE),
     -                        MXCOLR,RGB,COLPLT(PLTYPE,3))

C----                     Redraw the box around the graph
                          CALL PSLINE(XL,YL,XL,YR)
                          CALL PSLINE(XL,YR,XR,YR)
                          CALL PSLINE(XR,YR,XR,YL)
                          CALL PSLINE(XR,YL,XL,YL)

C----                     Plot the point corresponding to the current structure
                          X = XL + SCALEX * (RESOL - RSTART)
                          Y = YL + (YR - YL)
     -                        * (SVALUE(NGRAPH) - YLOWER(NGRAPH))
     -                        / (YUPPER(NGRAPH) - YLOWER(NGRAPH))
CHECK v.3.4.4-->
                          CALL PSHADE(0.0,1,RGB,MXCOLR,.FALSE.)
CHECK v.3.4.4<--
                          CALL PSMARK(X,Y,1,HWIDX,HWIDY)

C----                 Otherwise, if box on bottom right, draw it
                      ELSE
                          CALL PSLWID(0.6)
                          CALL PSHADE(1.0,1,RGB,MXCOLR,.FALSE.)
                          CALL PSBBOX(XL,YL,XL,YR,XR,YR,XR,YL)
                          TSIZE = 25.0
                          IF (ILEN.GT.10) TSIZE = TSIZE * 10.0 / ILEN
                          CALL PSCTXT((XL + XR) / 2.0,(YL + YR) / 2.0,
     -                        TSIZE,BRCODE(1:BLEN))
                      ENDIF
 100              CONTINUE
 200          CONTINUE

C----         Print the statistics at the bottom of the page
CHECK v.3.2-->
C              CALL QSTAT(ISET)
              CALL QSTAT(ISET,NBETTE,NWORSE)
CHECK v.3.2<--

C----         Close the PostScript file
CHECK v.3.2-->
              CALL PSENDP
CHECK v.3.2<--
              CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,BBOXY2)
          ENDIF

CHECK v.3.2-->
C----     Write out the quality statistics to the .sum summary file

C----     Blank out the output line
          SUMLIN = BLNKLN

C----     Set up line label according to which quality plots have just
C         been done
          IF (ISET.EQ.1) THEN
              SUMLIN(4:21) = 'Main-chain params:'
          ELSE
              SUMLIN(4:21) = 'Side-chain params:'
          ENDIF

C----     Show the number of properties that score better than expected
          WRITE(CNUMB,620) NBETTE
 620      FORMAT(I1)
          SUMLIN(26:26) = CNUMB
          SUMLIN(28:33) = 'better'

C----     Show the number of properties that score as expected
          WRITE(CNUMB,620) NINSID
          SUMLIN(39:39) = CNUMB
          SUMLIN(41:46) = 'inside'

C----     Show the number of properties that score worse than expected
          WRITE(CNUMB,620) NWORSE
          SUMLIN(53:53) = CNUMB
          SUMLIN(55:59) = 'worse'

C----     Determine whether to highlight the line with a + or a *
          IF (NWORSE.GT.0) THEN
              SUMLIN(1:1) = '+'
          ENDIF
          IF (NWORSE.GT.3) THEN
              SUMLIN(1:1) = '*'
          ENDIF

C----     Write the line out to the summary file
          WRITE(14,660) SUMLIN
 660      FORMAT(A)
CHECK v.3.2<--

 1000 CONTINUE

CHECK v.3.2-->
C---- Write out blank line to summary file after chi1-ch2 line
      WRITE(14,660) BLNKLN
CHECK v.3.2<--

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE CURSHD  -  Shade in the 'expected' regions with resolution
C                        for the main-chain and side-chain plots
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE CURSHD(A3,A2,A1,C,VMIN,VMAX,VDIFF,XPOS1,XPOS2,YPOS1,
     -    YPOS2,RSTART,REND,RGAP,INCOLR,MXCOLR,RGB,COLOUR)

      INTEGER       COLOUR, CURRNT, IRESOL, LAST, MXCOLR, NRESOL
      LOGICAL       INCOLR
      REAL          A1, A2, A3, C, REND, RESOL, RGAP, RGB(3,MXCOLR),
     -              RSTART, VBOT, VDIFF, VMAX, VMID, VMIN, VTOP, X(2),
     -              XPOS1, XPOS2, XSCALE, YBOT(2), YMID(2), YPOS1,
     -              YPOS2, YTOP(2), YSCALE

C---- Determine the number of resolution steps required, and initialise
      NRESOL = (REND - RSTART) / RGAP + 1
      RESOL = RSTART
      CURRNT = 1
      LAST = 2
      XSCALE = (XPOS2 - XPOS1) / (REND - RSTART)
      YSCALE = (YPOS2 - YPOS1) / (VMAX - VMIN)

C---- Loop through the resolution steps
      DO 200, IRESOL = 1, NRESOL

C----     Calculate current x-value in PostScript coordinates
          X(CURRNT) = XPOS1 + XSCALE * (RESOL - RSTART)

C----     Calculate the three y-values
          VMID = A3 * RESOL * RESOL * RESOL
     -        + A2 * RESOL * RESOL
     -        + A1 * RESOL + C
          VBOT = VMID - VDIFF
          VTOP = VMID + VDIFF

C----     Make sure no line is off graph
          VBOT = MAX(VMIN,VBOT)
          VMID = MAX(VMIN,VMID)
          VTOP = MAX(VMIN,VTOP)
          VBOT = MIN(VMAX,VBOT)
          VMID = MIN(VMAX,VMID)
          VTOP = MIN(VMAX,VTOP)

C----     Convert into PostScript coordinates
          YBOT(CURRNT) = YPOS1 + YSCALE * (VBOT - VMIN)
          YMID(CURRNT) = YPOS1 + YSCALE * (VMID - VMIN)
          YTOP(CURRNT) = YPOS1 + YSCALE * (VTOP - VMIN)

C----     If this is not the first point, draw shaded region and line segments
          IF (IRESOL.GT.1) THEN

C----         Draw the shaded region
              CALL PSHADE(0.5,COLOUR,RGB,MXCOLR,INCOLR)
              CALL PSUBOX(X(LAST),YBOT(LAST),X(LAST),YTOP(LAST),
     -            X(CURRNT),YTOP(CURRNT),X(CURRNT),YBOT(CURRNT))

C----         Draw the three line segments
              CALL PSLINE(X(LAST),YBOT(LAST),X(CURRNT),YBOT(CURRNT))
              CALL PSLINE(X(LAST),YMID(LAST),X(CURRNT),YMID(CURRNT))
              CALL PSLINE(X(LAST),YTOP(LAST),X(CURRNT),YTOP(CURRNT))
          ENDIF

C----     Increment resolution value and swap storage pointers
          RESOL = RESOL + RGAP
          CURRNT = 3 - CURRNT
          LAST = 3 - LAST
200   CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE QSTAT  -  Print the overall statistics on the main-chain
C                       and side-chain parameters plots
C
C----------------------------------------------------------------------+--- 

CHECK v.3.2-->
C      SUBROUTINE QSTAT(ISET)
      SUBROUTINE QSTAT(ISET,NBETTE,NWORSE)
CHECK v.3.2<--

      SAVE

      INCLUDE 'pplot.inc'

      CHARACTER*7   INOUT
      CHARACTER*100 IREC
CHECK v.3.2-->
C      INTEGER       IGRAPH, ISET, NGRAPH, TGRAPH
      INTEGER       IGRAPH, ISET, NBETTE, NGRAPH, NWORSE, TGRAPH
CHECK v.3.2<--
      LOGICAL       FIRST, REVERS
      REAL          BANDS, CMPVAL, XCENTR, XPOS1, XPOS2, XPOS3, XPOS4,
     -              XPOS5, XPOS6, XSTART, Y, YGAP

      DATA  FIRST / .TRUE. /
      DATA  XSTART, YGAP / -20.0, 9.0 /
      DATA  XPOS1, XPOS2, XPOS3, XPOS4, XPOS5, XPOS6
     -    / 135.0, 177.0, 220.0, 256.0, 301.0, 323.0 /

C---- Initialise variables
      XCENTR = XORIGN + XMWID + XSEP / 2.0
      IF (FIRST) THEN
          XSTART = XORIGN + XSTART
          XPOS1 = XORIGN + XPOS1
          XPOS2 = XORIGN + XPOS2
          XPOS3 = XORIGN + XPOS3
          XPOS4 = XORIGN + XPOS4
          XPOS5 = XORIGN + XPOS5
          XPOS6 = XORIGN + XPOS6
          FIRST = .FALSE.
      ENDIF
      Y = YORIGN - 32.0

C---- Print statistics
      CALL PSCTXT(XCENTR,Y,12.0,'Plot statistics')
      Y = Y - 1.5 * YGAP

C---- Column headings
      CALL PSCTXT((XPOS3 + XPOS4) / 2.0,Y,9.0,'Comparison values')
      CALL PSCTXT(XPOS5,Y,9.0,'No. of')
      Y = Y - YGAP
      WRITE(IREC,100)
 100  FORMAT(
     -    '                                No. of   Parameter  Typic',
     -    'al   Band    band widths          ')
      CALL QPUT(XSTART,XPOS1,XPOS2,XPOS3,XPOS4,XPOS5,XPOS6,Y,YGAP,
     -    IREC)
      WRITE(IREC,120)
 120  FORMAT(
     -    'Stereochemical parameter       data pts    value     valu',
     -    'e    width    from mean           ')
      CALL QPUT(XSTART,XPOS1,XPOS2,XPOS3,XPOS4,XPOS5,XPOS6,Y,YGAP,
     -    IREC)
      Y = Y - YGAP / 2.0
      CALL PSLWID(0.2)
      CALL PSLINE(XSTART,Y + 0.5 * YGAP,XPOS6,Y + 0.5 * YGAP)
      Y = Y - YGAP / 2.0

C---- Initialise graph start
      NGRAPH = (ISET - 1) * 6
      IF (ISET.EQ.1) THEN
          TGRAPH = 6
      ELSE
          TGRAPH = 5
      ENDIF

C---- Loop through the graphs on this plot
      DO 500, IGRAPH = 1, TGRAPH
          NGRAPH = NGRAPH + 1
          IF (NGRAPH.EQ.1 .OR. NGRAPH.EQ.6) THEN
              REVERS = .TRUE.
          ELSE
              REVERS = .FALSE.
          ENDIF
          CALL BANDIS(0.0,COEFF(3,NGRAPH),COEFF(2,NGRAPH),
     -        COEFF(1,NGRAPH),RESOL,SVALUE(NGRAPH),CMPVAL,
     -        YBAND(NGRAPH),BANDS,INOUT,REVERS)
          WRITE(IREC,220) DESC(NGRAPH), NVALUE(NGRAPH), SVALUE(NGRAPH),
     -        CMPVAL, YBAND(NGRAPH), BANDS, INOUT
 220      FORMAT(A30,I6,4X,F8.1,2X,F8.1,F8.1,3X,F8.1,4X,A)
          CALL QPUT(XSTART,XPOS1,XPOS2,XPOS3,XPOS4,XPOS5,XPOS6,Y,YGAP,
     -        IREC)

CHECK v.3.2-->
C----     Increment the appropriate count
          IF (INOUT.EQ.'BETTER') THEN
              NBETTE = NBETTE + 1
          ELSE IF (INOUT.EQ.'WORSE') THEN
              NWORSE = NWORSE + 1
          ELSE
              NBETTE = NBETTE + 1
          ENDIF
CHECK v.3.2<--
 500  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE QPUT  -  Print statistics line for stereochemical quality
C                      plot
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE QPUT(XSTART,X1,X2,X3,X4,X5,X6,Y,YGAP,IREC)

      CHARACTER*(*) IREC
      REAL          XSTART, X1, X2, X3, X4, X5, X6, Y, YGAP

C---- Print the text and numbers
      CALL PSTEXT(XSTART,Y,9.0,IREC(1:30))
      CALL PSCTXT(X1,Y,9.0,IREC(31:40))
      CALL PSCTXT(X2,Y,9.0,IREC(41:51))
      CALL PSCTXT(X3,Y,9.0,IREC(52:60))
      CALL PSCTXT(X4,Y,9.0,IREC(61:68))
      CALL PSCTXT(X5,Y,9.0,IREC(69:81))
      CALL PSTEXT(X6,Y,9.0,IREC(82:88))

C---- Increment y-value
      Y = Y - YGAP

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE PINS  -   Third pass through files to produce pins plot
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE PINS

      INCLUDE 'pplot.inc'

      CHARACTER*1   BRKCH, INCHN, CHNEND, CIS, DAMINO, LSTBRK, LSTCHN,
CHECK v.3.2-->
C     -              NXTCHN, NXTSTR, OLDCHN, PINCIS(MXPINS), SECSTR
     -              NXTCHN, NXTCIS, NXTSTR, OLDCHN, PINCIS(MXPINS),
     -              SECSTR
CHECK v.3.2<--
      CHARACTER*2   PINCHN(MXPINS), PINSST(MXPINS)
CHECK v.3.2-->
C      CHARACTER*3   PINRES(MXPINS), RESDUE
      CHARACTER*3   CISPEP, PINRES(MXPINS), RESDUE
CHECK v.3.2<--
      CHARACTER*5   PINSNO(MXPINS), SEQNO
CHECK v.3.0.1-->
C      CHARACTER*80  IREC
CHECK v.3.0.1<--
CHECK v.3.5.1-->
C      INTEGER       BGAP, COLPOS(MXCOLS), FGAP, FPIN, IDIST, IGAP, LINE,
C     -              LINEA, NGAP, NPIN, OOI1, OOI2, PINREG(MXPINS),
C     -              REGTYP, SERNO, THEPIN
      INTEGER       BGAP, COLPOS(MXCOLS), FGAP, FPIN, IDIST, IGAP,
     -              FRESID,IRESID, LINE, LINEA, NGAP, NPIN, OOI1, OOI2,
     -              PINREG(MXPINS), REGTYP, SERNO, THEPIN
CHECK v.3.5.1<--
      LOGICAL       BRKPOS(MXPINS), PAGEND, PINOPE
      REAL          CALVAL, CGAMB, CH1VAL, CHI1, CHI2, CHI3, CHI4,
     -              DIHANG, DISULF, ENHB, HBVAL, LAVVAL, LCCVAL,
CHECK v.3.2-->
C     -              LPPVAL, LSTCHX, LSTCHY, MCBVAL, MXDEVR, OMEGA,
C     -              OMEVAL, PHI, PINACC(MXPINS), PINDAT(MXPINS,3),
C     -              PINDEV(MXPINS), PINSCO(NDISTR,MXPINS), PSI, SCBVAL,
CCHECK v.3.1-->
CC     -              SCORE(NDISTR), VALUE(MXPLOT)
C     -              SCORE(NDISTR), VALACC, VALUE(MXPLOT)
CCHECK v.3.1<--
     -              LPPVAL, LSTCHX, LSTCHY, MCBSTD, MCBVAL, MXDEVR,
     -              OMEGA, OMEVAL, PHI, PINACC(MXPINS),
     -              PINDAT(MXPINS,3), PINDEV(MXPINS),
     -              PINSCO(NDISTR,MXPINS), PSI, SCBSTD, SCBVAL,
     -              SCORE(NDISTR), VALACC, VALUE(MXPLOT)
CHECK v.3.2<--

      DATA COLPOS /  18,  27,  33,  39,  45,  51,  57,  63,  70,  78,
     -               85,  93, 100, 109, 116 /

      DATA BGAP, FGAP / 2, 10 /

C---- Initialise variables
      NBADPR = 0
CHECK v.3.2-->
      NXTCIS = ' '
CHECK v.3.2<--
      DO 50, NPIN = 1, MXPINS
          PINACC(NPIN) = 0.0
          PINCIS(NPIN) = ' '
          PINDAT(NPIN,1) = 0.0
          PINDAT(NPIN,2) = 0.0
          PINDAT(NPIN,3) = 0.0
          PINDEV(NPIN) = 0.0
          PINRES(NPIN) = ' '
          PINSST(NPIN) = '='
          PINREG(NPIN) = 0
          PINCHN(NPIN) = ' '
          DO 10, IDIST = 1, NDISTR
              PINSCO(IDIST,NPIN) = 999.99
 10       CONTINUE
          PINSNO(NPIN) = ' '
 50   CONTINUE
      PINOPE = .FALSE.
      PLTYPE = 3

C---- Open asterisks print file, and write headers
      CALL ASTOPE
      IF (IFAIL) GO TO 999

C---- Rewind the residue-information file (.rin), the .sdh file and,
C     if it exists, the .rsa file
      REWIND(1)
      REWIND(3)
CHECK v.3.1-->
      IF (ACCESS) REWIND(13)
CHECK v.3.1<--

C---- Initialise variables
      FPIN = 0
CHECK v.3.5.1-->
      FRESID = 0
      IRESID = 0
CHECK v.3.5.1<--
      LINE = 0
      LINEA = 0
      NPIN = 0
      THEPIN = MXPINS
      IF (NRESID.LT.MXPINS .AND. NRESID.GT.2) THEPIN = NRESID
      THEPIN = MXPINS
      NPLOTS = NPLOTS + NRESID / MXPINS

C---- Read in the first record from the residue-information file
      READ(1,80,END=500,ERR=902) SERNO, RESDUE, BRKCH, INCHN, SEQNO,
     -    SECSTR, PHI, PSI, OMEGA, CHI1, CHI2, CHI3, CHI4, ENHB,
CHECK v.3.2-->
C     -    DISULF, DIHANG, CGAMB, MCBVAL, SCBVAL, OOI1, OOI2
C 80   FORMAT(I4,A3,A1,A1,A5,A1,11F7.2,2F7.3,2I3)
     -    DISULF, DIHANG, CGAMB, MCBVAL, SCBVAL, OOI1, OOI2, MCBSTD,
     -    SCBSTD
 80   FORMAT(I4,A3,A1,A1,A5,A1,11F7.2,2F7.3,2I3,2F7.3)
CHECK v.3.2<--
      LINE = LINE + 1
      CHNEND = '>'
      LSTBRK = BRKCH
      LSTCHN = ' '
      NXTCHN = INCHN
      NXTSTR = SECSTR
      OLDCHN = ' '

C---- Read in the corresponding record from the .sdh file
      CALL REASDH(SERNO,LAVVAL,LCCVAL,LPPVAL,SCORE)

CHECK v.3.1-->
C---- If using the calculated accessibilities, read in the corresponding
C     record from the .rsa file
      IF (ACCESS) THEN
          CALL REARSA(INCHN,SEQNO,RESDUE,VALACC)
      ENDIF
CHECK v.3.1<--

C---- Read through the residues file (.rin)
 100  CONTINUE

C----     Only process this residue if it belongs to the required chain
          IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN

CHECK v.3.5.1-->
C----         Increment residue count
              IRESID = IRESID + 1
              IF (FRESID.EQ.0) FRESID = IRESID
CHECK v.3.5.1<--

C----         Calculate absolute deviations of values that might be required
C             for Residues plot

C----         Chi-1 (excl. PRO)
              IF (CHI1.LT.0.0) CHI1 = CHI1 + 360.0
              IF (RESDUE.EQ.'PRO') CHI1 = 999.9
              IF (CHI1.GE.0.0 .AND. CHI1.LE.120.0) THEN
                  CH1VAL = ABS(CHI1 - GLOBGM)
              ELSE IF (CHI1.GT.120.0 .AND. CHI1.LE.240.0) THEN
                  CH1VAL = ABS(CHI1 - GLOBGT)
              ELSE IF (CHI1.GT.240.0 .AND. CHI1.LE.360.0) THEN
                  CH1VAL = ABS(CHI1 - GLOBGP)
              ELSE
                  CH1VAL = 999.9
              ENDIF

C----         Case of trans peptide (ie abs(omega) > 45) 
CHECK v.3.2-->
C              CIS = ' '
              CIS = NXTCIS
              CISPEP = ' '
              IF (CIS.EQ.'c') CISPEP = 'cis'
              NXTCIS = ' '
CHECK v.3.2<--
              IF (ABS(OMEGA).GE.45.0 .AND. OMEGA.LE.180.0) THEN
                  IF (OMEGA.LT.0.0) OMEGA = OMEGA + 360.0
                  OMEVAL = ABS(OMEGA - GLOBOM)

C----         Case of cis peptide (ie abs(omega) < 45) 
              ELSE IF (ABS(OMEGA).LT.45.0) THEN
                  OMEVAL = ABS(OMEGA)
CHECK v.3.2-->
C                  CIS = 'c'
                  NXTCIS = 'c'
CHECK v.3.2<--
              ELSE
                  OMEVAL = 0.0
              ENDIF

C----         Hydrogen bond energy mean and standard deviation
              IF (ENHB.LT.0.0) THEN
                  HBVAL = ABS(ENHB - GLOBHB)
              ELSE
                  HBVAL = 0.0
              ENDIF

C----         Alpha carbon chirality
              DAMINO = ' '
              IF (DIHANG.NE.999.9) THEN
                  CALVAL = ABS(DIHANG - GLOBDH)
                  IF (DIHANG.LT.0) DAMINO = 'D'
              ELSE
                  CALVAL = 0.0
              ENDIF

C----         Store the values required for the Residues plot
              VALUE(PLTCH1) = CH1VAL
              VALUE(PLTOME) = OMEVAL
              VALUE(PLTHB) = HBVAL
              VALUE(PLTCAL) = CALVAL
              VALUE(PLTCGB) = CGAMB
              VALUE(PLTMCB) = MCBVAL
              VALUE(PLTSCB) = SCBVAL
              VALUE(PLTLPP) = LPPVAL
              VALUE(PLTLCC) = LCCVAL
              VALUE(PLTLAV) = LAVVAL
              VALUE(PLTOOI) = 100.0 * (OOIMAX - OOI2)
     -            / (OOIMAX - OOIMIN)
CHECK v.3.1-->
              VALUE(PLTACC) = VALACC
CHECK v.3.1<--
CHECK v.3.2-->
              VALUE(PLTSDM) = MCBSTD
              VALUE(PLTSDS) = SCBSTD
CHECK v.3.2<--

C----         Print current residue's data on asterisks print
              CALL ASTPRN(SERNO,RESDUE,INCHN,SEQNO,
     -            SECSTR,PHI,PSI,OMEGA,CHI1,CHI2,CHI3,ENHB,DISULF,
CHECK v.3.2-->
C     -            DIHANG,CGAMB,MXDEVR,REGTYP)
     -            DIHANG,MXDEVR,REGTYP,CISPEP)
CHECK v.3.2<--

C----         Move required values across into plot-arrays
              NPIN = NPIN + 1
              IF (PLTNUM(1).GT.0) PINDAT(NPIN,1) = VALUE(PLTNUM(1))
              IF (PLTNUM(2).GT.0) PINDAT(NPIN,2) = VALUE(PLTNUM(2))
              IF (PLTNUM(3).GT.0) PINDAT(NPIN,3) = VALUE(PLTNUM(3))
              BRKPOS(NPIN) = .FALSE.
              PINRES(NPIN) = RESDUE
CHECK v.3.1-->
C              PINACC(NPIN) = VALUE(PLTOOI)
              IF (ACCESS) THEN
                  PINACC(NPIN) = VALACC
              ELSE
                  PINACC(NPIN) = VALUE(PLTOOI)
              ENDIF
CHECK v.3.1<--
              IF (CIS.EQ.'c' .AND. DAMINO.EQ.'D') THEN
                  PINCIS(NPIN) = 'X'
              ELSE IF (CIS.EQ.'c') THEN
                  PINCIS(NPIN) = CIS
              ELSE IF (DAMINO.EQ.'D') THEN
                  PINCIS(NPIN) = DAMINO
              ENDIF
              PINSST(NPIN) = SECSTR // '='
              CHNEND = ' '
              IF (LINE.EQ.1) CHNEND = '>'
              IF (LINE.EQ.NRESID) CHNEND = '<'
              PINCHN(NPIN) = INCHN // CHNEND
              DO 200, IDIST = 1, NDISTR
                  PINSCO(IDIST,NPIN) = SCORE(IDIST)
 200          CONTINUE
              PINSNO(NPIN) = SEQNO

C----         Store maximum deviation score
              PINDEV(NPIN) = MXDEVR
              IF (RESDUE.NE.'GLY') THEN
                  PINREG(NPIN) = REGTYP
              ELSE
                  PINREG(NPIN) = 0
              ENDIF
          ENDIF

C----     Read in the next record from the residue-information file to pick
C         up chain ID and secondary structure of next residue
          OLDCHN = INCHN
          READ(1,80,END=500,ERR=902) SERNO, RESDUE, BRKCH, INCHN, SEQNO,
     -        SECSTR, PHI, PSI, OMEGA, CHI1, CHI2, CHI3, CHI4, ENHB,
CHECK v.3.2-->
C     -        DISULF, DIHANG, CGAMB, MCBVAL, SCBVAL, OOI1, OOI2
     -        DISULF, DIHANG, CGAMB, MCBVAL, SCBVAL, OOI1, OOI2, MCBSTD,
     -        SCBSTD
CHECK v.3.2<--
          LINE = LINE + 1
          NXTCHN = INCHN
          NXTSTR = SECSTR
          IF (NPIN.GT.0) PINSST(NPIN)(2:2) = NXTSTR

C----     Read in the corresponding record from .sdh
          CALL REASDH(SERNO,LAVVAL,LCCVAL,LPPVAL,SCORE)

CHECK v.3.1-->
C----     Read in the corresponding record from .rsa, if present
          IF (ACCESS) THEN
              CALL REARSA(INCHN,SEQNO,RESDUE,VALACC)
          ENDIF
CHECK v.3.1<--

C----     Determine whether at a chain-end or chain-start
          IF (NPIN.GT.0) THEN
              IF (OLDCHN.NE.NXTCHN) THEN
                  CHNEND = '<'
                  PINCHN(NPIN)(2:2) = CHNEND
              ELSE IF (OLDCHN.NE.LSTCHN) THEN
                  CHNEND = '>'
                  PINCHN(NPIN)(2:2) = CHNEND
              ELSE IF (LSTBRK.EQ.'!' .AND. BRKCH.EQ.'!') THEN
                  CHNEND = '<'
                  PINCHN(NPIN)(2:2) = CHNEND
                  CHNEND = '!'
              ELSE IF (LSTBRK.EQ.'!' .AND. BRKCH.EQ.' ') THEN
                  CHNEND = '>'
                  PINCHN(NPIN)(2:2) = CHNEND
              ENDIF
              LSTBRK = BRKCH
              LSTCHN = OLDCHN
          ENDIF

C----     If have a pageful of data, then produce the pinplot
          IF (NPIN.EQ.THEPIN) THEN
              IF (PLOTPN) THEN

C----             If current PostScript file is open, close it
                  IF (PINOPE) THEN
CHECK v.3.2-->
C                      CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,BBOXY2)
                      CALL PSENDP
                      IF (.NOT.COMBPS) THEN
                          CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,BBOXY2)
                      ENDIF
CHECK v.3.2<--
                  ENDIF

C----             Produce current page
                  CALL PINPLT(THEPIN,NPIN,FPIN,PINDAT,PINDEV,PINRES,
     -                PINSST,PINREG,PINCHN,PINSNO,BRKPOS,PINACC,
CHECK v.3.5.1-->
C     -                PINSCO,PINCIS,LSTCHX,LSTCHY)
     -                PINSCO,PINCIS,LSTCHX,LSTCHY,FRESID)
CHECK v.3.5.1<--
                  PINOPE = .TRUE.
              ENDIF
              FPIN = FPIN + THEPIN
              NPIN = 0
              CHNEND = ' '

CHECK v.3.5.1-->
C----         Reset starting residue
              FRESID = 0
CHECK v.3.5.1<--
          ENDIF

C----     Check whether this residue is the end of a chain
          IF (CHNEND.EQ.'<' .OR. CHNEND.EQ.'!') THEN

C----         Leave the appropriate number of blanks between the chains
              PAGEND = .FALSE.
              IF (CHNEND.EQ.'<') THEN
                  NGAP = FGAP
              ELSE
                  NGAP = BGAP
              ENDIF
              DO 300, IGAP = 1, NGAP

C----             Add blanks providing that haven't reached end of page
                  IF (.NOT.PAGEND) THEN
                      NPIN = NPIN + 1
                      BRKPOS(NPIN) = .TRUE.

C----                 If have a pageful of data, then produce the pinplot
                      IF (NPIN.EQ.THEPIN) THEN
                          IF (PLOTPN) THEN

C----                         If current PostScript file is open, close it
                              IF (PINOPE) THEN
CHECK v.3.2-->
C                                  CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,
C     -                                BBOXY2)
                                  CALL PSENDP
                                  IF (.NOT.COMBPS) THEN
                                      CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,
     -                                    BBOXY2)
                                  ENDIF
CHECK v.3.2<--
                              ENDIF

C----                         Produce current page
                              CALL PINPLT(THEPIN,NPIN,FPIN,PINDAT,
     -                            PINDEV,PINRES,PINSST,PINREG,PINCHN,
     -                            PINSNO,BRKPOS,PINACC,PINSCO,PINCIS,
CHECK v.3.5.1-->
C     -                            LSTCHX,LSTCHY)
     -                            LSTCHX,LSTCHY,FRESID)
CHECK v.3.5.1<--
                              PINOPE = .TRUE.
                          ENDIF
                          FPIN = FPIN + THEPIN
                          NPIN = 0
                          CHNEND = ' '
                          PAGEND = .TRUE.
                      ENDIF

CHECK v.3.5.1-->
C----                 Reset first residue position
                      FRESID = 0
CHECK v.3.5.1<--
                  ENDIF
 300          CONTINUE
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

C---- If any more data left to be printed, then produce the pinplot
      IF (PLOTPN .AND. NPIN.GT.0) THEN

C----      If current PostScript file is open, close it
           IF (PINOPE) THEN
CHECK v.3.2-->
C               CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,BBOXY2)
               CALL PSENDP
               IF (.NOT.COMBPS) THEN
                   CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,BBOXY2)
               ENDIF
CHECK v.3.2<--
           ENDIF

C----     Produce current page
          CALL PINPLT(THEPIN,NPIN,FPIN,PINDAT,PINDEV,PINRES,
     -        PINSST,PINREG,PINCHN,PINSNO,BRKPOS,PINACC,PINSCO,PINCIS,
CHECK v.3.5.1-->
C     -        LSTCHX,LSTCHY)
     -        LSTCHX,LSTCHY,FRESID)
CHECK v.3.5.1<--
          PINOPE = .TRUE.
      ENDIF

C---- Plot the overall G-factors for the protein as a whole on the
C     PROCHECKer board
      IF (PLOTPN) THEN
CHECK v.3.2-->
C          CALL PINGFS(LSTCHX,XGAP,LSTCHY,YHT,GFACTR,NDISTR,INCOLR,
          CALL PINGFS(LSTCHX,XGAP,LSTCHY,YHT,GFACTR,NDISTR,
     -        INCOLR(PLTYPE),
CHECK v.3.2<--
     -        MXCOLR,RGB,COLPLT(PLTYPE,11),COLPLT(PLTYPE,12),
     -        NCOVAL,NDIHED)
CHECK v.3.2-->
          CALL PSENDP
CHECK v.3.2<--
          CALL PSCLOS(BBOXX1,BBOXX2,BBOXY1,BBOXY2)
      ENDIF

C---- Print totals for asterisks print
CHECK v.3.2-->
C      CALL ASTEND(MXCOLS,COLPOS)
      CALL ASTEND(MXCOLS,COLPOS,1)
CHECK v.3.2<--

C---- Print mean values for each parameter on asterisks print
      CALL ASTMEA

C---- Print the key and statistical data
      CALL ASTKEY

C---- List the bond lengths and angles
      CALL ASTLAN

C---- List the bad contacts, if required
      IF (BCLIST .AND. NONBON) THEN
          CALL ASTBAD
      ENDIF

C---- Print statistics from the plots
      CALL ASTATS

CHECK v.3.3.2-->
C---- Print statistics to the html file
CHECK v.3.4.3-->
      IF (WWWOUT) THEN
CHECK v.3.4.3<--
          CALL HSTATS
CHECK v.3.4.3-->
      ENDIF
CHECK v.3.4.3<--
CHECK v.3.3.2<--

C---- Print the Morris et al. classification of the structure
      CALL MCLASS

C---- Print the G-factors for the protein
      CALL GFACTS

CHECK v.3.3.2-->
C---- Write the G-factors out to the html file
CHECK v.3.4.3-->
      IF (WWWOUT) THEN
CHECK v.3.4.3<--
          CALL GHTML
CHECK v.3.4.3-->
      ENDIF
CHECK v.3.4.3<--
CHECK v.3.3.2<--

      GO TO 999
 
C---- Fatal errors
902   CONTINUE
      PRINT*, '*** ERROR. Data error in .rin file at line:', LINE + 1
      GO TO 990
 
CHECK v.3.0.1-->
C 904  CONTINUE
C      PRINT*, '*** ERROR. Error reading .rsa file at line:', LINEA + 1
C      GO TO 990
 
C 906  CONTINUE
C      PRINT*, '*** ERROR. Data error in .rsa file at line:', LINEA + 1
C      PRINT*, IREC
C      GO TO 990
CHECK v.3.0.1<--
 
990   CONTINUE
      IFAIL = .TRUE.

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE PINPLT  -  Print current page for pin plot
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE PINPLT(THEPIN,NPIN,FPIN,PINDAT,PINDEV,PINRES,PINSST,
     -    PINREG,PINCHN,PINSNO,BRKPOS,PINACC,PINSCO,PINCIS,LSTCHX,
CHECK v.3.5.1-->
C     -    LSTCHY)
     -    LSTCHY,FRESID)
CHECK v.3.5.1<--

      SAVE

      INCLUDE 'pplot.inc'

      REAL          DASCOY, MAXDVY, NOTEX1, NOTEX2, NOTEY1, NOTEY2,
     -              SECSTY, SEQRMY
      PARAMETER    (
     -              DASCOY = 189.0,
     -              MAXDVY = 144.0,
     -              NOTEX1 = 112.0,
CHECK v.3.1-->
C     -              NOTEX2 = 157.0,
     -              NOTEX2 = 143.0,
CHECK v.3.1<--
     -              NOTEY1 =  22.0,
     -              NOTEY2 =  30.0,
     -              SECSTY =  44.0,
     -              SEQRMY =  99.0
     -             )

      REAL          SIZLAB, TSIZE
      PARAMETER    (
     -              SIZLAB =  10.0,
     -              TSIZE  =  15.0
     -             )

      INTEGER       THEPIN

      CHARACTER*1   A, PINCIS(THEPIN), RCHAR
      CHARACTER*2   PAGENO, PINCHN(THEPIN), PINSST(THEPIN)
      CHARACTER*3   CODE(20), PINRES(THEPIN)
      CHARACTER*5   PINSNO(THEPIN), TICLAB(MXPINS)
      CHARACTER*6   ASTER
      CHARACTER*7   PAGE
CHECK v.3.2-->
      CHARACTER*9    PLHAND
CHECK v.3.2<--
      CHARACTER*11  CLABEL(NDISTR)
      CHARACTER*20  AMINO, CDUMMY
      CHARACTER*26  LOWER
CHECK v.3.2-->
C      CHARACTER*27  PLTYHD(MXPLOT)
      CHARACTER*32  PLTYHD(MXPLOT)
CHECK v.3.2<--
CHECK v.3.1-->
      CHARACTER*30  PLDESC
CHECK v.3.1<--
      CHARACTER*55  PLTHED(MXPLOT)
CHECK v.3.2-->
      CHARACTER*60   PTITLE
CHECK v.3.2<--
      CHARACTER*100 IREC
CHECK v.3.5.1-->
C      INTEGER       FPIN, ICODE, IDIST, IGRAPH, IPIN, IRGRAF, N, NPAGE,
C     -              NPIN, NSTD, PINREG(THEPIN), PLOTNO, PLTHLN(MXPLOT),
C     -              PLTYLN(MXPLOT), TICLEN(MXPINS)
      INTEGER       FPIN, FRES, FRESID, ICODE, IDIST, IGRAPH, IPIN,
     -              IRES, IRESID, IRGRAF,IWIN,  LRES, N, NPAGE, NPIN,
     -              NRESGF(MXPINS), NSTD, PINREG(THEPIN), PLOTNO,
     -              PLTHLN(MXPLOT), PLTYLN(MXPLOT), TICLEN(MXPINS),
     -              WINDOW(3)
CHECK v.3.5.1<--
CHECK v.3.2-->
C      LOGICAL       BRKPOS(MXPINS), TICPOS(MXPINS)
CHECK v.3.5.1-->
C      LOGICAL       BRKPOS(MXPINS), FIRST, TICPOS(MXPINS)
      LOGICAL       BRKPOS(MXPINS), FIRST, SMOOTH, TICPOS(MXPINS)
CHECK v.3.5.1<--
CHECK v.3.2<--
CHECK v.3.5.1-->
C      REAL          LSTCHX, LSTCHY, PINACC(THEPIN), PINDAT(THEPIN,3),
C     -              PINDEV(THEPIN), PINSCO(NDISTR,THEPIN), RDUM1, RDUM2,
C     -              SCALEX, X, XCENTR, Y, YBOT, YDIFF, YP
      REAL          AVEGF(MXPINS,3), LSTCHX, LSTCHY, PINACC(THEPIN),
     -              PINDAT(THEPIN,3), PINDEV(THEPIN), PINMIN(3),
     -              PINSCO(NDISTR,THEPIN), RDUM1, RDUM2, SCALEX, X,
     -              XCENTR, Y, YBOT, YDIFF, YP
CHECK v.3.5.1<--


      DATA  A      / 'A' /
      DATA  AMINO  / 'ACDEFGHIKLMNPQRSTVWY'/

      DATA  CLABEL /
     -               'Phi-psi',
     -               'Chi1-chi2',
     -               'Chi1 only',
     -               'Chi3 & chi4',
     -               'Omega',
     -               'Dihedrals',
     -               'MC bonds',
     -               'MC angles',
     -               'Mainchain',
     -               'Overall' /

      DATA  CODE   / 'ALA','CYS','ASP','GLU','PHE','GLY','HIS',
     -               'ILE','LYS','LEU','MET','ASN','PRO','GLN','ARG',
     -               'SER','THR','VAL','TRP','TYR' /
      DATA  LOWER  / 'abcdefghijklmnopqrstuvwxyz' /
      DATA  NPAGE  / 0 /
      DATA  PLTHED / 
     -    'x. Absolute deviation from mean Chi-1 value (excl. Pro)',
     -    'x. Absolute deviation from mean of omega torsion',
     -    'x. C-alpha chirality: abs. deviation of zeta torsion',
     -    'x. Absolute deviation from mean of H-bond energy',
     -    'x. Gamma atom B-value',
     -    'x. Average B-value of main-chain atoms',
     -    'x. Average B-value of side-chain atoms',
     -    'x. G-factor for phi-psi distribution',
     -    'x. G-factor for chi1-chi2 distribution',
     -    'x. Average residue G-factor',
CHECK v.3.1-->
C     -    'x. Approx. accessibility (based on Ooi numbers)'
     -    'x. Approx. accessibility (based on Ooi numbers)',
CHECK v.3.2-->
C     -    'x. Percentage residue accessibility'
     -    'x. Percentage residue accessibility',
     -    'x. Standard deviation of main-chain atom B-values',
     -    'x. Standard deviation of side-chain atom B-values'
CHECK v.3.2<--
CHECK v.3.1<--
     -            /

CHECK v.3.1-->
C      DATA  PLTHLN /  55, 48, 52, 48, 21, 38, 38, 36, 38, 27, 47 /
CHECK v.3.2-->
C      DATA  PLTHLN /  55, 48, 52, 48, 21, 38, 38, 36, 38, 27, 47, 35 /
      DATA  PLTHLN /  55, 48, 52, 48, 21, 38, 38, 36, 38, 27, 47, 35,
     -                49, 49 /
CHECK v.3.2<--
CHECK v.3.1<--

      DATA  PLTYHD /
     -    'Chi-1 abs. mean dev.',
     -    'Omega abs. mean dev.',
     -    'Zeta abs. mean dev.',
     -    'H-bond en. abs. mean dev.',
     -    'Gamma atom B-value',
     -    'Ave. main-chain B-value',
     -    'Ave. side-chain B-value',
     -    'G-factor',
     -    'G-factor',
     -    'G-factor',
CHECK v.3.1-->
C     -    'Estimated accessibility'
     -    'Estimated accessibility',
CHECK v.3.2-->
C     -    '%-tage residue accessibility'
     -    '%-tage residue accessibility',
     -    'B-value st. dev.',
     -    'B-value st. dev.'
CHECK v.3.2<--
CHECK v.3.1<--
     -            /

CHECK v.3.1-->
C      DATA  PLTYLN / 20, 20, 19, 25, 18, 23, 23, 8, 8, 8, 23 /
CHECK v.3.2-->
C      DATA  PLTYLN / 20, 20, 19, 25, 18, 23, 23, 8, 8, 8, 23, 28 /
      DATA  PLTYLN / 20, 20, 19, 25, 18, 23, 23, 8, 8, 8, 23, 28,
     -               16, 16 /
CHECK v.3.2<--
CHECK v.3.1<--

CHECK v.3.1-->
      DATA  PLDESC / 'Residue properties plot' /
CHECK v.3.1<--
CHECK v.3.2-->
      DATA  PLHAND / 'residprop' /
      DATA  PTITLE / 'Residue properties plot' /
CHECK v.3.2<--

      DATA  RDUM1, RDUM2 / 999999.9, 999999.9 /

CHECK v.3.2-->
      DATA  FIRST  / .TRUE. /
CHECK v.3.2<--

C---- Initialise variables
      XCENTR = XPORIG + XPWID / 2.0
      YP = YPORIG + 3.0 * YPWID + 2.0 * YPSEP
      SCALEX = XPWID / THEPIN
CDEBUG
C      WINDOW(1) = 3
C      WINDOW(2) = 5
C      WINDOW(3) = 7
C      SMOOTH = .TRUE.
CDEBUG

CHECK v.3.5.1-->   ***!!! SOMETHING WRONG HERE !!!***
C---- Calculate window-averaged residue G-factors
      DO 10, IPIN = 1, MXPINS
          NRESGF(IPIN) = 0
          AVEGF(IPIN,1) = 0.0
          AVEGF(IPIN,2) = 0.0
          AVEGF(IPIN,3) = 0.0
 10   CONTINUE

C---- Loop through the residues to update window total
      IRESID = 0
      DO 20, IPIN = 1, NPIN

C----     Check for blanks
          IF (.NOT.BRKPOS(IPIN)) THEN

C----         Get first and last residues of current window
              IF (IRESID.EQ.0) THEN
                  IRESID = FRESID
              ELSE
                  IRESID = IRESID + 1
              ENDIF

C----         Loop over the three windows
              DO 18, IWIN = 1, 3
                  FRES = IRESID - WINDOW(IWIN) / 2
                  LRES = IRESID + WINDOW(IWIN) / 2
                  IF (FRES.LT.1) FRES = 1
                  IF (LRES.GT.NRESID) LRES = NRESID

C----             Loop over the window residues
                  DO 15, IRES = FRES, LRES
                      AVEGF(IPIN,IWIN) = AVEGF(IPIN,IWIN) + RESGF(IRES)
                      NRESGF(IPIN) = NRESGF(IPIN) + 1
 15               CONTINUE
 18           CONTINUE
          ENDIF
 20   CONTINUE

C---- If plotting the window-averaged G-factors, then store the data
      IF (SMOOTH) THEN
                  
C----     Initialise maximum and minimum values
          PINMIN(1) = 0.0
          PINMIN(2) = 0.0
          PINMIN(3) = 0.0
          PINMAX(1) = 0.0
          PINMAX(2) = 0.0
          PINMAX(3) = 0.0

C----     Compute average          
          DO 30, IPIN = 1, NPIN

C----         Loop over the 3 graphs
              DO 25, IGRAPH = 1, 3
                  IF (NRESGF(IPIN).GT.0) THEN
                      AVEGF(IPIN,IGRAPH)
     -                    = AVEGF(IPIN,IGRAPH) / NRESGF(IPIN)

C----                 Store over the pin data
                      PINDAT(IPIN,IGRAPH) = AVEGF(IPIN,IGRAPH)

C----                 Update max and min values
                      IF (PINDAT(IPIN,IGRAPH).GT.PINMAX(IGRAPH)) THEN
                          PINMAX(IGRAPH) = PINDAT(IPIN,IGRAPH)
                      ENDIF
                      IF (PINDAT(IPIN,IGRAPH).LT.PINMIN(IGRAPH)) THEN
                          PINMIN(IGRAPH) = PINDAT(IPIN,IGRAPH)
                      ENDIF

C----             Otherwise, store blank
                  ELSE
                      PINDAT(IPIN,IGRAPH) = 999.9
                  ENDIF
 25           CONTINUE
 30       CONTINUE

C----     Check that max and min values non-zero
          DO 35, IGRAPH = 1, 3
              IF (PINMIN(IGRAPH).EQ.0.0) PINMIN(IGRAPH) = -1.0
              IF (PINMAX(IGRAPH).EQ.0.0) PINMAX(IGRAPH) = 1.0

C----         Convert into a single value
              PINMAX(IGRAPH) = PINMAX(IGRAPH) - PINMIN(IGRAPH)
 35       CONTINUE
      ENDIF
          
CHECK v.3.5.1<--

C---- Open new PostScript file
CHECK v.3.1-->
C      CALL PSNAME(FILPS,ILEN,IPLOT)
CHECK v.3.2-->
C      CALL PSNAME(FILPS,ILEN,IPLOT,PLDESC)
C      PLDESC = ' '
CHECK v.3.2<--
CHECK v.3.1<--
CHECK v.3.2-->
C      CALL PSOPEN(FILPS,BBOXX1,BBOXX2,BBOXY1,BBOXY2,MXCOLR,
C     -    RGB,INCOLR(PLTYPE),COLPLT(PLTYPE,1))
      IF (.NOT.COMBPS .OR. FIRST) THEN
          CALL PSNAME(FILPS,ILEN,IPLOT,PLDESC,PLHAND,WITHAN)
CHECK v.3.4-->
C          CALL PSOPEN(FILPS,MXCOLR,RGB,INCOLR(PLTYPE),PTITLE,
C     -        NPAGE + 1)
          CALL PSOPEN(FILPS,MXCOLR,RGB,NCOLOR,INCOLR(PLTYPE),PTITLE,
     -        NPAGE + 1)
CHECK v.3.4<--
          FIRST = .FALSE.
          PLDESC = ' '
      ENDIF
      CALL PSPAGE(FILPS,BBOXX1,BBOXX2,BBOXY1,BBOXY2,MXCOLR,
CHECK v.3.4-->
C     -    RGB,INCOLR(PLTYPE),COLPLT(PLTYPE,1),NPAGE + 1,PLABEL)
     -    RGB,INCOLR(PLTYPE),COLPLT(PLTYPE,1),NPAGE + 1,PLABEL,.FALSE.)
CHECK v.3.4<--
CHECK v.3.2<--
      CALL PSLWID(0.1)

C---- Main graph heading
      CALL PSCTXT(XCENTR,YP + 65.0,30.0,'Residue properties')
      CALL PSCTXT(XCENTR,YP + 36.0,25.0,BRCODE(1:BLEN))

CHECK v.3.2-->
C---- Print program name in top left-hand corner
      CALL PSTEXT(BBOXX1 + 15.0,BBOXY2 - 10.0,10.0,
     -    'PROCHECK')
CHECK v.3.2<--

C---- Loop through the three graphs to be plotted
      IRGRAF = 0
      NSTD = 0
      DO 100, IGRAPH = 1, 3

C----     Determine position on page
          YP = YPORIG + (3 - IGRAPH) * (YPWID + YPSEP)
          PLOTNO = PLTNUM(IGRAPH)
          IF (PLOTNO.GT.0) THEN

CHECK v.3.2-->
C----         If this is a B-value plot and all values are very small (ie
C             < 2.0), the change heading to read U-values, rather than
C             B-values
              IF (PLOTNO.EQ.PLTCGB .OR. PLOTNO.EQ.PLTMCB .OR.
     -            PLOTNO.EQ.PLTSCB .OR. PLOTNO.EQ.PLTSDM .OR.
     -            PLOTNO.EQ.PLTSDS) THEN
                  IF (PINMAX(PLTMCB).LT.2.0) THEN
                      DO 40, N = 1, PLTHLN(PLOTNO)
                          IF (PLTHED(PLOTNO)(N:N).EQ.'B') THEN
                              PLTHED(PLOTNO)(N:N) = 'U'
                          ENDIF
 40                   CONTINUE
                      DO 80, N = 1, PLTYLN(PLOTNO)
                          IF (PLTYHD(PLOTNO)(N:N).EQ.'B') THEN
                              PLTYHD(PLOTNO)(N:N) = 'U'
                          ENDIF
 80                   CONTINUE
                  ENDIF
              ENDIF
CHECK v.3.2<--

C----         Plot the graph box and axes
              IRGRAF = IRGRAF + 1
              PLTHED(PLOTNO)(1:1) = LOWER(IRGRAF:IRGRAF)
              CALL PINGRF(XPORIG,YP,XPWID,YPWID,BSHADE(PLTYPE),
     -            PINMAX(PLOTNO),FPIN,FPIN + THEPIN,PLTHED(PLOTNO),
     -            PLTHLN(PLOTNO),PLTYHD(PLOTNO),PLTYLN(PLOTNO),
     -            INCOLR(PLTYPE),MXCOLR,RGB,COLPLT(PLTYPE,2))

C----         Print the residue numbers along the x-axis
              CALL PINRNO(XPORIG,XPORIG + XPWID,YP,PINSNO,
     -            MXPINS,NPIN,FPIN,TICPOS,TICLAB,TICLEN,SIZLAB,TSIZE)

C----         Plot the graph bars for the residues on this page
              CALL PINBOX(THEPIN,NPIN,PINDAT(1,IGRAPH),XPORIG,YP,
     -            YPWID,SCALEX,YPWID / PINMAX(PLOTNO),PLTSTD(PLOTNO),
     -            INCOLR(PLTYPE),MXCOLR,RGB,COLPLT(PLTYPE,4),
     -            COLPLT(PLTYPE,3))
              IF (PLTSTD(PLOTNO).NE.999.9) NSTD = NSTD + 1
          ENDIF

 100  CONTINUE

C---- Print number of deviations residues are highlighted by
      IF (NSTD.GT.0) THEN
          X = XPORIG + XPWID - NOTEX1
          YP = YPORIG - NOTEY1
          CALL PSTEXT(X,YP,8.0,
CHECK v.3.1-->
C     -            'Highlighted residues than are those')
     -            'Highlighted residues are those that')
CHECK v.3.1<--
          X = XPORIG + XPWID - NOTEX2
          YP = YPORIG - NOTEY2
          WRITE(IREC,120) LIMRES
CHECK v.3.1-->
C 120      FORMAT('that deviate by more than',F4.1,
C     -        ' st. devs. from ideal')
 120      FORMAT('deviate by more than',F4.1,' st. devs. from ideal')
CHECK v.3.1<--
          CALL PSTEXT(X,YP,8.0,IREC(1:50))
      ENDIF

C---- Print the "wiring diagram" showing the secondary structure, with
C     background shading giving a measure of the accessibility
      IRGRAF = IRGRAF + 1
      Y = YPORIG - SECSTY
CHECK v.3.3.2-->
C      CALL PSTEXT(XPORIG,Y,12.0,LOWER(IRGRAF:IRGRAF) //
C     -    '. Secondary structure & estimated accessibility')
      IF (ACCESS) THEN
          CALL PSTEXT(XPORIG,Y,12.0,LOWER(IRGRAF:IRGRAF) //
     -        '. Secondary structure & percentage accessibility')
      ELSE
          CALL PSTEXT(XPORIG,Y,12.0,LOWER(IRGRAF:IRGRAF) //
     -        '. Secondary structure & estimated accessibility')
      ENDIF
CHECK v.3.3.2<--
      Y = Y - 18.0
      CALL PSLWID(0.0)
      IF (SHOWAC) THEN
          CALL ACCSHD(THEPIN,NPIN,PINACC,PINSST,XPORIG,Y,SCALEX,
CHECK v.3.4-->
C     -        SSSIZE,INCOLR(PLTYPE),MXCOLR,RGB,COLPLT(PLTYPE,5),
C     -        COLPLT(PLTYPE,6))
     -        SSSIZE,INCOLR(PLTYPE),MXCOLR,RGB,COLPLT(PLTYPE,6),
     -        COLPLT(PLTYPE,5))
CHECK v.3.4<--
      ENDIF
      CALL SSPLOT(THEPIN,NPIN,PINSST,XPORIG,Y,SCALEX,NRESID,PINCHN,
     -    SHOWAC,SSSIZE,INCOLR(PLTYPE),MXCOLR,RGB,COLPLT(PLTYPE,13),
     -    COLPLT(PLTYPE,5),COLPLT(PLTYPE,6))

C---- Print the residue codes
      IRGRAF = IRGRAF + 1
      Y = YPORIG - SEQRMY
      CALL PSTEXT(XPORIG,Y,12.0,LOWER(IRGRAF:IRGRAF) //
     -    '. Sequence & Ramachandran regions')
      Y = Y - 21.0
      DO 400, IPIN = 1, NPIN
          X = XPORIG + (IPIN - 0.5) * SCALEX

C----     Find single-letter code for this residue
          ICODE = 0
          DO 300, N = 1, 20
              IF (PINRES(IPIN).EQ.CODE(N)) THEN
                  ICODE = N
                  GO TO 350
              ENDIF
 300      CONTINUE

C----     If not one of the standard 20, then print full 3-letter code
 350      CONTINUE
          IF (ICODE.EQ.0) THEN
              CALL PSCTXT(X,Y,6.0,PINRES(IPIN)(1:1))
              RCHAR = PINRES(IPIN)(2:2)
              N = ICHAR(RCHAR) - ICHAR(A) + 1
              IF (N.GE.1 .AND. N.LE.26) RCHAR = LOWER(N:N)
              CALL PSCTXT(X,Y - 6.0,6.0,RCHAR)
              RCHAR = PINRES(IPIN)(3:3)
              N = ICHAR(RCHAR) - ICHAR(A) + 1
              IF (N.GE.1 .AND. N.LE.26) RCHAR = LOWER(N:N)
              CALL PSCTXT(X,Y - 12.0,6.0,RCHAR)

C----     Otherwise, print the single-letter code
          ELSE
              RCHAR = AMINO(ICODE:ICODE)
              CALL PSCTXT(X,Y,6.0,RCHAR)
          ENDIF
 400  CONTINUE

C---- Add ticks at appropriate positions
      YDIFF = SEQRMY + 15.0
      CALL PINTIC(XPORIG,YPORIG,YDIFF,XPWID,MXPINS,NPIN,-2.0,TICPOS,
CHECK v.3.4-->
C     -    BRKPOS)
     -    BRKPOS,.FALSE.)
CHECK v.3.4<--

C---- Indicate which Ramachandran plot region all the residues are in
      Y = YPORIG - SEQRMY - 15.0
      CALL PINRAM(XPORIG,SCALEX,Y,YHT,PINREG,THEPIN,NPIN,
     -    XPORIG + 192.0,YPORIG - SEQRMY,INCOLR(PLTYPE),MXCOLR,RGB,
     -    COLPLT(PLTYPE,7),COLPLT(PLTYPE,8),COLPLT(PLTYPE,9),
     -    COLPLT(PLTYPE,10))

C---- Print the maximum deviation scores from the asterisks print
      IRGRAF = IRGRAF + 1
      Y = YPORIG - MAXDVY
      CALL PSTEXT(XPORIG,Y,12.0,LOWER(IRGRAF:IRGRAF) //
     -    '. Max. deviation (see listing)')
      X = XPORIG + SCALEX / 2.0
      DO 600, IPIN = 1, NPIN
          CALL ASTDEV(PINDEV(IPIN),0.0,1.0,CDUMMY,RDUM1,RDUM2,
     -        ASTER,1,1,0.0,.FALSE.)
          IF (ASTER.EQ.'      ' .AND. .NOT.BRKPOS(IPIN)) THEN
              ASTER = '     .'
          ENDIF
          Y = YPORIG - MAXDVY - 24.0
          DO 500, N = 6, 1, -1
              IF (ASTER(N:N).NE.' ') THEN
                  CALL PSCTXT(X,Y,6.0,ASTER(N:N))
              ENDIF
              Y = Y + 5.0
 500      CONTINUE
      X = X + SCALEX
 600  CONTINUE

C---- Add ticks at appropriate positions
      YDIFF = MAXDVY + 29.0
      CALL PINTIC(XPORIG,YPORIG,YDIFF,XPWID,MXPINS,NPIN,2.0,TICPOS,
CHECK v.3.4-->
C     -    BRKPOS)
     -    BRKPOS,.FALSE.)
CHECK v.3.4<--

C---- Show the chequer-board of log-odds scores
      IRGRAF = IRGRAF + 1
      Y = YPORIG - DASCOY
      CALL PSTEXT(XPORIG,Y,12.0,LOWER(IRGRAF:IRGRAF) //
     -    '. G-factors')
      Y = Y - 12.0
      LSTCHY = Y
      CALL PINCHQ(XPORIG,SCALEX,Y,YHT,PINSCO,THEPIN,NPIN,NDISTR,
     -    CLABEL,INCOLR(PLTYPE),MXCOLR,RGB,COLPLT(PLTYPE,11),
     -    COLPLT(PLTYPE,12),YBOT,PINSST,PINCIS,NCOVAL,NDIHED,LSTCHX)

C---- Add ticks at appropriate positions
      CALL PINTIC(XPORIG,YBOT,0.0,XPWID,MXPINS,NPIN,-2.0,TICPOS,
CHECK v.3.4-->
C     -    BRKPOS)
     -    BRKPOS,.FALSE.)
CHECK v.3.4<--

C---- Print the tick labels
      X = XPORIG + XGAP / 2.0
      Y = YBOT - TSIZE / 2.0
      DO 700, IPIN = 1, NPIN
          IF (TICPOS(IPIN)) THEN
              CALL PSCTXT(X,Y,SIZLAB,TICLAB(IPIN)(1:TICLEN(IPIN)))
          ENDIF
          X = X + XGAP
 700  CONTINUE

C---- Print the page number on the plot
      NPAGE = NPAGE + 1
      WRITE(PAGENO,'(I2)') NPAGE
      PAGE = 'Page ' // PAGENO      
      CALL PSCTXT(BBOXX2 - 40.0,BBOXY2 - 20.0,12.0,PAGE)

C---- Re-initalise arrays
      DO 850, NPIN = 1, MXPINS
          PINACC(NPIN) = 0.0
          PINCIS(NPIN) = ' '
          PINDAT(NPIN,1) = 0.0
          PINDAT(NPIN,2) = 0.0
          PINDAT(NPIN,3) = 0.0
          PINDEV(NPIN) = 0.0
          PINRES(NPIN) = ' '
          PINSST(NPIN) = '='
          PINREG(NPIN) = 0
          PINCHN(NPIN) = ' '
          DO 840, IDIST = 1, NDISTR
              PINSCO(IDIST,NPIN) = 999.99
 840      CONTINUE
          PINSNO(NPIN) = ' '
 850  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE PINRAM  -  Print Ramachandran plot regions
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE PINRAM(XPORIG,XGAP,YP,YHT,PINREG,THEPIN,NPIN,KEYX,KEYY,
     -    INCOLR,MXCOLR,RGB,COL1,COL2,COL3,COL4)

      SAVE

      INTEGER       MXCOLR, THEPIN

      INTEGER       COL1, COL2, COL3, COL4, IPIN, NPIN, PINREG(THEPIN)
      LOGICAL       INCOLR
      REAL          KEYX, KEYY, RGB(3,MXCOLR), SHADE, X1, X2, XGAP,
     -              XPORIG, Y1, Y2, YHT, YP
 
      DATA  SHADE / 0.4 /

C---- Plot the values
      X1 = XPORIG
      DO 100, IPIN = 1, NPIN
          X2 = X1 + XGAP
          IF (PINREG(IPIN).EQ.4) THEN
              Y2 = YP + YHT
              CALL PSHADE(0.0,COL4,RGB,MXCOLR,INCOLR)
              CALL PSTRIA(X1,YP,X2,YP,(X1 + X2) / 2.0,Y2)
          ELSE IF (PINREG(IPIN).EQ.3) THEN
              Y2 = YP + YHT
              CALL PSHADE(SHADE,COL3,RGB,MXCOLR,INCOLR)
              CALL PSBBOX(X1,YP,X2,YP,X2,Y2,X1,Y2)
          ELSE IF (PINREG(IPIN).EQ.2) THEN
              Y2 = YP + 2.0 * YHT
              CALL PSHADE(SHADE,COL2,RGB,MXCOLR,INCOLR)
              CALL PSBBOX(X1,YP,X2,YP,X2,Y2,X1,Y2)
          ELSE IF (PINREG(IPIN).EQ.1) THEN
              Y2 = YP + 2.0 * YHT
              CALL PSHADE(0.0,COL1,RGB,MXCOLR,INCOLR)
              CALL PSBBOX(X1,YP,X2,YP,X2,Y2,X1,Y2)
          ENDIF
          X1 = X2
 100  CONTINUE

C---- Print the explanatory key
      X1 = KEYX
      X2 = X1 + XGAP
      Y1 = KEYY + YHT / 2.0
      Y2 = KEYY - YHT / 2.0
      CALL PSHADE(0.0,COL4,RGB,MXCOLR,INCOLR)
      CALL PSTRIA(X1,Y2,X2,Y2,(X1 + X2) / 2.0,Y1)
      CALL PSTEXT(X2 + 5.0,KEYY,10.0,'Most favoured')
      X1 = KEYX + 76.0
      X2 = X1 + XGAP
      CALL PSHADE(SHADE,COL3,RGB,MXCOLR,INCOLR)
      CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)
      CALL PSTEXT(X2 + 5.0,KEYY,10.0,'Allowed')
      X1 = KEYX + 127.0
      X2 = X1 + XGAP
      Y1 = Y2
      Y2 = Y1 + 2.0 * YHT
      CALL PSHADE(SHADE,COL2,RGB,MXCOLR,INCOLR)
      CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)
      CALL PSTEXT(X2 + 5.0,KEYY,10.0,'Generous')
      X1 = KEYX + 178.0
      X2 = X1 + XGAP
      CALL PSHADE(0.0,COL1,RGB,MXCOLR,INCOLR)
      CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)
      CALL PSTEXT(X2 + 5.0,KEYY,10.0,'Disallowed')

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ACCSHD  -  Shade in the background of the secondary
C                        structure "wiring diagram" to give an indication
C                        of the relative accessibility
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ACCSHD(THEPIN,NPIN,PINACC,PINSST,XP,YP,DX,
     -    SSSIZE,INCOLR,MXCOLR,RGB,MINCOL,MAXCOL)

      SAVE

      INTEGER       MXCOLR, NPIN, THEPIN
      CHARACTER*1   NXTSTR, SECSTR
      CHARACTER*2   PINSST(THEPIN)
CHECK v.3.2-->
C      INTEGER       ISTRUC, IPIN, IRES, LSTRUC, MAXCOL, MINCOL, NRESID
      INTEGER       IPIN, MAXCOL, MINCOL
CHECK v.3.2<--
      LOGICAL       BLANK, INCOLR
      REAL          DX, HEIGHT, PINACC(THEPIN), RGB(3,MXCOLR), SHADE,
     -              SSSIZE, X, XP, X1, X2, Y, YP, Y1, Y2

CHECK v.3.2-->
C      DATA IRES,LSTRUC   / 0, 0 /
CHECK v.3.2<--

C---- Initialise values
      HEIGHT = SSSIZE * 3.0
      X = XP
      Y = YP

C---- Loop through the residues
      DO 400, IPIN = 1, NPIN

C----     Initialise structure type for this residue
          SECSTR = PINSST(IPIN)(1:1)
          NXTSTR = PINSST(IPIN)(2:2)
          IF (SECSTR.EQ.'=') THEN
              BLANK = .TRUE.
          ELSE
              BLANK = .FALSE.
CHECK v.3.2-->
C              IRES = IRES + 1
CHECK v.3.2<--
          ENDIF

C----     If not off the end of a chain, draw a shaded patch according to
C         the accessibility
          IF (.NOT.BLANK) THEN
              X1 = X
              X2 = X + DX
              Y1 = Y - HEIGHT
              Y2 = Y + HEIGHT
              SHADE = PINACC(IPIN) / 100.0
              CALL PSCALE(SHADE,INCOLR,MXCOLR,RGB,MINCOL,MAXCOL)
              CALL PSUBOX(X1,Y1,X1,Y2,X2,Y2,X2,Y1)
          ENDIF

C----     Increment x-position
          X = X + DX

C----     Save current structure
CHECK v.3.2-->
C          LSTRUC = ISTRUC
CHECK v.3.2<--
 400  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE PINCHQ  -  Print the chequer-board (the PROCHECKer board)
C                        of log-odds scores
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE PINCHQ(XPORIG,XGAP,YP,YHT,PINSCO,THEPIN,NPIN,NDISTR,
     -    CLABEL,INCOLR,MXCOLR,RGB,MINCOL,MAXCOL,YBOT,PINSST,PINCIS,
     -    NCOVAL,NDIHED,LSTCHX)

      SAVE

      INTEGER       MXCOLR, NDISTR, THEPIN
      REAL          MINSHD, VALLOW, VALUPP
      PARAMETER    (
     -              MINSHD =  0.97,
     -              VALLOW =  0.00,
     -              VALUPP = -4.00
     -             )

      CHARACTER*1   PINCIS(THEPIN), SECSTR
      CHARACTER*2   PINSST(THEPIN)
      CHARACTER*11  CLABEL(NDISTR)
      CHARACTER*100 STRING
      INTEGER       IDISTR, IPIN, MAXCOL, MINCOL, NBOTH, NCIS, NDAM,
     -              NCOVAL, NDIHED, NPIN, SLEN
      LOGICAL       INCOLR
      REAL          LSTCHX, PINSCO(NDISTR,THEPIN), RGB(3,MXCOLR),
     -              SHADE, VALUE, X1, X2, XGAP, XPORIG, Y1, Y2, YBOT,
     -              YHT, YP
 
C---- Initialise values
      NBOTH = 0
      NCIS = 0
      NDAM = 0
      X1 = XPORIG - 35.0
      Y1 = YP - YHT / 2.0

C---- Print the row headings
      DO 100, IDISTR = 1, NDISTR
          CALL PSTEXT(X1,Y1,6.0,CLABEL(IDISTR))
          Y1 = Y1 - YHT
          IF (IDISTR.EQ.NDIHED) Y1 = Y1 - YHT / 2.0
          IF (IDISTR.EQ.NDIHED + 1) Y1 = Y1 - YHT
          IF (IDISTR.EQ.NDIHED + NCOVAL + 1) Y1 = Y1 - YHT / 2.0
          IF (IDISTR.EQ.NDISTR - 1) Y1 = Y1 - YHT * 1.5
 100  CONTINUE

C---- Reinitialise
      X1 = XPORIG

C---- Lop through the residues to be processed
      DO 800, IPIN = 1, NPIN
          X2 = X1 + XGAP
          Y1 = YP

C----     Process if not within a chain-break
          SECSTR = PINSST(IPIN)(1:1)
          IF (SECSTR.NE.'=') THEN

C----         If this is a cis-peptide or a D-amino acid, plot a marker
C             accordingly
              IF (PINCIS(IPIN).NE.' ') THEN
                  CALL PSCTXT((X1 + X2) / 2.0,Y1 + YHT * 0.75,6.0,
     -                PINCIS(IPIN))
                  IF (PINCIS(IPIN).EQ.'c') NCIS = NCIS + 1
                  IF (PINCIS(IPIN).EQ.'D') NDAM = NDAM + 1
                  IF (PINCIS(IPIN).EQ.'X') NBOTH = NBOTH + 1
              ENDIF

C----         Loop through the different distribution types
              DO 300, IDISTR = 1, NDISTR

C----             Calculate y-extent of current box and its shade
                  Y2 = Y1 - YHT
                  VALUE = PINSCO(IDISTR,IPIN)
                  IF (VALUE.GT.999.0) THEN
                      SHADE = 1.0
                  ELSE
                      IF (VALUE.GT.VALLOW) THEN
                          SHADE = MINSHD
                      ELSE IF (VALUE.LE.VALUPP) THEN
                          SHADE = 0.0
                      ELSE
                          SHADE = MINSHD
     -                        - MINSHD * (VALUE - VALLOW)
     -                        / (VALUPP - VALLOW)
                      ENDIF
                  ENDIF

C----             Plot the box
                  IF (VALUE.GT.999.0) THEN
                      CALL PSHADE(SHADE,1,RGB,MXCOLR,.FALSE.)
                  ELSE
                      CALL PSCALE(SHADE,INCOLR,MXCOLR,RGB,MINCOL,
     -                    MAXCOL)
                  ENDIF
                  CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)

C----             Increment y-value for next block
                  Y1 = Y2
                  IF (IDISTR.EQ.NDIHED) Y1 = Y1 - YHT / 2.0
                  IF (IDISTR.EQ.NDIHED + 1) Y1 = Y1 - YHT
                  IF (IDISTR.EQ.NDIHED + NCOVAL + 1)
     -                Y1 = Y1 - YHT / 2.0
                  IF (IDISTR.EQ.NDISTR - 1) Y1 = Y1 - YHT * 1.5
 300          CONTINUE


C----         If this is a cis-peptide or a D-amino acid, plot a marker
C             accordingly
              IF (PINCIS(IPIN).NE.' ') THEN
                  CALL PSCTXT((X1 + X2) / 2.0,Y1 + YHT * 1.75,6.0,
     -                PINCIS(IPIN))
              ENDIF
          ENDIF

C----     Increment x-value for next residue
          X1 = X2
 800  CONTINUE

C---- Return the last x- and y-value
      LSTCHX = X2
      YBOT = Y2

C---- If any cis-peptides or D-amino acids, print key at bottom of page
      STRING = ' '
      SLEN = 0
      IF (NCIS.GT.0) THEN
          STRING = 'c = cis-peptide'
          SLEN = 15
      ENDIF
      IF (NDAM.GT.0) THEN
          STRING = STRING(1:SLEN) // '    ' // 'D = D-amino acid'
          SLEN = SLEN + 20
      ENDIF
      IF (NBOTH.GT.0) THEN
          STRING = STRING(1:SLEN) // '    ' //
     -        'X = cis-peptide & D-amino acid'
          SLEN = SLEN + 34
      ENDIF
      IF (SLEN.GT.0) THEN
          CALL PSTEXT(XPORIG,YBOT - 22.0,8.0,STRING(1:SLEN))
      ENDIF

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE SSPLOT  -  Draw the secondary structure "wiring diagram"
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE SSPLOT(THEPIN,NPIN,PINSST,XP,YP,DX,NRESID,PINCHN,
     -    SHOWAC,SSSIZE,INCOLR,MXCOLR,RGB,COLOUR,MINACC,MAXACC)

      SAVE

      INTEGER       BLANK, COIL, HELIX, STRAND
      PARAMETER    (
     -              BLANK  =   0,
     -              COIL   =   3,
     -              HELIX  =   1,
     -              STRAND =   2
     -             )

      REAL          ARRWID, COIWID, THICK, THIN
      PARAMETER    (
     -              ARRWID = 1.8,
     -              COIWID = 0.25,
     -              THICK  = 0.4,
     -              THIN   = 0.2
     -             )

      INTEGER       MXCOLR, NPIN, THEPIN
      CHARACTER*1   NXTSTR, SECSTR
      CHARACTER*2   PINCHN(THEPIN), PINSST(THEPIN)
      INTEGER       COLOUR, FIRSTH, ISTRUC, IPIN, IRES, LENRUN, LSTRUC,
     -              MAXACC, MINACC, NRESID
      LOGICAL       INCOLR, SHOWAC
      REAL          DX, HEIGHT, HWIDTH, RGB(3,MXCOLR), SSSIZE, X, XP,
     -              X1, X2, Y, YP, Y1, Y2

      DATA IRES,LSTRUC   / 0, 0 /

C---- Initialise values
      HEIGHT = SSSIZE * 1.5
      HWIDTH = SSSIZE * 1.2
      X = XP
      Y = YP
      LENRUN = 0
      CALL PSLWID(THIN)

C---- Loop through the residues
      DO 400, IPIN = 1, NPIN

C----     If this is the start of a chain, draw chain-start
          IF (PINCHN(IPIN)(2:2).EQ.'>' .AND.
     -        PINCHN(IPIN)(1:1).NE.' ') THEN
              CALL PSLINE(X,Y - SSSIZE * 0.6,X,Y + SSSIZE * 0.6)

C----         Print the chain identifier
              CALL PSTEXT(X - 10.0,Y,10.0,PINCHN(IPIN)(1:1))
          ENDIF

C----     If this is the end of a chain, draw chain-end
          IF (PINCHN(IPIN)(2:2).EQ.'<') THEN
              CALL PSLINE(X + DX,Y - SSSIZE * 0.6,X + DX,
     -            Y + SSSIZE * 0.6)
          ENDIF

C----     Initialise structure type for this residue
          SECSTR = PINSST(IPIN)(1:1)
          NXTSTR = PINSST(IPIN)(2:2)
          IF (SECSTR.NE.'=') IRES = IRES + 1
          IF (SECSTR.EQ.'H' .OR. SECSTR.EQ.'G') THEN
              ISTRUC = HELIX
          ELSE IF (SECSTR.EQ.'E') THEN
              ISTRUC = STRAND
          ELSE IF (SECSTR.EQ.'=') THEN
              ISTRUC = BLANK
          ELSE
              ISTRUC = COIL
          ENDIF

C----     If coil, then draw a horizontal bar
          IF (ISTRUC.EQ.COIL) THEN

C----         Draw the current fragment of the coil
              X1 = X
              X2 = X + DX
              Y1 = Y - SSSIZE * COIWID
              Y2 = Y + SSSIZE * COIWID
              CALL PSHADE(1.0,COLOUR,RGB,MXCOLR,INCOLR)
              CALL PSUBOX(X1,Y1,X1,Y2,X2,Y2,X2,Y1)
              CALL PSLINE(X1,Y1,X2,Y1)
              CALL PSLINE(X1,Y2,X2,Y2)

C----         If this is the start of the coil, then start box
              IF (LSTRUC.NE.COIL) THEN
                  CALL PSLINE(X,Y1,X,Y2)
              ENDIF

C----         If this is the last residue of the coil, draw its end
              IF (NXTSTR.EQ.'E' .OR. NXTSTR.EQ.'H' .OR.
     -            NXTSTR.EQ.'G' .OR. IRES.EQ.NRESID) THEN
                  CALL PSLINE(X2,Y1,X2,Y2)
              ENDIF
              X = X + DX

C----     Else if it's a strand, draw a horizontal box
          ELSE IF (ISTRUC.EQ.STRAND) THEN
              
C----         If this is the last residue of the strand, draw the arrow-head
              IF (NXTSTR.NE.'E' .OR. IRES.EQ.NRESID) THEN
                  X1 = X
                  X2 = X + DX
                  Y1 = Y - ARRWID * SSSIZE
                  Y2 = Y + ARRWID * SSSIZE
                  CALL PSHADE(1.0,COLOUR,RGB,MXCOLR,INCOLR)
                  CALL PSUTRI(X1,Y1,X1,Y2,X2,Y)
                  CALL PSLINE(X,Y2,X,Y + SSSIZE)
                  CALL PSLINE(X,Y1,X,Y - SSSIZE)
                  CALL PSLINE(X,Y2,X + DX,Y)
                  CALL PSLINE(X,Y1,X + DX,Y)
                  X = X + DX

C----         Otherwise, draw the current fragment of the strand
              ELSE
                  X1 = X
                  X2 = X + DX
                  Y1 = Y - SSSIZE
                  Y2 = Y + SSSIZE
                  CALL PSHADE(1.0,COLOUR,RGB,MXCOLR,INCOLR)
                  CALL PSUBOX(X1,Y1,X1,Y2,X2,Y2,X2,Y1)
                  IF (.NOT.SHOWAC) CALL PSLWID(THICK)
                  CALL PSLINE(X,Y - SSSIZE,X + DX,Y - SSSIZE)
                  IF (.NOT.SHOWAC) CALL PSLWID(THIN)
                  CALL PSLINE(X,Y + SSSIZE,X + DX,Y + SSSIZE)
                  X = X + DX
              ENDIF
                          
C----         If this is the start of the strand, then start box
              IF (LSTRUC.NE.STRAND) THEN
                  IF (.NOT.SHOWAC) CALL PSLWID(THICK)
                  CALL PSLINE(X1,Y - SSSIZE,X1,Y + SSSIZE)
                  IF (.NOT.SHOWAC) CALL PSLWID(THIN)
              ENDIF

C----     Else if it's a helix, draw a sawtooth
          ELSE IF (ISTRUC.EQ.HELIX) THEN

C----         Increment count of helix residues in current helix
              LENRUN = LENRUN + 1
              IF (LENRUN.EQ.1) FIRSTH = IRES

C----         If at end of the helix, draw it
              IF (IRES.EQ.NRESID .OR. IPIN.EQ.NPIN .OR.
     -            (NXTSTR.NE.'H' .AND. NXTSTR.NE.'G')) THEN
                  CALL DHELIX(LENRUN,X,Y,FIRSTH,DX,HWIDTH,HEIGHT,
     -                SHOWAC,INCOLR,MXCOLR,RGB,COLOUR)
                  LENRUN = 0
              ENDIF
          ELSE
              X = X + DX
          ENDIF                          

C----     Save current structure
          LSTRUC = ISTRUC
 400  CONTINUE

C---- Show key to wiring diagram
      X = XP
      Y = YP - 17.0
      CALL PSTEXT(X,Y,10.0,'Key:-')

C---- Helix
      X = XP + 32.0
      CALL DHELIX(4,X,Y,1,DX,HWIDTH,HEIGHT,SHOWAC,INCOLR,MXCOLR,
     -    RGB,COLOUR)
CHECK v.3.0.1-->
C 500  CONTINUE
CHECK v.3.0.1<--
      X = X + 4.0
      CALL PSTEXT(X,Y,10.0,'Helix')

C---- Strand
      X = XP + 88.0
      X1 = X
      X2 = X + 3 * DX
      Y1 = Y - SSSIZE
      Y2 = Y + SSSIZE
      CALL PSHADE(1.0,COLOUR,RGB,MXCOLR,INCOLR)
      CALL PSUBOX(X1,Y1,X1,Y2,X2,Y2,X2,Y1)
      IF (.NOT.SHOWAC) CALL PSLWID(THICK)
      CALL PSLINE(X1,Y1,X1,Y2)
      CALL PSLINE(X,Y - SSSIZE,X + 3 * DX,Y - SSSIZE)
      IF (.NOT.SHOWAC) CALL PSLWID(THIN)
      CALL PSLINE(X,Y + SSSIZE,X + 3 * DX,Y + SSSIZE)
      X = X + 3 * DX
      X1 = X
      X2 = X + DX
      Y1 = Y - ARRWID * SSSIZE
      Y2 = Y + ARRWID * SSSIZE
      CALL PSHADE(1.0,COLOUR,RGB,MXCOLR,INCOLR)
      CALL PSUTRI(X1,Y1,X1,Y2,X2,Y)
      CALL PSLINE(X,Y2,X,Y + SSSIZE)
      CALL PSLINE(X,Y1,X,Y - SSSIZE)
      CALL PSLINE(X,Y2,X + DX,Y)
      CALL PSLINE(X,Y1,X + DX,Y)
      X = X + DX + 4.0
      CALL PSTEXT(X,Y,10.0,'Beta strand')

C---- Coil
      X = XP + 166.0
      X1 = X
      X2 = X1 + 4 * DX
      Y1 = Y - SSSIZE * COIWID
      Y2 = Y + SSSIZE * COIWID
      CALL PSHADE(1.0,COLOUR,RGB,MXCOLR,INCOLR)
      CALL PSUBOX(X1,Y1,X1,Y2,X2,Y2,X2,Y1)
      CALL PSLINE(X1,Y1,X2,Y1)
      CALL PSLINE(X1,Y2,X2,Y2)
      CALL PSLINE(X1,Y1,X1,Y2)
      CALL PSLINE(X2,Y1,X2,Y2)
      X = X + 4 * DX + 4.0
      CALL PSTEXT(X,Y,10.0,'Random coil')

C---- Accessibility shading
      IF (SHOWAC) THEN
          X = XP + 248.0
          Y1 = Y + 2.5
          Y2 = Y - 2.5
          IF (INCOLR) THEN
              CALL PSTEXT(X,Y,8.0,'Accessibility shading:')
              X1 = X + 80.0
              X2 = X1 + 5.0
              CALL PSHADE(0.0,MINACC,RGB,MXCOLR,INCOLR)
              CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)
              X = X2 + 7.0
              CALL PSTEXT(X,Y,8.0,'Buried')
              X1 = X + 34.0
              X2 = X1 + 5.0
              CALL PSHADE(0.0,MAXACC,RGB,MXCOLR,INCOLR)
              CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)
              X = X2 + 7.0
              CALL PSTEXT(X,Y,8.0,'Accessible')
          ELSE
              CALL PSTEXT(X,Y,8.0,'Accessibility shading: Black=' //
     -            'buried, White=accessible')
          ENDIF
      ENDIF

      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.4-->
C Routines PINTIC, PINRNO, DHELIX transferred to ps.f
CHECK v.3.4<--
C**************************************************************************
C
C  SUBROUTINE PINGRF  -  Print current graph for pins plot
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE PINGRF(XPORIG,YP,XPWID,YPWID,BSHADE,YMAX,FPIN,
     -    LPIN,IREC,LIREC,JREC,LJREC,INCOLR,MXCOLR,RGB,COLOUR)

CHECK v.3.2-->
C      CHARACTER*110 IREC, JREC
      CHARACTER*(*) IREC, JREC
CHECK v.3.2<--
      INTEGER       COLOUR, FPIN, INTRL, LPIN, LIREC, LJREC, MXCOLR
      LOGICAL       BSHADE, INCOLR
      REAL          RGB(3,MXCOLR), SCALEY, XCENTR, XP, XPORIG, XPWID,
     -              YCENTR, YMAX, YP, YPWID
 
C---- Draw box and axis labels
      XP = XPORIG
      IF (BSHADE) THEN
          CALL PSHADE(0.9,COLOUR,RGB,MXCOLR,INCOLR)
          CALL PSUBOX(XP,YP,XP,YP + YPWID,XP + XPWID,YP + YPWID,
     -        XP + XPWID,YP)
      ENDIF
      XCENTR = XPORIG + XPWID / 2.0
      YCENTR = YP + YPWID / 2.0
      SCALEY = YPWID / YMAX
      INTRL = 0
      IF (YMAX.LE.2.0) INTRL = 1
      CALL AXES(XP,XP + XPWID,YP,YP + YPWID,0,5,REAL(FPIN),
     -    REAL(LPIN),0.0,YMAX,10.0,0,INTRL,15.0,.TRUE.,.TRUE.,
     -    .FALSE.,.FALSE.,.FALSE.)

C---- Sub-heading and x-axis title
      CALL PSCTXT(XCENTR,YP + YPWID + 10.0,15.0,IREC(1:LIREC))
      CALL PSCTXT(XCENTR,YP - 20.0,10.0,'Residue number')

C---- y-axis headings
      CALL PSRCTX(XPORIG - 28.0,YP + YPWID / 2.0,10.0,JREC(1:LJREC))

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE PINBOX  -  Print histogram bars for pins plot
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE PINBOX(THEPIN,NPIN,PINDAT,XP,YP,YPWID,SCALEX,SCALEY,
     -    STDNUM,INCOLR,MXCOLR,RGB,COLBAD,COLGD)

      INTEGER       COLBAD, COLGD, IPIN, MXCOLR, NPIN, THEPIN
      LOGICAL       INCOLR
      REAL          PINDAT(THEPIN), RGB(3,MXCOLR), SCALEX, SCALEY,
     -              STDNUM, XP, X1, X2, YP, YPWID, Y1, Y2
 
C---- Plot the values
      X1 = XP
      Y1 = YP
      DO 100, IPIN = 1, NPIN
          X2 = X1 + SCALEX
CHECK v.3.2-->
C          IF (PINDAT(IPIN).GT.0.0) THEN
          IF (PINDAT(IPIN).LT.990.0) THEN
CHECK v.3.2<--
              Y2 = SCALEY * PINDAT(IPIN)
              IF (Y2.GT.YPWID) Y2 = YPWID
              Y2 = Y1 + Y2
              IF (PINDAT(IPIN).GT.STDNUM) THEN
                  CALL PSHADE(0.0,COLBAD,RGB,MXCOLR,INCOLR)
              ELSE
                  CALL PSHADE(0.4,COLGD,RGB,MXCOLR,INCOLR)
              ENDIF
              CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)
          ENDIF
          X1 = X2
 100  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE PINGFS  -  Print the overall G-factors on the chequer-board
C                        for the protein as a whole
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE PINGFS(XSTART,XGAP,YSTART,YHT,GFACTR,NDISTR,INCOLR,
     -    MXCOLR,RGB,MINCOL,MAXCOL,NCOVAL,NDIHED)


      SAVE

CHECK v.3.2-->
      CHARACTER*7   CNUMB
CHECK v.3.2<--
      INTEGER       MXCOLR
      REAL          MINSHD, VALLOW, VALUPP
      PARAMETER    (
     -              MINSHD =  0.97,
     -              VALLOW =  0.00,
     -              VALUPP = -2.50
     -             )

      INTEGER       IDISTR, MAXCOL, MINCOL, NCOVAL, NDIHED, NDISTR
      LOGICAL       INCOLR
      REAL          GFACTR(NDISTR), RGB(3,MXCOLR), SHADE,
     -              VALUE, X1, X2, XGAP, XSTART, Y1, Y2, YHT, YSTART
 
C---- Initialise values
      X1 = XSTART + XGAP
      X2 = X1 + XGAP
      Y1 = YSTART

C---- Print column heading
      CALL PSCTXT((X1 + X2) / 2.0,Y1 + YHT * 0.75,6.0,'Ave')

C---- Loop through the different distribution types
      DO 300, IDISTR = 1, NDISTR

C----     Calculate y-extent of current box and its shade
          Y2 = Y1 - YHT
          VALUE = GFACTR(IDISTR)
          IF (VALUE.GT.999.0) THEN
              SHADE = 1.0
          ELSE
              IF (VALUE.GT.VALLOW) THEN
                  SHADE = MINSHD
              ELSE IF (VALUE.LE.VALUPP) THEN
                  SHADE = 0.0
              ELSE
                  SHADE = MINSHD
     -                - MINSHD * (VALUE - VALLOW)
     -                / (VALUPP - VALLOW)
              ENDIF
          ENDIF

C----     Plot the box
          IF (VALUE.GT.999.0) THEN
              CALL PSHADE(SHADE,1,RGB,MXCOLR,.FALSE.)
          ELSE
              CALL PSCALE(SHADE,INCOLR,MXCOLR,RGB,MINCOL,
     -            MAXCOL)
          ENDIF
          CALL PSBBOX(X1,Y1,X2,Y1,X2,Y2,X1,Y2)

CHECK v.3.2-->
C----     Print the G-factor value to the right of the box
          IF (VALUE.LT.990.0) THEN
              WRITE(CNUMB,200) VALUE
 200          FORMAT(F7.2)
              CALL PSTEXT(X2,(Y1 + Y2) / 2.0,6.0,CNUMB)
          ENDIF
CHECK v.3.2<--

C----     Increment y-value for next block
          Y1 = Y2
          IF (IDISTR.EQ.NDIHED) Y1 = Y1 - YHT / 2.0
          IF (IDISTR.EQ.NDIHED + 1) Y1 = Y1 - YHT
          IF (IDISTR.EQ.NDIHED + NCOVAL + 1)
     -        Y1 = Y1 - YHT / 2.0
          IF (IDISTR.EQ.NDISTR - 1) Y1 = Y1 - YHT * 1.5
 300  CONTINUE

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE REASDH  -  Get the next record from the .sdh file
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE REASDH(IRESID,LAVVAL,LCCVAL,LPPVAL,SCORE)

      SAVE

      INCLUDE 'pplot.inc'
 
      CHARACTER*120 IREC
      INTEGER       IDIST, INRES, IRESID, LINE
      REAL          LAVVAL, LCCVAL, LPPVAL, SCORE(NDISTR)

      DATA INRES, LINE   / 2*0 /

C---- Initialise variables
      LAVVAL = 0.0
      LCCVAL = 0.0
      LPPVAL = 0.0
      DO 50, IDIST = 1, NDISTR
          SCORE(IDIST) = 0.0
 50   CONTINUE

C---- If the required residue is of a greater number than that required,
C     read through the file until come to it
      IF (IRESID.GT.INRES) THEN

C----     Read through the records
 100      CONTINUE
              READ(3,120,END=500,ERR=900) IREC
 120          FORMAT(A)
              LINE = LINE + 1

C----         If it is not the "Means" record, then check the residue no.
              IF (IREC(1:5).NE.'Means') THEN

C----             Get the residue number
                  READ(IREC,180,ERR=902) INRES
 180              FORMAT(I6)
              ENDIF

C----     Loop back for next record in file
          IF (IRESID.GT.INRES) GO TO 100
      ENDIF

C---- If it is the one required, save the details
      IF (IRESID.EQ.INRES) THEN
          READ(IREC,210,ERR=900,END=999) (SCORE(IDIST),
     -        IDIST = 1, NDISTR)
 210      FORMAT(17X,10F9.4)
          IF (SCORE(1).LT.0.0) LPPVAL = -SCORE(1)
          IF (SCORE(2).LT.0.0) LCCVAL = -SCORE(2)
          IF (SCORE(NDIHED + 1).LT.0.0) LAVVAL = -SCORE(NDIHED + 1)
      ENDIF

C---- End of file reached
 500  CONTINUE

      GO TO 999
 
C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Error reading .sdh file at line:', LINE + 1
      GO TO 999
 
 902  CONTINUE
      PRINT*, '*** ERROR. Data error in .sdh file at line:', LINE + 1
      PRINT*, IREC
      GO TO 999
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.1-->
C**************************************************************************
C
C  SUBROUTINE REARSA  -  Get the next record from the .rsa file
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE REARSA(INCHN,SEQNO,RESDUE,VALACC)

      SAVE

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   CHN, INCHN
      CHARACTER*3   RES, RESDUE
      CHARACTER*5   SEQ, SEQNO
      CHARACTER*6   CMPARE
      CHARACTER*120 IREC
      INTEGER       LINE, NREWIN
      LOGICAL       ATEND
      REAL          VAL, VALACC

      DATA ATEND  / .FALSE. /
      DATA LINE   / 0 /

C---- Initialise variables
      NREWIN = 0
      VALACC = 0.0

C---- If a previous read has hit the end of the file, rewind it
      IF (ATEND) THEN
          ATEND = .FALSE.
          REWIND(13)
      ENDIF

C---- Read through the file until have the next ATOM record
 100  CONTINUE
          READ(13,120,END=500,ERR=900) IREC
 120      FORMAT(A)
          LINE = LINE + 1
CHECK v.3.3.2-->
C          IF (IREC(1:4).NE.'ATOM') GO TO 100
          IF (IREC(1:3).NE.'RES') GO TO 100
CHECK v.3.3.2<--

C----     Check if this is the correct residue record
CHECK v.3.3.2-->
C          READ(IREC,140,ERR=902) CHN, SEQ, RES, VAL
C 140      FORMAT(5X,A1,A5,1X,A3,8X,F6.0)
          READ(IREC,140,ERR=902) RES, CHN, SEQ, VAL
 140      FORMAT(4X,A3,1X,A1,A5,8X,F6.0)
CHECK v.3.3.2<--

C----     If this is the right record, then save the accessibility %-tage
          IF (CHN.EQ.INCHN .AND. SEQ.EQ.SEQNO) THEN
              VALACC = MIN(VAL,100.0)

C----         If the residue-type is wrong, print a warning
              IF (RES.NE.RESDUE) THEN
                  PRINT*, '*** WARNING. Residue-type in .rsa file ',
     -                'disagrees with that in the PDB file:'
                  PRINT*, '***          [', INCHN, SEQNO, RESDUE,
     -                ']  [', CHN, SEQ, RES, ']', VALACC
              ENDIF

C----     Otherwise, check whether need to keep reading the file or to
C         rewind it
          ELSE
              CMPARE = INCHN // SEQNO

C----         If have overshot the record we're after, then rewind the
C             file and have another search for it
              IF (CMPARE.LT.IREC(6:11)) THEN
                  NREWIN = NREWIN + 1
                  IF (NREWIN.LT.2) THEN
                      REWIND(13)
                      GO TO 100
                  ENDIF

C----         Otherwise, search for the next record
              ELSE
                  GO TO 100
              ENDIF
          ENDIF

      GO TO 999
  
C---- End of file reached
 500  CONTINUE
      ATEND = .TRUE.

      GO TO 999
 
C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Error reading .rsa file at line:', LINE + 1
      GO TO 999
 
 902  CONTINUE
      PRINT*, '*** ERROR. Data error in .rsa file at line:', LINE + 1
      PRINT*, IREC
      GO TO 999
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.1<--
C**************************************************************************
C
C  SUBROUTINE ASTOPE  -  Open output listing file (.out) asterisks file
C                        (.ast)
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTOPE

      INCLUDE 'pplot.inc'

      INTEGER       I 

C---- Initialise variables
      DO 10, I = 1, MXCOLS
          MXDEVC(I) = 0.0
 10   CONTINUE
      NPRINT = 1

C---- Rewind non-bonded interactions file
      IF (NONBON) REWIND(2)

C---- Open output print file, <filename>.out
      OPEN(UNIT=7, FILE=FILOUT, STATUS='UNKNOWN', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    CARRIAGECONTROL='LIST',RECL=132,
     -    ERR=900)

C---- Open output asterisks file, <filename>.ast
      IF (IDITIS) THEN
          OPEN(UNIT=9, FILE=FILAST, STATUS='UNKNOWN', FORM='FORMATTED',
     -        ACCESS='SEQUENTIAL',
CVAX     -        CARRIAGECONTROL='LIST',RECL=132,
     -        ERR=902)
      ENDIF

      GO TO 999

C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Unable to open output file [', FILOUT, ']',
     -    ' Program aborted'
      GO TO 990

 902  CONTINUE
      PRINT*, '*** ERROR. Unable to open output file [', FILAST, ']',
     -    ' Program aborted'
      GO TO 990

990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTPRN  -  Print current line of asterisks print
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTPRN(SERNO, RESDUE, INCHN, SEQNO,
     -        SECSTR, PHI, PSI, OMEGA, CHI1, CHI2, CHI3, ENHB, DISULF,
CHECK v.3.2-->
C     -        DIHANG, CGAMB,MXDEVR,REGTYP)
     -        DIHANG, MXDEVR,REGTYP,CISPEP)
CHECK v.3.2<--

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   INCHN, SECSTR
      CHARACTER*2   DAMINO, REGION
      CHARACTER*3   CISPEP, RESDUE
      CHARACTER*5   SEQNO
      CHARACTER*6   CHAVAL(MXCOLS)
      CHARACTER*132 AREC, IREC
      INTEGER       I, NBADR, REGNO, REGTYP, SERNO
CHECK v.3.2-->
C      REAL          BADCON, CGAMB, CHI1, CHI2, CHI3, DIHANG, DISULF,
      REAL          BADCON, CHI1, CHI2, CHI3, DIHANG, DISULF,
CHECK v.3.2<--
     -              ENHB, MXDEVR, OMEGA, PHI, PSI


C---- Initialise variables
      AREC = ' '
      DO 10, I = 1, MXCOLS - 1
          CHAVAL(I) = '    - '
 10   CONTINUE
      CHAVAL(MXCOLS) = '     -'
      IREC = ' '
      MXDEVR = 0.0
      REGION = '-'

C---- Find which Ramachandran-plot region this residue is in
CHECK v.3.6-->
C      CALL RAMREG(PHI,PSI,REGION,REGNO,REGTYP) 
      IF (NEWREG) THEN
          CALL RAMNEW(PHI,PSI,REGION,REGNO,REGTYP) 
      ELSE
          CALL RAMREG(PHI,PSI,REGION,REGNO,REGTYP) 
      ENDIF
CHECK v.3.6<--

C---- Asterisks required if disallowed or generous
      IF (RESDUE.NE.'GLY' .AND. RESDUE.NE.'PRO') THEN

C----     Check whether this is an end-residue at a chain break
          IF (PHI.NE.999.9 .AND. PSI.NE.999.9) THEN

C----         Determine number of asterisks required
              IF (REGION.EQ.'XX') THEN
                  CALL ASTDEV(4.0,0.0,1.0,CHAVAL(1),MXDEVC(1),
     -                MXDEVR,AREC,19,1,STDLIM,ASTONL)
              ELSE IF (REGION(1:1).EQ.'~') THEN
                  CALL ASTDEV(2.0,0.0,1.0,CHAVAL(1),MXDEVC(1),
     -                MXDEVR,AREC,19,1,STDLIM,ASTONL)
              ENDIF
          ELSE
              REGION = '-'
          ENDIF
      ELSE
          REGION = '-'
      ENDIF

C---- Chi-1 torsion angle
      IF (RESDUE.EQ.'PRO') CHI1 = 999.9
      IF (CHI1.LT.0.0) CHI1 = CHI1 + 360.0
      IF (CHI1.EQ.360.0) CHI1 = 0.0
      IF (CHI1.GE.0.0 .AND. CHI1.LT.360.0) THEN

C----     Chi-1 gauche minus
          IF (CHI1.GE.0.0 .AND. CHI1.LT.120.0) THEN
              CALL ASTDEV(CHI1,GLOBGM,SDEVGM,CHAVAL(2),MXDEVC(2),
     -            MXDEVR,AREC,27,1,STDLIM,ASTONL)

C----     Chi-1 trans
          ELSE IF (CHI1.GE.120.0 .AND. CHI1.LT.240.0) THEN
              CALL ASTDEV(CHI1,GLOBGT,SDEVGT,CHAVAL(3),MXDEVC(3),
     -            MXDEVR,AREC,33,1,STDLIM,ASTONL)

C----     Chi-1 gauche plus
          ELSE IF (CHI1.GE.240.0 .AND. CHI1.LT.360.0) THEN
              CALL ASTDEV(CHI1-360.0,GLOBGP-360.0,SDEVGP,CHAVAL(4),
     -            MXDEVC(4), MXDEVR,AREC,39,1,STDLIM,ASTONL)
          ENDIF
      ENDIF

C---- Chi-2 trans torsion angle
      IF (RESDUE.NE.'PHE' .AND. RESDUE.NE.'TYR' .AND.
     -    RESDUE.NE.'TRP' .AND. RESDUE.NE.'HIS' .AND.
     -    RESDUE.NE.'ASP' .AND. RESDUE.NE.'ASN') THEN
          IF (CHI2.LE.0.0) CHI2 = CHI2 + 360.0
          IF (CHI2.GT.120.0 .AND. CHI2.LE.240.0) THEN
              CALL ASTDEV(CHI2,GLOBC2,SDEVC2,CHAVAL(5),MXDEVC(5),
     -            MXDEVR,AREC,45,1,STDLIM,ASTONL)
          ENDIF
      ENDIF

C---- Proline phi
      IF (RESDUE.EQ.'PRO' .AND. PHI.NE.999.9) THEN
          CALL ASTDEV(PHI,GLOBPP,SDEVPP,CHAVAL(6),MXDEVC(6),
     -        MXDEVR,AREC,51,1,STDLIM,ASTONL)
      ENDIF

C---- Phi helix
      IF (SECSTR.EQ.'H' .AND. PHI.NE.999.9) THEN
          CALL ASTDEV(PHI,GLOBPH,SDEVPH,CHAVAL(7),MXDEVC(7),
     -        MXDEVR,AREC,57,1,STDLIM,ASTONL)
      ENDIF

C---- Helix psi
      IF (SECSTR.EQ.'H' .AND. PSI.NE.999.9) THEN
          CALL ASTDEV(PSI,GLOBHP,SDEVHP,CHAVAL(8),MXDEVC(8),
     -        MXDEVR,AREC,63,1,STDLIM,ASTONL)
      ENDIF

C---- Chi-3 right-hand
      IF (RESDUE.EQ.'CYS' .AND. CHI3.GT.0.0 .AND. CHI3.LE.180.0) THEN
          CALL ASTDEV(CHI3,GLOB3R,SDEV3R,CHAVAL(9),MXDEVC(9),
     -        MXDEVR,AREC,70,1,STDLIM,ASTONL)
      ENDIF

C---- Chi-3 left-hand
      IF (RESDUE.EQ.'CYS' .AND. CHI3.LE.0.0 .AND. CHI3.GE.-180.0) THEN
          CALL ASTDEV(CHI3,GLOB3L,SDEV3L,CHAVAL(10),MXDEVC(10),
     -        MXDEVR,AREC,78,1,STDLIM,ASTONL)
      ENDIF

C---- Disulphide bond
      IF (RESDUE.EQ.'CYS') THEN
          IF (DISULF.NE.0.0) THEN
              CALL ASTDEV(DISULF,GLOBSS,SDEVSS,CHAVAL(11),MXDEVC(11),
     -            MXDEVR,AREC,85,1,STDLIM,ASTONL)
          ENDIF
      ENDIF

C---- Case of trans peptide (ie abs(omega) > 45) 
      IF (ABS(OMEGA).GE.45.0 .AND. OMEGA.LE.360.0) THEN
          IF (OMEGA.LT.0.0) OMEGA = OMEGA + 360.0
          CALL ASTDEV(OMEGA,GLOBOM,SDEVOM,CHAVAL(12),MXDEVC(12),
     -        MXDEVR,AREC,93,1,STDLIM,ASTONL)
CHECK v.3.2-->
C          CISPEP = ' '
CHECK v.3.2<--

C---- Case of cis peptide (ie abs(omega) < 45) 
      ELSE IF (ABS(OMEGA).LT.45.0) THEN
          CALL ASTDEV(OMEGA,0.0,SDEVCS,CHAVAL(12),MXDEVC(12),
     -        MXDEVR,AREC,93,1,STDLIM,ASTONL)
CHECK v.3.2-->
C          CISPEP = 'cis'
C          NCIS = NCIS + 1
C          PRINT*, '    * cis-peptide:  ', RESDUE, ' ', INCHN, ' ',
C     -        SEQNO
CHECK v.3.2<--
      ENDIF

CHECK v.3.2-->
C---- If this ia a cis peptide, then display message
      IF (CISPEP.EQ.'cis') THEN
          NCIS = NCIS + 1
          PRINT*, '    * cis-peptide:  ', RESDUE, ' ', INCHN, ' ',
     -        SEQNO
      ENDIF
CHECK v.3.2<--

C---- Hydrogen bond energy mean and standard deviation
      IF (ENHB.LT.0.0) THEN
          CALL ASTDEV(ENHB,GLOBHB,SDEVHB,CHAVAL(13),MXDEVC(13),
     -        MXDEVR,AREC,100,1,STDLIM,ASTONL)
      ENDIF

C---- Alpha carbon chirality (zeta torsion angle)
      IF (DIHANG.NE.999.9) THEN
          CALL ASTDEV(DIHANG,GLOBDH,SDEVDH,CHAVAL(14),MXDEVC(14),
     -        MXDEVR,AREC,109,1,STDLIM,ASTONL)
      ENDIF

C---- If the zeta torsion angle is negative, then have a D-amino acid
      DAMINO = '  '
      IF (DIHANG.LT.0.0) THEN
          DAMINO = 'D>'
          NDAM = NDAM + 1
          PRINT*, '    * D-amino acid: ', RESDUE, ' ', INCHN, ' ',
     -        SEQNO
      ENDIF

C---- Find the number of non-bonded contacts for this residue
      IF (NONBON) THEN
          CALL READNB(CHAIN,INCHN,SEQNO,NBADR,VWDIST)
          BADCON = REAL(NBADR)
          IF (NBADR.GT.0) THEN
              NBADPR = NBADPR + NBADR
              CALL ASTDEV(BADCON,0.0,1.0,CHAVAL(15),MXDEVC(15),
     -            MXDEVR,AREC,116,0,STDLIM,ASTONL)
          ENDIF
      ENDIF

C---- Print the lines

C---- Write out residue information to IDITIS asterisk file
      IF (IDITIS) THEN
          WRITE(9,240) SERNO, INCHN, RESDUE, SEQNO, MXDEVR
 240      FORMAT(I4,A1,1X,A3,A5,F10.3)
      ENDIF

C---- If printing all residues, or only the highlighted ones and the deviation
C     is above the minimum required, then print
      IF (.NOT.ONLYHI .OR. MXDEVR.GT.0.0) THEN

C----     If only printing the asterisks line, transfer residue info to
C         start of the line
          IF (ASTONL) THEN
              WRITE(AREC(1:21),610) SERNO, INCHN, RESDUE, SEQNO,
     -            SECSTR, CISPEP
              AREC(25:26) = REGION

C----     Otherwise, print the line holding the information
          ELSE
              ILINE = ILINE + 1
              IF (AREC.NE.' ') THEN
                  IF (ILINE.GE.NLINES - 1) THEN
                      CALL ASTHED
                  ENDIF
              ELSE
                  IF (ILINE.GE.NLINES) THEN
                      CALL ASTHED
                  ENDIF
              ENDIF
              WRITE(7,610) SERNO, INCHN, RESDUE, SEQNO,
     -             SECSTR, CISPEP, REGION, (CHAVAL(I), I = 2, 13),
     -             DAMINO, CHAVAL(14), CHAVAL(15)
 610          FORMAT(I4,A1,1X,A3,A5,2X,A1,1X,A3,1X,A2,2X,7A6,1X,A6,2X,
     -            A6,1X,A6,2X,A6,1X,A6,1X,A2,A6,1X,A6)
          ENDIF

C----     Print asterisks line if not blank
          IF (AREC.NE.' ') THEN
              ILINE = ILINE + 1
              IF (ILINE.GE.NLINES) CALL ASTHED
              WRITE(7,620) AREC
 620          FORMAT(A131)
          ENDIF
      ENDIF

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTHED  -  Print headings for asterisks print-out
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTHED

      INCLUDE 'pplot.inc'


C---- Initialise values
      ILINE = 0
      IPAGE = IPAGE + 1

C---- Throw a page if not the first one
      IF (IPAGE.GT.1) WRITE(7,*) CHAR(12)

C---- Print headings
      WRITE(7,100) BRCODE, IPAGE
 100  FORMAT(
     -    'Residue-by-residue listing for ',A78,14X,'Page',I3,/,
     -    '----------------------------------------',/)
      ILINE = ILINE + 3
      
C---- Print explanatory text, if required
      IF (IPAGE.EQ.1 .AND. HEADIN) THEN
          CALL ASTABL
      ENDIF

C---- Print user-defined options, if required
      IF (IPAGE.EQ.1) THEN
          CALL ASTOPT
      ENDIF

C---- Print the appropriate column headings
      IF (NPRINT.EQ.1) CALL COLHD1
      IF (NPRINT.EQ.2) CALL COLHD2
      IF (NPRINT.EQ.3) CALL COLHD3

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE COLHD1  -  Column headings headings for asterisks print-out
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE COLHD1

      INCLUDE 'pplot.inc'


C---- Print column headings
      WRITE(7,260)
 260  FORMAT(
     -    '...........................................................',
     -    '...........................................................',
     -    '.............')
      ILINE = ILINE + 1
      WRITE(7,280)
 280  FORMAT(
     -    ' Residue     Kabsch Region',/,
     -    '---------    Sander   of',/,
     -    'No.  Type Seq  sec  Ramch.  Chi-1 dihedral   Chi-2 Proline ',
     -    'Phi  Helix  Chi-3   Chi-3 Disulph Omega  H-bond Chirality  ',
     -    ' Bad      Max',/,
     -    '  Chain   no. struc  plot   g(-) trans g(+)  trans   phi  h',
     -    'elix  psi  rt-hand lf-hand  bond dihedral  en.   C-alpha  c',
     -    'ontacts   dev',/,
     -    '-----------------------------------------------------------',
     -    '-----------------------------------------------------------',
     -    '-------------')
      ILINE = ILINE + 5

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE COLHD2  -  Column headings headings for bond length and
C                        angles
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE COLHD2

      INCLUDE 'pplot.inc'


C---- Print column headings
      WRITE(7,420)
 420  FORMAT(//,
     -    '...........................................................',
     -    '...........................................................',
     -    '.............',/,
     -    '   Residue ',/,
     -    '-------------     <---------- Bond lengths ---------->    <',
     -    '---------------------- Bond angles ---------------------->')
      ILINE = ILINE + 5

      WRITE(7,440)
 440  FORMAT(
     -    ' No.  Type Seq                                             ',
     -    '                                                           ',
     -    '          Max',/,
     -    '  Chain    no.    C-N     C-O     CA-C    CA-CB   N-CA    C',
     -    '-N-CA   CA-C-N   CA-C-O  CB-CA-C   N-CA-C  N-CA-CB   O-C-N ',
     -    '          dev',/,
     -    '-----------------------------------------------------------',
     -    '-----------------------------------------------------------',
     -    '-------------')
      ILINE = ILINE + 3

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE COLHD3  -  Column headings headings for bad contacts listing
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE COLHD3

      INCLUDE 'pplot.inc'


C---- Print column headings
      WRITE(7,100)
 100  FORMAT(//,36X,
     -    'B  A  D     C  O  N  T  A  C  T  S     L  I  S  T  I  N  G',
     -    //)
      ILINE = ILINE + 5
      WRITE(7,200)
 200  FORMAT(
     -    30X,'........................................',
     -    '...............................',/,
     -    30X,'  Residue                 Residue       ',/,
     -    30X,'-----------             -----------     ',/,
     -    30X,' No.   Type              No.   Type     ',
     -    '         Contact     Distance',/,
     -    30X,'    Chain      Atom          Chain     At',
     -    'om       type      (Angstroms)',/,
     -    30X,'----------------------------------------',
     -    '-------------------------------')
      ILINE = ILINE + 6

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTABL  -  Print the table of ideal values and standard
C                        deviations
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTABL

      INCLUDE 'pplot.inc'


      WRITE(7,120)
 120  FORMAT(
     -    'This listing highlights the residues in the structure which',
     -    ' may need investigation.',/)
      ILINE = ILINE + 2
      WRITE(7,140)
 140  FORMAT(
     -    'The ideal values and standard deviations against which the ',
     -    'structure has been compared are shown in the following tabl',
     -    'e:',///)
      ILINE = ILINE + 4

C---- Table of ideal values
      WRITE(7,160)
 160  FORMAT(
     -    '                          <------------------------------- ',
     -    'I D E A L   V A L U E S ------------------------------->',/)
      ILINE = ILINE + 2
      WRITE(7,180) GLOBGM, GLOBGT, GLOBGP - 360.0, GLOBC2, GLOBPP,
     -    GLOBPH,
     -    GLOBHP, GLOB3R, GLOB3L, GLOBSS, GLOBOM, GLOBHB, GLOBDH,
     -    SDEVGM, SDEVGT, SDEVGP, SDEVC2, SDEVPP, SDEVPH,
     -    SDEVHP, SDEV3R, SDEV3L, SDEVSS, SDEVOM, SDEVHB, SDEVDH
 180  FORMAT(
     -    '                            Chi-1 dihedral         Proline ',
     -    'Phi  Helix  Chi-3   Chi-3 Disulph Omega  H-bond Chirality',/,
     -    '                            g(-) trans g(+)  Chi-2   phi  h',
     -    'elix  psi  rt-hand lf-hand  bond dihedral  en.   C-alpha',/,
     -    '                          ---------------------------------',
     -    '---------------------------------------------------------',/,
     -    '     Ideal value          ',7F6.1,F7.1,F8.1,F7.1,F8.1,F7.1,
     -    F9.1,/,
     -    '     Standard deviation   ',7F6.1,F7.1,F8.1,F7.1,F8.1,F7.1,
     -    F9.1,/,
     -    '                          ---------------------------------',
     -    '---------------------------------------------------------')
      ILINE = ILINE + 6

C---- Explanation of asterisks
      WRITE(7,200)
 200  FORMAT(//,
     -    'In the listing below, properties that deviate from these va',
     -    'lues are highlighted by asterisks and plus-signs. Each aste',
     -    'risk',/,
     -    'represents one standard deviation, and each plus-sign repre',
     -    'sents half a standard deviation. So, a highlight such as +*',
     -    '**, indicates',/,
     -    'that the value of the parameter is between 3.5 and 4.0 stan',
     -    'dard deviations from the ideal value shown above.',/)
      ILINE = ILINE + 6
      WRITE(7,220)
 220  FORMAT(
     -    'Where the deviation is greater than 4.5 standard deviations',
     -    ' its numerical value is shown; for example, *5.5*.',/)
      ILINE = ILINE + 2
      WRITE(7,240)
 240  FORMAT(
     -    'The final column gives the maximum deviation in each row, w',
     -    'hile the maximum column deviations are shown at the end of ',
     -    'the listing.',/,
     -    'Also at the end are the keys to the codes used for the seco',
     -    'ndary structure and Ramachandran plot assignments.',//)
      ILINE = ILINE + 4

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTOPT  -  Print the user-defined options for the current
C                        listing
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTOPT

      INCLUDE 'pplot.inc'


C---- Print options
      IF (ASTONL) THEN
          IF (STDLIM.EQ.0.0) THEN
              WRITE(7,100)
 100          FORMAT(
     -            'Asterisks-only print giving all standard ',
     -            'deviations. A single dot indicates values that ',
     -            'are less than one standard deviation from',/,
     -            'the ideal.',/)
          ELSE
              WRITE(7,200) STDLIM
 200          FORMAT(
     -            'Asterisks printed only for parameters which ',
     -            'differ from the ideal by more than ',F4.1,' ',
     -            'standard deviations. Other parameters are',/,
     -            'indicated by a single dot.',/)
          ENDIF
      ELSE
          IF (STDLIM.EQ.0.0) THEN
              WRITE(7,300)
 300          FORMAT(
     -            'Full print-out.',//)
          ELSE
              WRITE(7,400) STDLIM, STDLIM
 400          FORMAT(
     -            'The listing includes only parameters which ',
     -            'differ from the ideal by more than ',F4.1,' ',
     -            'standard deviations. Three dots appear ',/,
     -            'in place of all acceptable values (ie those ',
CHECK v.3.2-->
C     -            'not more than ', F4.1,' standard deviations '
     -            'not more than ', F4.1,' standard deviations ',
CHECK v.3.2<--
     -            'from the ideal',/)
          ENDIF
      ENDIF
      ILINE = ILINE + 3
      
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTDEV  -  Calculate number of standard deviations value is
C                        away from an ideal mean
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTDEV(VALUE,GLOBAL,STDEV,CHAVAL,MXDEVC,MXDEVR,
     -    AREC,APOS,NTYPE,STDLIM,ASTONL)

      CHARACTER*6   ASTER
      CHARACTER*(*) CHAVAL
      CHARACTER*(*) AREC
      INTEGER       APOS, IDEV, IVALUE, NTYPE
      LOGICAL       ASTONL
      REAL          DEV, GLOBAL, MXDEVC, MXDEVR, STDEV, STDLIM, VALUE

 
C---- Initialise values
      IF (ASTONL) THEN
          ASTER = '     .'
      ELSE
          ASTER = ' '
      ENDIF
      DEV = 0.0

C---- Write the given value into the character field
      IF (NTYPE.EQ.0) THEN
          IVALUE = VALUE + 0.5
          WRITE(CHAVAL,100) IVALUE
 100      FORMAT(I6)
      ELSE IF (NTYPE.EQ.1) THEN
          WRITE(CHAVAL,110) VALUE
 110      FORMAT(F6.1)
      ELSE IF (NTYPE.EQ.2) THEN
          WRITE(CHAVAL,120) VALUE
 120      FORMAT(F6.2)
      ELSE IF (NTYPE.EQ.3) THEN
          WRITE(CHAVAL,130) VALUE
 130      FORMAT(F6.3)
      ENDIF

C---- Calculate deviation from the ideal
      IF (STDEV.NE.0.0) THEN
          DEV = ABS((VALUE - GLOBAL) / STDEV)

C----     If the deviation is less than the user-defined minimum, treat
C         as though it's zero
          IF (DEV.LT.STDLIM) THEN
              DEV = 0.0
              IF (NTYPE.EQ.0) THEN
                  CHAVAL = '     .'
              ELSE
                  CHAVAL = '   ...'
              ENDIF
          ENDIF

C----     Determine the number of asterisks to print
          IDEV = DEV + 0.5
          IF (DEV.GE.1.0) ASTER = '     *'
          IF (DEV.GE.1.5) ASTER = '    +*'
          IF (DEV.GE.2.0) ASTER = '    **'
          IF (DEV.GE.2.5) ASTER = '   +**'
          IF (DEV.GE.3.0) ASTER = '   ***'
          IF (DEV.GE.3.5) ASTER = '  +***'
          IF (DEV.GE.4.0) ASTER = '  ****'
          IF (DEV.GE.4.5) THEN
              IF (IDEV.GT.99999) THEN
                  ASTER = 'XXXXXX'
              ELSE IF (IDEV.GT.9999) THEN
                  WRITE(ASTER,140) IDEV
 140              FORMAT(I5,'*')
              ELSE IF (IDEV.GT.999) THEN
                  WRITE(ASTER,150) IDEV
 150              FORMAT('*',I4,'*')
              ELSE IF (IDEV.GT.99) THEN
                  WRITE(ASTER,160) IDEV
 160              FORMAT(' *',I3,'*')
              ELSE IF (DEV.GT.9.0) THEN
                  WRITE(ASTER,180) DEV
 180              FORMAT('*',F4.1,'*')
              ELSE
                  WRITE(ASTER,200) DEV
 200              FORMAT(' *',F3.1,'*')
              ENDIF
          ENDIF

C----     Check whether this is the maximum deviation so far
          IF (DEV.GT.MXDEVR .AND. MXDEVR.LT.99999.0) THEN
              MXDEVR = DEV
              AREC(126:131) = ASTER
          ENDIF

C----     Repeat for current column value
          IF (DEV.GT.MXDEVC) THEN
              MXDEVC = DEV
          ENDIF

C----     Update the asterisks line
          AREC(APOS:APOS+5) = ASTER
      ENDIF

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE READNB  -  Read in records from the non-bonded interactions
C                        file for this residue and accumulate a count of
C                        the number of bad contacts
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE READNB(CHAIN,INCHN,SEQNO,NBAD,VWDIST)

      SAVE

      CHARACTER*1   CHAIN, INCHN, INCHN1
      CHARACTER*3   ATYPE1, ATYPE2
      CHARACTER*3   RESDU1, RESDU2
      CHARACTER*5   SEQNO, SEQNO1, SEQNO2
      INTEGER       IPOS, LINE, NBAD
      LOGICAL       BADYES, ENDFIL, NUMFND, READIN
      REAL          DIST, VWDIST

      DATA INCHN1 / ' ' /
      DATA ENDFIL / .FALSE. /
      DATA READIN / .TRUE. /
      DATA LINE   / 0 /
      DATA SEQNO1, SEQNO2 / 2*'     ' /

C---- Initialise variables
      IF (INCHN.EQ.'-') INCHN = ' '
      IF (SEQNO(5:5).EQ.'-') SEQNO(5:5) = ' '
      NBAD = 0

C---- Check that haven't previously encountered the end of file
      IF (ENDFIL) GO TO 999

C---- Loop until all records for this residue have been processed
 100  CONTINUE

C----     Read in the next record, if required
          IF (READIN) THEN
               READ(2,150,END=500,ERR=900) INCHN1, SEQNO1, RESDU1,
     -            ATYPE1, SEQNO2, RESDU2, ATYPE2, DIST
 150          FORMAT(4X,A1,6X,A5,A3,1X,A3,8X,A5,A3,1X,A3,1X,F4.0)
              IF (INCHN1.EQ.'-') INCHN1 = ' '
              IF (SEQNO1(5:5).EQ.'-') SEQNO1(5:5) = ' '

C----         Only consider this record if it belongs to the required
C             chain
              IF (CHAIN.NE.' ' .AND. INCHN1.NE.CHAIN) GO TO 100

C----         Strip off any leading zeros from sequence number
              NUMFND = .FALSE.
              DO 200, IPOS = 1, 4
                  IF (.NOT.NUMFND) THEN
                      IF (SEQNO1(IPOS:IPOS).EQ.'0') THEN
                          SEQNO1(IPOS:IPOS) = ' '
                      ELSE
                          NUMFND = .TRUE.
                      ENDIF
                  ENDIF
 200          CONTINUE
              LINE = LINE + 1
              READIN = .FALSE.
          ENDIF

C----     If this is the correct residue, process it and read in the
C         next one
          IF (INCHN1.EQ.INCHN .AND. SEQNO1.EQ.SEQNO) THEN
              CALL ISBAD(RESDU1,ATYPE1,RESDU2,ATYPE2,DIST,VWDIST,
     -            BADYES)
              IF (BADYES) NBAD = NBAD + 1
              READIN = .TRUE.

C----     Otherwise, drop out, keeping this record until the correct residue
C         comes along
          ELSE
              GO TO 999
          ENDIF
      GO TO 100

C---- End of file reached. Set flag
 500  CONTINUE
      ENDFIL = .TRUE.
      GO TO 999

C---- File error
 900  CONTINUE
      PRINT*, '*** ERROR. Error reading .nb file at line: ', LINE
      ENDFIL = .TRUE.
 
 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTEND  -  Print final totals on asterisks print
C
C----------------------------------------------------------------------+--- 

CHECK v.3.2-->
C      SUBROUTINE ASTEND(NCOLS,IPOS)
      SUBROUTINE ASTEND(NCOLS,IPOS,ITIME)
CHECK v.3.2<--

      INCLUDE 'pplot.inc'
 
      INTEGER       NCOLS

      CHARACTER*6   CHAVAL(MXCOLS)
      CHARACTER*132 AREC
CHECK v.3.2-->
C      INTEGER       ICOL, IPOS(NCOLS)
      INTEGER       ICOL, IPOS(NCOLS), ITIME
CHECK v.3.2<--
      REAL          DUMMY, MXDEVR

      DATA  DUMMY / 0.0 /

C---- Initialise variables
      MXDEVR = 0.0

C---- Convert maximum column deviations to asterisks
      AREC = 'Max deviations:'
      DO 50, ICOL = 1, NCOLS
          CHAVAL(ICOL) = ' '
          CALL ASTDEV(MXDEVC(ICOL),0.0,1.0,CHAVAL(ICOL),DUMMY,
     -        MXDEVR,AREC,IPOS(ICOL),1,STDLIM,ASTONL)
 50   CONTINUE

CHECK v.3.2-->
C---- Store the overall maximum deviation
      OMAXDV(ITIME) = MXDEVR
CHECK v.3.2<--

C---- Print the maximum deviation values in each column
      ILINE = ILINE + 1
      IF (ILINE.GE.NLINES) THEN
          CALL ASTHED
          WRITE(7,*)
      ELSE
          WRITE(7,100)
 100      FORMAT(131('-'))
      ENDIF
      ILINE = ILINE + 1
      IF (ILINE.GE.NLINES - 1) CALL ASTHED
      WRITE(7,110) AREC
 110  FORMAT(A,/,131('-'))
      ILINE = ILINE + 1

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTMEA  -  Print mean values for each parameter
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTMEA

      INCLUDE 'pplot.inc'
 
      CHARACTER*6   CHAVAL(MXCOLS), STDVAL(MXCOLS)
      CHARACTER*132 ADUMMY, AREC, IREC
      INTEGER       I, NBOTT
      REAL          DUMMY, MXDEVR

C---- Initialise variables
      AREC = ' '
      DO 10, I = 1, MXCOLS - 1
          CHAVAL(I) = '    - '
          STDVAL(I) = '    - '
 10   CONTINUE
      IREC = ' '
      DUMMY = 0.0
      MXDEVR = 0.0

C---- Chi-1 gauche minus torsion angle
      IF (NGMINU.GT.0) THEN
          CALL ASTDEV(GMIMEA,GLOBGM,SDEVGM,CHAVAL(2),MXDEVC(2),
     -        MXDEVR,AREC,27,1,0.0,.FALSE.)
          CALL ASTDEV(GMISTD,GLOBGM,0.0,STDVAL(2),MXDEVC(2),
     -        DUMMY,ADUMMY,27,1,0.0,.FALSE.)
      ENDIF

C---- Chi-1 trans torsion angle
      IF (NGTRAN.GT.0) THEN
          CALL ASTDEV(GTRMEA,GLOBGT,SDEVGT,CHAVAL(3),MXDEVC(3),
     -        MXDEVR,AREC,33,1,0.0,.FALSE.)
          CALL ASTDEV(GTRSTD,GLOBGT,0.0,STDVAL(3),MXDEVC(3),
     -        DUMMY,ADUMMY,33,1,0.0,.FALSE.)
      ENDIF

C---- Chi-1 gauche plus torsion angle
      IF (NGPLUS.GT.0) THEN
          CALL ASTDEV(GPLMEA-360.0,GLOBGP-360.0,SDEVGP,CHAVAL(4),
     -        MXDEVC(4), MXDEVR,AREC,39,1,0.0,.FALSE.)
          CALL ASTDEV(GPLSTD,GLOBGP,0.0,STDVAL(4),
     -        MXDEVC(4),DUMMY,ADUMMY,39,1,0.0,.FALSE.)
      ENDIF

C---- Chi-2 trans torsion angle
      IF (NCHI2.GT.0) THEN
          CALL ASTDEV(CH2MEA,GLOBC2,SDEVC2,CHAVAL(5),MXDEVC(5),
     -        MXDEVR,AREC,45,1,0.0,.FALSE.)
          CALL ASTDEV(CH2STD,GLOBC2,0.0,STDVAL(5),MXDEVC(5),
     -        DUMMY,ADUMMY,45,1,0.0,.FALSE.)
      ENDIF

C---- Proline phi
      IF (NPROPH.GT.0) THEN
          CALL ASTDEV(PPMEAN,GLOBPP,SDEVPP,CHAVAL(6),MXDEVC(6),
     -        MXDEVR,AREC,51,1,0.0,.FALSE.)
          CALL ASTDEV(PPSTD,GLOBPP,0.0,STDVAL(6),MXDEVC(6),
     -        DUMMY,ADUMMY,51,1,0.0,.FALSE.)
      ENDIF

C---- Phi helix
      IF (NPHIHX.GT.0) THEN
          CALL ASTDEV(PHMEAN,GLOBPH,SDEVPH,CHAVAL(7),MXDEVC(7),
     -        MXDEVR,AREC,57,1,0.0,.FALSE.)
          CALL ASTDEV(PHSTD,GLOBPH,0.0,STDVAL(7),MXDEVC(7),
     -        DUMMY,ADUMMY,57,1,0.0,.FALSE.)
      ENDIF

C---- Helix psi
      IF (NHXPSI.GT.0) THEN
          CALL ASTDEV(HPMEAN,GLOBHP,SDEVHP,CHAVAL(8),MXDEVC(8),
     -        MXDEVR,AREC,63,1,0.0,.FALSE.)
          CALL ASTDEV(HPSTD,GLOBHP,0.0,STDVAL(8),MXDEVC(8),
     -        DUMMY,ADUMMY,63,1,0.0,.FALSE.)
      ENDIF

C---- Chi-3 right-hand
      IF (NCHI3R.GT.0) THEN
          CALL ASTDEV(C3RMEA,GLOB3R,SDEV3R,CHAVAL(9),MXDEVC(9),
     -        MXDEVR,AREC,70,1,0.0,.FALSE.)
          CALL ASTDEV(C3RSTD,GLOB3R,0.0,STDVAL(9),MXDEVC(9),
     -        DUMMY,ADUMMY,70,1,0.0,.FALSE.)
      ENDIF

C---- Chi-3 left-hand
      IF (NCHI3L.GT.0) THEN
          CALL ASTDEV(C3LMEA,GLOB3L,SDEV3L,CHAVAL(10),MXDEVC(10),
     -        MXDEVR,AREC,78,1,0.0,.FALSE.)
          CALL ASTDEV(C3LSTD,GLOB3L,0.0,STDVAL(10),MXDEVC(10),
     -        DUMMY,ADUMMY,78,1,0.0,.FALSE.)
      ENDIF

C---- Disulphide bond
      IF (NDISUL.GT.0) THEN
          CALL ASTDEV(SSMEAN,GLOBSS,SDEVSS,CHAVAL(11),MXDEVC(11),
     -        MXDEVR,AREC,85,1,0.0,.FALSE.)
          CALL ASTDEV(SSSTD,GLOBSS,0.0,STDVAL(11),MXDEVC(11),
     -        DUMMY,ADUMMY,85,1,0.0,.FALSE.)
      ENDIF

C---- Omega dihedral angle
      IF (NOMEGA.GT.0) THEN
          CALL ASTDEV(OMMEAN,GLOBOM,SDEVOM,CHAVAL(12),MXDEVC(12),
     -        MXDEVR,AREC,93,1,0.0,.FALSE.)
          CALL ASTDEV(OMSTD,GLOBOM,0.0,STDVAL(12),MXDEVC(12),
     -        DUMMY,ADUMMY,93,1,0.0,.FALSE.)
      ENDIF

C---- Hydrogen bond energy mean and standard deviation
      IF (NHBOND.GT.0) THEN
          CALL ASTDEV(HBMEAN,GLOBHB,SDEVHB,CHAVAL(13),MXDEVC(13),
     -        MXDEVR,AREC,100,1,0.0,.FALSE.)
          CALL ASTDEV(HBSTD,GLOBHB,0.0,STDVAL(13),MXDEVC(13),
     -        DUMMY,ADUMMY,100,1,0.0,.FALSE.)
      ENDIF

C---- Alpha carbon chirality
      IF (NALPHC.GT.0) THEN
          CALL ASTDEV(ACMEAN,GLOBDH,SDEVDH,CHAVAL(14),MXDEVC(14),
     -        MXDEVR,AREC,109,1,0.0,.FALSE.)
          CALL ASTDEV(ACSTD,GLOBDH,0.0,STDVAL(14),MXDEVC(14),
     -        DUMMY,ADUMMY,109,1,0.0,.FALSE.)
      ENDIF

C---- See whether any cis-peptides or D-amino acids found
      NBOTT = 4
      IF (NCIS.GT.0) NBOTT = NBOTT + 2
      IF (NDAM.GT.0) NBOTT = NBOTT + 2

C---- Print the lines
      ILINE = ILINE + 1
      IF (ILINE.GE.NLINES - NBOTT) CALL ASTHED
      WRITE(7,610) (CHAVAL(I), I = 2, MXCOLS - 1)
 610  FORMAT('Mean values:              ',7A6,1X,A6,2X,A6,1X,
     -    A6,2X,A6,1X,A6,3X,A6)

C---- Print asterisks line if not blank
      IF (AREC.NE.' ') THEN
          ILINE = ILINE + 1
          WRITE(7,620) AREC
 620      FORMAT(A131)
      ENDIF

C---- Print the standard deviations
      ILINE = ILINE + 2
      WRITE(7,650) (STDVAL(I), I = 2, MXCOLS - 1)
 650  FORMAT('Standard deviations:      ',7A6,1X,A6,2X,A6,1X,
     -    A6,2X,A6,1X,A6,3X,A6,/)

C---- Print numbers of values
      WRITE(7,700) NGMINU, NGTRAN, NGPLUS, NCHI2, NPROPH, NPHIHX,
     -    NHXPSI, NCHI3R, NCHI3L, NDISUL, NOMEGA, NHBOND, NALPHC,
     -    NBADPR
 700  FORMAT('Numbers of values:        ',7I6,1X,I6,2X,I6,1X,
     -    I6,2X,I6,1X,I6,3X,I6,1X,I6)

C---- Print the numbers of cis-peptides and D-amino acids found, if any
      IF (NCIS.GT.0 .OR. NDAM.GT.0) WRITE(7,*)
      IF (NCIS.GT.0) THEN
          WRITE(7,720) NCIS
 720      FORMAT(/,40X,'Number of cis-peptides (labelled cis):  ',I6)
      ENDIF
      IF (NDAM.GT.0) THEN
          WRITE(7,740) NDAM
 740      FORMAT(/,40X,'Number of D-amino acids (labelled D>):  ',I6)
      ENDIF

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTKEY  -  Print Key to asterisks print-out and a summary of
C                        the statistics
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTKEY

      INCLUDE 'pplot.inc'
 
C---- Print the key to the codes used in the listing
      NPRINT = 0
      IF (ILINE.GE.NLINES - 20) CALL ASTHED
      WRITE(7,120)
 120  FORMAT(//,
     -    '   KEY TO CODES:',/,
     -    '   ------------',//,
     -    '         Regions of the Ramachandran plot                  ',
     -    '         Secondary structure (extended Kabsch/Sander)   ',/,
     -    '         --------------------------------                  ',
     -    '         --------------------------------------------   ',/)
      WRITE(7,140)
 140  FORMAT(
     -    '         A  - Core alpha                                   ',
     -    '         B - residue in isolated beta-bridge             ',/,
     -    '         a  - Allowed alpha                                ',
     -    '         E - extended strand, participates in beta-ladder',/,
     -    '         ~a - Generous alpha              ** Generous      ',
     -    '         G - 3-helix (3/10 helix)                        ',/,
     -    '         B  - Core beta                                    ',
     -    '         H - 4-helix (alpha-helix)                       ',/,
     -    '         b  - Allowed beta                                 ',
     -    '         I - 5-helix (pi-helix)                          ',/,
     -    '         ~b - Generous beta               ** Generous      ',
     -    '         S - bend                                        ')
      WRITE(7,160)
 160  FORMAT(
     -    '         L  - Core left-handed alpha                       ',
     -    '         T - hydrogen-bonded turn                        ',/,
     -    '         l  - Allowed left-handed alpha                    ',
     -    '                                                         ',/,
     -    '         ~l - Generous left-handed alpha  ** Generous      ',
     -    '         e - extension of beta-strand                    ',/,
     -    '         p  - Allowed epsilon                              ',
     -    '         g - extension of 3/10 helix                     ',/,
     -    '         ~p - Generous epsilon            ** Generous      ',
     -    '         h - extension of alpha-helix                    ',/,
     -    '         XX - Outside major areas       **** Disallowed    ',
     -    ///)
      ILINE = ILINE + 20

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTLAN  -  List the main-chain bond lengths and bond angles
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTLAN

      INCLUDE 'pplot.inc'
 
      INTEGER       NCOLS, NROWS
      PARAMETER    (NCOLS=12, NROWS=9)

      CHARACTER*1   AL(NMAIN), INCHN, CLOBRA(NCOLS,NROWS), OLDCHN,
     -              OPNBRA(NCOLS,NROWS)
      CHARACTER*3   OLDRES, RESNAM
      CHARACTER*5   OLDSEQ, SEQNO
      CHARACTER*6   CHAVAL(NCOLS), CHBVAL(NCOLS)
      CHARACTER*8   INLANG, LASTLA, LENANG(NMAIN)
      CHARACTER*13  ENCODE(NMAIN)
      CHARACTER*16  ADESC(NROWS), ENDESC(NMAIN), EXDESC(NROWS), INDESC
      CHARACTER*132 AREC, IREC
      INTEGER       COLPOS(NCOLS), I, ICOL, IFMT, IMAIN, IRESID, IROW,
     -              LINE, MAPPOS(NMAIN), SRESID
      REAL          DIFF, ENGMEA(NMAIN), ENGSTD(NMAIN),
     -              ENGTAB(2,NCOLS,NROWS), MXDEVR, SVAL(NMAIN),
     -              VALUE

      DATA COLPOS / 18, 26, 34, 42, 50, 59, 68, 77, 86, 95, 104, 113 /

      DATA ADESC  / 'Any             ',
     -              'Pro             ',
     -              'Except Pro      ',
     -              'Gly             ',
     -              'Except Gly      ',
     -              'Ala             ',
     -              'Ile,Thr,Val     ',
     -              'Except Gly,Pro  ',
     -              'The rest        ' /

      DATA EXDESC / '                ',
     -              '(Pro)           ',
     -              '(except Pro)    ',
     -              '(Gly)           ',
     -              '(except Gly)    ',
     -              '(Ala)           ',
     -              '(Ile,Thr,Val)   ',
     -              '(except Gly,Pro)',
     -              '(the rest)      ' /

      DATA MAPPOS /  7,  7,  7,
     -              12, 12,
     -               1,  1,
     -               2,
     -               3,  3,
     -               4,  4,  4,
     -               5,  5,  5,
     -               6,  6,  6,
     -               8,  8,
     -               9,  9,  9,
     -              10, 10, 10,
     -              11, 11, 11, 11 /

C---- Initialise variables
      AREC = ' '
      LASTLA = ' '
      LINE = 0
CHECK v.3.2-->
      MXDEVR = 0.0
CHECK v.3.2<--
      NPRINT = 0
      OLDCHN = ' '
      OLDRES = ' '
      OLDSEQ = ' '
      SRESID = 0
      IREC = ' '
      DO 20, IMAIN = 1, NMAIN
          SVAL(IMAIN) = 0.0
 20   CONTINUE
      DO 50, ICOL = 1, NCOLS
          MXDEVC(ICOL) = 0.0
          DO 40, IROW = 1, NROWS
              CLOBRA(ICOL,IROW) = ' '
              OPNBRA(ICOL,IROW) = ' '
              ENGTAB(1,ICOL,IROW) = 0.0
              ENGTAB(2,ICOL,IROW) = 0.0
 40       CONTINUE
 50   CONTINUE
      CALL ASTHED
      NPRINT = 2

C---- Print headings for ideal values table, if required
      IF (HEADIN) THEN
          WRITE(7,100)
 100      FORMAT(//,
     -        '                          M A I N   C H A I N   B O N D',
     -        '   L E N G T H S   A N D   B O N D   A N G L E S')
          ILINE = ILINE + 3

          WRITE(7,110)
 110      FORMAT(//,
     -        18X,'..................................... Small molecu',
     -            'le data .........................................',
     -        //,
     -        18X,'<---------- Bond lengths ---------->    <---------',
     -            '------------- Bond angles ---------------------->',
     -        //,
     -        18X,'C-N     C-O     CA-C    CA-CB   N-CA    C-N-CA   C',
     -            'A-C-N   CA-C-O  CB-CA-C   N-CA-C  N-CA-CB   O-C-N',
     -        /,
     -        18X,'--------------------------------------------------',
     -            '-------------------------------------------------')
          ILINE = ILINE + 8
      ENDIF

C---- Rewind the main-chain bond-lengths and angles file
      REWIND(4)

C---- Read through the header records and pick up the small-molecule
C     data
      DO 300, IMAIN = 1, NMAIN
          READ(4,130,ERR=904) AL(IMAIN), INLANG, ENCODE(IMAIN),
     -        INDESC, ENGMEA(IMAIN), ENGSTD(IMAIN)
 130      FORMAT(A1,1X,A8,6X,A13,4X,A16,2F8.3)
          ENDESC(IMAIN) = INDESC

C----     Work out where to put these values in the table
          ICOL = MAPPOS(IMAIN)
          DO 200, I = 1, NROWS
              IF (INDESC.EQ.EXDESC(I)) IROW = I
 200      CONTINUE
          ENGTAB(1,ICOL,IROW) = ENGMEA(IMAIN)
          ENGTAB(2,ICOL,IROW) = ENGSTD(IMAIN)
          CLOBRA(ICOL,IROW) = ')'
          OPNBRA(ICOL,IROW) = '('
          IF (INLANG.EQ.LASTLA) THEN
              LENANG(IMAIN) = ' '
          ELSE
              LENANG(IMAIN) = INLANG
          ENDIF
          LASTLA = INLANG
 300  CONTINUE

C---- Skip all the records giving data on the planar groups
      DO 305, IMAIN = 1, NPLANE
          READ(4,*)
 305   CONTINUE

C---- Print the small-molecule means and standard deviations

C---- Loop through the rows and columns
      DO 400, IROW = 1, NROWS
          DO 310, I = 1, NCOLS
              CHAVAL(I) = '   -  '
              CHBVAL(I) = '      '
 310      CONTINUE
          DO 350, ICOL = 1, NCOLS
              IF (ICOL.LE.5) THEN
                  IFMT = 3
              ELSE
                  IFMT = 2
              ENDIF
              IF (ENGTAB(1,ICOL,IROW).NE.0.0) THEN
                  CALL ASTDEV(ENGTAB(1,ICOL,IROW),0.0,1.0,
     -                CHAVAL(ICOL),MXDEVC(ICOL),MXDEVR,AREC,
     -                COLPOS(ICOL),IFMT,0.0,.FALSE.)
                  CALL ASTDEV(ENGTAB(2,ICOL,IROW),0.0,1.0,
     -                CHBVAL(ICOL),MXDEVC(ICOL),MXDEVR,AREC,
     -                COLPOS(ICOL),IFMT,0.0,.FALSE.)
              ENDIF
 350      CONTINUE

C----     Print the row of means and standard deviations
          IF (HEADIN) THEN
              WRITE(7,370) ADESC(IROW), (CHAVAL(ICOL), ICOL = 1, NCOLS)
 370          FORMAT(A16,5(1X,A6,1X),7(2X,A6,1X))
              WRITE(7,380) '   ', (OPNBRA(ICOL,IROW), CHBVAL(ICOL),
     -            CLOBRA(ICOL,IROW), ICOL = 1, NCOLS)
 380          FORMAT(A16,5(A1,A6,A1),7(1X,A1,A6,A1))
              ILINE = ILINE + 2
          ENDIF
 400  CONTINUE

C---- Print explanatory note
      IF (HEADIN) THEN
          WRITE(7,410)
 410      FORMAT(/,
     -        'Note. The table above shows the mean values obtained ',
     -        'from small molecule data by Engh & Huber (1991). Th',
     -        'e values shown in brackets',/,
     -        '      are standard deviations')
          ILINE = ILINE + 3
      ENDIF

C---- Print column headings
      CALL COLHD2

C---- Re-initialise values
      DO 450, ICOL = 1, NCOLS
          MXDEVC(ICOL) = 0.0
 450  CONTINUE

C---- Loop while reading in records
 500  CONTINUE
          READ(4,520,END=800,ERR=904) IREC
 520      FORMAT(A)
          LINE = LINE + 1

C----     Only process this record if it is not a planar group
          IF (IREC(29:33).NE.'PLANE') THEN

C----         Read in the required data
              READ(IREC,540,ERR=906) IRESID, INCHN, SEQNO, RESNAM,
     -            IMAIN, VALUE
 540          FORMAT(I6,A1,A5,A3,I2,F9.4)

C----         Only process this record if it belongs to the required chain
              IF (CHAIN.EQ.' ' .OR. INCHN.EQ.CHAIN) THEN

C----             Accumulate data for calc of standard deviations
                  DIFF = MCHMEA(IMAIN) - VALUE
                  MCHSTD(IMAIN) = MCHSTD(IMAIN) + DIFF * DIFF

C----             If residue has changed, then print line for last residue
                  IF (SRESID.GT.0 .AND. IRESID.NE.SRESID) THEN
                      CALL LANPRN(SRESID,OLDRES,OLDCHN,OLDSEQ,SVAL,
     -                    ENGMEA,ENGSTD,NCOLS,COLPOS,MAPPOS)

C----                 Reinitialise stored values
                      DO 600, I = 1, NMAIN
                          SVAL(I) = 0.0
 600                  CONTINUE
                  ENDIF

C----             Store current value
                  OLDCHN = INCHN
                  OLDRES = RESNAM
                  OLDSEQ = SEQNO
                  SVAL(IMAIN) = VALUE
                  SRESID = IRESID
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 500

C---- End of file reached
 800  CONTINUE

C---- Print final residue
      IF (SRESID.GT.0) THEN
          CALL LANPRN(SRESID,OLDRES,OLDCHN,OLDSEQ,SVAL,ENGMEA,ENGSTD,
     -            NCOLS,COLPOS,MAPPOS)
      ENDIF

C---- Print column deviations
CHECK v.3.2-->
C      CALL ASTEND(NCOLS,COLPOS)
      CALL ASTEND(NCOLS,COLPOS,2)
CHECK v.3.2<--

C---- Calculate standard deviations
      DO 850, IMAIN = 1, NMAIN
          IF (MCHNUM(IMAIN).GT.0) THEN
              MCHSTD(IMAIN) = MCHSTD(IMAIN) / REAL(MCHNUM(IMAIN))
              MCHSTD(IMAIN) = SQRT(MCHSTD(IMAIN))
          ENDIF
 850  CONTINUE

C---- Print analysis of main-chain bond lengths and bond angles
      CALL ASTBLA(AL,LENANG,ENCODE,ENDESC,ENGMEA,ENGSTD)

      GO TO 999
 
C---- Fatal errors
 904  CONTINUE
      PRINT*, '*** ERROR. Error reading .lan file at line:', LINE + 1
      GO TO 990
 
 906  CONTINUE
      PRINT*, '*** ERROR. Data error in .lan file at line:', LINE + 1
      PRINT*, IREC

 990  CONTINUE
      IFAIL = .TRUE.

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE LANPRN  -  Print current line of bond lengths and angles
C                        listing
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE LANPRN(SRESID,RESDUE,INCHN,SEQNO,SVAL,ENGMEA,ENGSTD,
     -            NCOLS,COLPOS,MAPPOS)

      INCLUDE 'pplot.inc'

      INTEGER       NCOLS
 
      CHARACTER*1   INCHN, REGION
      CHARACTER*3   RESDUE
      CHARACTER*5   SEQNO
      CHARACTER*6   CHAVAL(MXCOLS)
      CHARACTER*132 AREC, IREC
      INTEGER       COLPOS(NCOLS), I, ICOL, IFMT, IMAIN, MAPPOS(NMAIN),
     -              SRESID
      REAL          ENGMEA(NMAIN), ENGSTD(NMAIN), MXDEVR, SVAL(NMAIN)

C---- Initialise variables
      AREC = ' '
      DO 10, I = 1, NCOLS
          CHAVAL(I) = '   -  '
 10   CONTINUE
      CHAVAL(NCOLS + 1) = '     -'
      IREC = ' '
      MXDEVR = 0.0
      REGION = '-'

C---- Loop through all the stored values
      DO 500, IMAIN = 1, NMAIN
          ICOL = MAPPOS(IMAIN)
          IF (ICOL.LE.5) THEN
              IFMT = 3
          ELSE
              IFMT = 2
          ENDIF
          IF (SVAL(IMAIN).NE.0.0) THEN
              CALL ASTDEV(SVAL(IMAIN),ENGMEA(IMAIN),ENGSTD(IMAIN),
     -            CHAVAL(ICOL),MXDEVC(ICOL),MXDEVR,AREC,
     -            COLPOS(ICOL),IFMT,STDLIM,ASTONL)
          ENDIF
 500  CONTINUE

C---- Print the lines

C---- If printing all residues, or only the highlighted ones and the deviation
C     is above the minimum required, then print
      IF (.NOT.ONLYHI .OR. MXDEVR.GT.0.0) THEN

C----     If only printing the asterisks line, transfer residue info to
C         start of the line
          IF (ASTONL) THEN
              WRITE(AREC(1:14),320) SRESID, INCHN, RESDUE, SEQNO
 320          FORMAT(I4,A1,1X,A3,A5,1X,5(2X,A6),7(3X,A6))

C----     Otherwise, print the line holding the information
          ELSE
              ILINE = ILINE + 1
              IF (AREC.NE.' ') THEN
                  IF (ILINE.GE.NLINES - 1) THEN
                      CALL ASTHED
                  ENDIF
              ELSE
                  IF (ILINE.GE.NLINES) THEN
                      CALL ASTHED
                  ENDIF
              ENDIF
              WRITE(7,320) SRESID, INCHN, RESDUE, SEQNO,
     -            (CHAVAL(I), I = 1, NCOLS)
          ENDIF

C----     Print asterisks line if not blank
          IF (AREC.NE.' ') THEN
              ILINE = ILINE + 1
              IF (ILINE.GE.NLINES) CALL ASTHED
              WRITE(7,620) AREC
 620          FORMAT(A131)
          ENDIF
      ENDIF

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTBLA  -  Print analysis of main-chain bond length and
C                        bond angles
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTBLA(AL,LENANG,ENCODE,EXDESC,ENGMEA,ENGSTD)

      INCLUDE 'pplot.inc'

      CHARACTER*1   AL(NMAIN)
      CHARACTER*6   ANGLEN, CHAVAL(3)
      CHARACTER*8   BREC, LENANG(NMAIN)
      CHARACTER*13  ENCODE(NMAIN)
      CHARACTER*16  EXDESC(NMAIN)
      CHARACTER*132 AREC
      INTEGER       I, IMAIN
      REAL          ENGMEA(NMAIN), ENGSTD(NMAIN), MXDEVR

C---- Print main heading for the analysis print
      MXDEVR = 999999.99
      NPRINT = 0
      CALL ASTHED
      WRITE(7,100)
 100  FORMAT(//,
     -    10X,'    A N A L Y S I S   O F   M A I N   C H A I N   B O ',
     -        'N D   L E N G T H S   A N D   B O N D   A N G L E S')
      ILINE = ILINE + 3

C---- Print subheading for bond-lengths analysis
      WRITE(7,200)
 200  FORMAT(//,
     -    10X,'                                             +--------',
     -    '----------+',/,
     -    10X,'                                             |   BOND ',
     -    'LENGTHS   |',/,
     -    10X,'                                             +--------',
     -    '----------+')
      ILINE = ILINE + 5

C---- Print column headings
      ANGLEN = 'Bond  '
      WRITE(7,300) ANGLEN
 300  FORMAT(/,
     -    10X,'------------------------------------------------------',
     -    '-------------------------------------------------------',/,
     -    10X,'                                       (Small molecule',
     -    ' data)   Number of  Min     Max       Mean    Standard ',/,
     -    10X,A6,'    X-PLOR labelling                  Mean  St. ',
     -    'dev       values   value   value      value   deviation',/,
     -    10X,'------------------------------------------------------',
     -    '-------------------------------------------------------')
      ILINE = ILINE + 5

C---- Loop through the main-chain bond lengths
      DO 500, IMAIN = 1, NMAIN
          IF (AL(IMAIN).EQ.'L') THEN

C----         Calculate asterisks on min, max, and mean
              AREC = ' '
              CHAVAL(1) = '  -   '
              CHAVAL(2) = '  -   '
              CHAVAL(3) = '  -   '
              IF (MCHNUM(IMAIN).NE.0) THEN
                  CALL ASTDEV(MCHMIN(IMAIN),ENGMEA(IMAIN),
     -                ENGSTD(IMAIN),CHAVAL(1),MXDEVC(1),MXDEVR,
     -                AREC,83,3,0.0,.FALSE.)
                  CALL ASTDEV(MCHMAX(IMAIN),ENGMEA(IMAIN),
     -                ENGSTD(IMAIN),CHAVAL(2),MXDEVC(2),MXDEVR,
     -                AREC,91,3,0.0,.FALSE.)
                  CALL ASTDEV(MCHMEA(IMAIN),ENGMEA(IMAIN),
     -                ENGSTD(IMAIN),CHAVAL(3),MXDEVC(3),MXDEVR,
     -                AREC,102,3,0.0,.FALSE.)
                  WRITE(BREC,310) MCHSTD(IMAIN)
 310              FORMAT(F8.3)
              ELSE
                  BREC = '    -   '
              ENDIF
              IF (ILINE.GT.NLINES - 2) THEN
                  CALL ASTHED
                  WRITE(7,300) ANGLEN
                  ILINE = ILINE + 5
              ENDIF
              WRITE(7,320) LENANG(IMAIN), ENCODE(IMAIN), EXDESC(IMAIN),
     -            ENGMEA(IMAIN), ENGSTD(IMAIN),
     -            MCHNUM(IMAIN), (CHAVAL(I), I = 1, 3), BREC
 320          FORMAT(10X,A8,2X,A13,4X,A16,F5.3,F8.3,7X,I6,3X,A6,2X,
     -            A6,6X,A6,2X,A8)
              ILINE = ILINE + 1
              IF (AREC.NE.' ') THEN
                  WRITE(7,330) AREC
 330              FORMAT(A131)
                  ILINE = ILINE + 1
              ENDIF
          ENDIF
 500  CONTINUE

C---- Print bottom line
      WRITE(7,520)
 520  FORMAT(
     -    10X,'------------------------------------------------------',
     -    '-------------------------------------------------------')
      ILINE = ILINE + 1

C---- Print subheading for bond-angles analysis
      IF (ILINE.GT.NLINES - 14 - MCHANG) CALL ASTHED
      WRITE(7,600)
 600  FORMAT(//,
     -    10X,'                                             +--------',
     -    '---------+',/,
     -    10X,'                                             |   BOND ',
     -    'ANGLES   |',/,
     -    10X,'                                             +--------',
     -    '---------+')
      ILINE = ILINE + 5
      ANGLEN = 'Angle '
      WRITE(7,300) ANGLEN
      ILINE = ILINE + 5

C---- Loop through the main-chain bond angless
      DO 800, IMAIN = 1, NMAIN
          IF (AL(IMAIN).EQ.'A') THEN

C----         Calculate asterisks on min, max, and mean
              AREC = ' '
              CHAVAL(1) = '  -   '
              CHAVAL(2) = '  -   '
              CHAVAL(3) = '  -   '
              IF (MCHNUM(IMAIN).NE.0) THEN
                  CALL ASTDEV(MCHMIN(IMAIN),ENGMEA(IMAIN),
     -                ENGSTD(IMAIN),CHAVAL(1),MXDEVC(1),MXDEVR,
     -                AREC,83,2,0.0,.FALSE.)
                  CALL ASTDEV(MCHMAX(IMAIN),ENGMEA(IMAIN),
     -                ENGSTD(IMAIN),CHAVAL(2),MXDEVC(2),MXDEVR,
     -                AREC,91,2,0.0,.FALSE.)
                  CALL ASTDEV(MCHMEA(IMAIN),ENGMEA(IMAIN),
     -                ENGSTD(IMAIN),CHAVAL(3),MXDEVC(3),MXDEVR,
     -                AREC,102,2,0.0,.FALSE.)
                  WRITE(BREC,610) MCHSTD(IMAIN)
 610              FORMAT(F8.2)
              ELSE
                  BREC = '    -   '
              ENDIF
              IF (ILINE.GT.NLINES - 2) THEN
                  CALL ASTHED
                  WRITE(7,300) ANGLEN
                  ILINE = ILINE + 5
              ENDIF
              WRITE(7,620) LENANG(IMAIN), ENCODE(IMAIN), EXDESC(IMAIN),
     -            ENGMEA(IMAIN), ENGSTD(IMAIN),
     -            MCHNUM(IMAIN), (CHAVAL(I), I = 1, 3), BREC
 620          FORMAT(10X,A8,2X,A13,4X,A16,F5.1,F8.1,7X,I6,3X,A6,2X,
     -            A6,6X,A6,2X,A8)
              ILINE = ILINE + 1
              IF (AREC.NE.' ') THEN
                  WRITE(7,330) AREC
                  ILINE = ILINE + 1
              ENDIF
          ENDIF
 800  CONTINUE

C---- Print bottom line
      WRITE(7,520)

C---- Print explanatory text at end
      WRITE(7,900)
 900  FORMAT(/,
     -    'The small molecule data used in the above analysis is from',
     -    ' Engh & Huber (1991). The atom labelling follows that used',
     -    ' in the',/,
     -    'X-PLOR dictionary, with some additional atoms (marked with',
     -    ' an asterisk) as defined by Engh & Huber.')
      ILINE = ILINE + 3

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTBAD  -  List the bad contacts
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTBAD

      INCLUDE 'pplot.inc'
 
      CHARACTER*1   INCHN1, INCHN2, KABS1, KABS2, MS1, MS2
      CHARACTER*3   RESDU1, RESDU2
      CHARACTER*4   ATYPE1, ATYPE2
      CHARACTER*5   SEQNO1, SEQNO2
      CHARACTER*9   CTYPE
      INTEGER       IPOS, LINE, NBADC
      LOGICAL       BADYES, NUMFND
      REAL          DIST


C---- Initialise variables
      ILINE = NLINES
      LINE = 0
      NBADC = 0
      NPRINT = 3

C---- Rewind the non-bonded contacts file
      REWIND(2)

C---- Read in next record
 100  CONTINUE
          READ(2,150,END=500,ERR=900) INCHN1, SEQNO1, RESDU1,
     -        ATYPE1, KABS1, INCHN2, SEQNO2, RESDU2, ATYPE2,
     -        KABS2, DIST, MS1, MS2
 150      FORMAT(10X,A1,A5,A3,A4,A1,6X,A1,A5,A3,A4,A1,F4.0,1X,2A1)
          LINE = LINE + 1

C----     Only process this residue if it belongs to the required chain
          IF (CHAIN.EQ.' ' .OR. INCHN1.EQ.CHAIN .OR.
     -        INCHN2.EQ.CHAIN) THEN

C----         Check distance
              CALL ISBAD(RESDU1,ATYPE1(2:4),RESDU2,ATYPE2(2:4),DIST,
     -            VWDIST,BADYES)
              IF (BADYES) THEN
                  NBADC = NBADC + 1

C----             Print this contact
                  CTYPE = ' Het-Het '
                  IF (INCHN1.EQ.'-') INCHN1 = ' '
                  IF (INCHN2.EQ.'-') INCHN2 = ' '
                  IF (SEQNO1(5:5).EQ.'-') SEQNO1(5:5) = ' '
                  IF (SEQNO2(5:5).EQ.'-') SEQNO2(5:5) = ' '
                  IF (MS1.EQ.'M') CTYPE(1:4) = 'Main'
                  IF (MS1.EQ.'S') CTYPE(1:4) = 'Side'
                  IF (MS2.EQ.'M') CTYPE(6:9) = 'Main'
                  IF (MS2.EQ.'S') CTYPE(6:9) = 'Side'
                  ILINE = ILINE + 1
                  IF (ILINE.GE.NLINES) CALL ASTHED

C----             Strip off any leading zeros from sequence numbers
                  NUMFND = .FALSE.
                  DO 160, IPOS = 1, 4
                      IF (.NOT.NUMFND) THEN
                          IF (SEQNO1(IPOS:IPOS).EQ.'0') THEN
                              SEQNO1(IPOS:IPOS) = ' '
                          ELSE
                              NUMFND = .TRUE.
                          ENDIF
                      ENDIF
 160              CONTINUE
                  NUMFND = .FALSE.
                  DO 180, IPOS = 1, 4
                      IF (.NOT.NUMFND) THEN
                          IF (SEQNO2(IPOS:IPOS).EQ.'0') THEN
                              SEQNO2(IPOS:IPOS) = ' '
                          ELSE
                              NUMFND = .TRUE.
                          ENDIF
                      ENDIF
 180              CONTINUE

C----             Write to .out file
                  WRITE(7,200) NBADC, SEQNO1, INCHN1, RESDU1, ATYPE1,
     -                SEQNO2, INCHN2, RESDU2, ATYPE2, CTYPE, DIST
 200              FORMAT(20X,I6,'.',3X,A5,1X,A1,1X,A3,3X,A4,'  --> ',
     -                A5,1X,A1,1X,A3,3X,A4,6X,A9,4X,F6.1)

CHECK v.3.5.2-->
C----             Write bad contact to the RasMol script file
C                  WRITE(
CHECK v.3.5.2<--
              ENDIF
          ENDIF

C---- Loop back for next record in file
      GO TO 100

C---- End of file reached
 500  CONTINUE

      GO TO 999
 
C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Error reading .nb file at line:', LINE + 1

 999  CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE ASTATS  -  Print summary of statistics given on plots
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE ASTATS

      INCLUDE 'pplot.inc'

      CHARACTER*7   INOUT
      INTEGER       NGRAPH, NTOTAL
      LOGICAL       REVERS
      REAL          BANDS, CMPVAL, ENDSPC, GLYPC, NONPGP, PROPC, TOTALP

C---- Initialise values
      NTOTAL = NCORE + NALLOW + NGENER + NOUTSI + NGLY + NPRO + NENDCH
      ENDSPC = 100.0 * REAL(NENDCH) / REAL(NRESID)
      GLYPC = 100.0 * REAL(NGLY) / REAL(NRESID)
      NONPGP = 100.0 * REAL(NONPG) / REAL(NRESID)
      PROPC = 100.0 * REAL(NPRO) / REAL(NRESID)
      TOTALP = 100.0 * REAL(NTOTAL) / REAL(NRESID)

C---- Start a new page
      NPRINT = 0
      CALL ASTHED

C---- Ramachandran plot statistics
      WRITE(7,100)
 100  FORMAT(//,
     -    37X,'R A M A C H A N D R A N   P L O T   S T A T I S ',
     -    'T I C S',/)
      ILINE = ILINE + 4
      WRITE(7,120) NCORE, COREPC, NALLOW, ALLOWP, NGENER, GENERP,
     -    NOUTSI, OUTSIP
 120  FORMAT(
     -    29X,'Residues in most favoured regions      [A,B,L]       ',
     -    I6,6X,F5.1,'%',/,
     -    29X,'Residues in additional allowed regions [a,b,l,p]     ',
     -    I6,6X,F5.1,'%',/,
     -    29X,'Residues in generously allowed regions [~a,~b,~l,~p] ',
     -    I6,6X,F5.1,'%',/,
     -    29X,'Residues in disallowed regions         [XX]          ',
     -    I6,6X,F5.1,'%',/,
     -    84X,'----',6X,'------')
      ILINE = ILINE + 5
      WRITE(7,140) NONPG, 100.0, NENDCH, NGLY, NPRO, NTOTAL
 140  FORMAT(
     -    29X,'Number of non-glycine and non-proline residues       ',
     -    I6,6X,F5.1,'%',//,
     -    29X,'Number of end-residues (excl. Gly and Pro)           ',
     -    I6,//,
     -    29X,'Number of glycine residues                           ',
     -    I6,/,
     -    29X,'Number of proline residues                           ',
     -    I6,/,
     -    84X,'----',/,
     -    29X,'Total number of residues                             ',
     -    I6,//)
      ILINE = ILINE + 10
      WRITE(7,160)
 160  FORMAT(
     -    '   Based on the analysis of 118 structures of resolution ',
     -    'of at least 2.0 Angstroms and R-factor no greater than 20',
     -    '%, a good',/,
     -    '   quality model would be expected to have over 90% in th',
     -    'e most favoured regions [E,H,L].')
      ILINE = ILINE + 2

C---- Stereochemistry of main-chain statistics
      IF (ILINE.GE.NLINES - 18) CALL ASTHED
      WRITE(7,200)
 200  FORMAT(//,
     -    32X,'S T E R E O C H E M I S T R Y   O F   M A I N ',
     -    '- C H A I N',/)
      ILINE = ILINE + 4
      WRITE(7,220)
 220  FORMAT(
     -    22X,'                                                Compar',
     -    'ison values    No. of   ',/,
     -    22X,'                             No. of   Parameter  Typic',
     -    'al   Band    band widths',/,
     -    22X,'Stereochemical parameter    data pts    value     valu',
     -    'e    width    from mean ',/,
     -    22X,'------------------------    --------    -----     ----',
     -    '-    -----    --------- ')
      ILINE = ILINE + 4

C---- Calculate differences from comparison values
      DO 300, NGRAPH = 1, 6
          IF (NGRAPH.EQ.1 .OR. NGRAPH.EQ.6) THEN
              REVERS = .TRUE.
          ELSE
              REVERS = .FALSE.
          ENDIF
          CALL BANDIS(0.0,COEFF(3,NGRAPH),COEFF(2,NGRAPH),
     -        COEFF(1,NGRAPH),RESOL,SVALUE(NGRAPH),CMPVAL,
     -        YBAND(NGRAPH),BANDS,INOUT,REVERS)
          WRITE(7,240) DESC(NGRAPH), NVALUE(NGRAPH), SVALUE(NGRAPH),
     -        CMPVAL, YBAND(NGRAPH), BANDS, INOUT
 240      FORMAT(19X,A30,I6,4X,F8.1,2X,F8.1,F8.1,3X,F8.1,3X,A)
 300  CONTINUE
      ILINE = ILINE + 5

C---- Stereochemistry of side-chain statistics
      IF (ILINE.GE.NLINES - 18) CALL ASTHED
      WRITE(7,400)
 400  FORMAT(//,
     -    32X,'S T E R E O C H E M I S T R Y   O F   S I D E ',
     -    '- C H A I N',/)
      ILINE = ILINE + 4
      WRITE(7,220)
      ILINE = ILINE + 4

C---- Calculate differences from comparison values
      DO 500, NGRAPH = 7, 11
          REVERS = .FALSE.
          CALL BANDIS(0.0,COEFF(3,NGRAPH),COEFF(2,NGRAPH),
     -        COEFF(1,NGRAPH),RESOL,SVALUE(NGRAPH),CMPVAL,
     -        YBAND(NGRAPH),BANDS,INOUT,REVERS)
          WRITE(7,240) DESC(NGRAPH), NVALUE(NGRAPH), SVALUE(NGRAPH),
     -        CMPVAL, YBAND(NGRAPH), BANDS, INOUT
 500  CONTINUE
      ILINE = ILINE + 5

      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.3.2-->
C**************************************************************************
C
C  SUBROUTINE HSTATS  -  Print summary of statistics in html format
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE HSTATS

      INCLUDE 'pplot.inc'

      CHARACTER*10  ASTALL, ASTCOR, ASTGEN, ASTOUT
      INTEGER       NTOTAL
      REAL          ENDSPC, GLYPC, NONPGP, PROPC, TOTALP

C---- Initialise values
      NTOTAL = NCORE + NALLOW + NGENER + NOUTSI + NGLY + NPRO + NENDCH
      ENDSPC = 100.0 * REAL(NENDCH) / REAL(NRESID)
      GLYPC = 100.0 * REAL(NGLY) / REAL(NRESID)
      NONPGP = 100.0 * REAL(NONPG) / REAL(NRESID)
      PROPC = 100.0 * REAL(NPRO) / REAL(NRESID)
      TOTALP = 100.0 * REAL(NTOTAL) / REAL(NRESID)

C---- Determine how serious any of the percentages are
      ASTALL = ' '
      ASTCOR = ' '
      ASTGEN = ' '
      ASTOUT = ' '
      IF (COREPC.LE.80.0) THEN
          ASTCOR = '<b>**</b>'
      ELSE IF (COREPC.LE.90.0) THEN
          ASTCOR = '<b>*</b>'
      ENDIF
      IF (OUTSIP.GE.5.0) THEN
          ASTOUT = '<b>**</b>'
      ELSE IF (OUTSIP.GT.0.0) THEN
          ASTOUT = '<b>*</b>'
      ENDIF

C---- Ramachandran plot statistics
      WRITE(15,100)
 100  FORMAT(//,'<h2>1. Ramachandran Plot statistics</h2>')
      WRITE(15,110) '<pre><b>'
 110  FORMAT(10A)
      WRITE(15,115)
 115  FORMAT('                                         No. of',/,
     -       '                                        residues     ',
     -    '%-tage',/,
     -       '                                         ------      ',
     -    '------</b>')
      WRITE(15,120) NCORE, COREPC, ASTCOR, NALLOW, ALLOWP, ASTALL,
     -    NGENER, GENERP, ASTGEN, NOUTSI, OUTSIP, ASTOUT
 120  FORMAT('Most favoured regions      [A,B,L]       ',
     -    I6,6X,F5.1,'%',A,/,
     -       'Additional allowed regions [a,b,l,p]     ',
     -    I6,6X,F5.1,'%',A,/,
     -       'Generously allowed regions [~a,~b,~l,~p] ',
     -    I6,6X,F5.1,'%',A,/,
     -       'Disallowed regions         [XX]          ',
     -    I6,6X,F5.1,'%',A,/,
     -    43X,'----',6X,'------')
      WRITE(15,140) NONPG, 100.0, NENDCH, NGLY, NPRO, NTOTAL
 140  FORMAT('Non-glycine and non-proline residues     ',
     -    I6,6X,F5.1,'%',//,
     -       'End-residues (excl. Gly and Pro)         ',
     -    I6,//,
     -       'Glycine residues                         ',
     -    I6,/,
     -       'Proline residues                         ',
     -    I6,/,
     -    43X,'----',/,
     -       'Total number of residues                 ',
     -    I6,//)
      WRITE(15,110) '</pre>'
      WRITE(15,160)
 160  FORMAT('<p>',
     -    'Based on an analysis of <b>118</b> structures of resolu',
     -    'tion of at least <b>2.0</b> Angstroms and <em>R</em>-fac',
     -    'tor no greater than <b>20.0</b> a good',/,
     -    'quality model would be expected to have over <b>90%</b> ',
     -    'in the most favoured regions [A,B,L].')
      WRITE(15,110) '<hr>'

      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.3.2<--
C**************************************************************************
C
C  SUBROUTINE BANDIS  -  Calculate number of band-widths current
C                        stereochemical parameter is from the expected
C                        value
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE BANDIS(A3,A2,A1,C,XVALUE,YVALUE,CMPVAL,BWIDTH,BANDS,
     -    INOUT,REVERS)

      INCLUDE 'pplot.inc'

      CHARACTER*7   INOUT
      LOGICAL       REVERS
      REAL          A1, A2, A3, BANDS, BWIDTH, C, CMPVAL, DIFF,
     -              XVALUE, YVALUE


C---- Calculate the comparison value, difference, and number of bands
C     difference
      CMPVAL = A3 * XVALUE * XVALUE * XVALUE
     -    + A2 * XVALUE * XVALUE
     -    + A1 * XVALUE + C
      DIFF = YVALUE - CMPVAL
      BANDS = DIFF / BWIDTH
      IF (REVERS) BANDS = -1.0 * BANDS
      IF (BANDS.GT.1.0) INOUT = 'WORSE'
      IF (BANDS.LE.1.0) INOUT = 'Inside'
      IF (BANDS.LT.-1.0) INOUT = 'BETTER'
      IF (REVERS) BANDS = -1.0 * BANDS

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE MCLASS  -  Print the Morris et al. classification of the
C                        structure
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE MCLASS

      INCLUDE 'pplot.inc'

      INTEGER       I, ICLASS(3)
      REAL          BAND(3,3), MORCHM, MORCHS, MORHBM, MORHBS,
     -              TVALUE(3)

      DATA  BAND  / 75.0, 65.0, 55.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 /
      DATA  MORCHM, MORCHS / 18.2, 6.2  /
      DATA  MORHBM, MORHBS / 0.87, 0.24 /

C---- Initialise values
      BAND(1,1) = 100.0 - BAND(1,1)
      BAND(2,1) = 100.0 - BAND(2,1)
      BAND(3,1) = 100.0 - BAND(3,1)
      BAND(1,2) = MORCHM - MORCHS
      BAND(2,2) = MORCHM
      BAND(3,2) = MORCHM + MORCHS
      BAND(1,3) = MORHBM - MORHBS
      BAND(2,3) = MORHBM
      BAND(3,3) = MORHBM + MORHBS
      TVALUE(1) = 100.0 - COREPC
      TVALUE(2) = GPLDEV
      TVALUE(3) = HBDEV

C---- Determine the three classes this structure falls into
      DO 100, I = 1, 3
          ICLASS(I) = 4
          IF (TVALUE(I).LT.BAND(3,I)) ICLASS(I) = 3
          IF (TVALUE(I).LT.BAND(2,I)) ICLASS(I) = 2
          IF (TVALUE(I).LT.BAND(1,I)) ICLASS(I) = 1
 100  CONTINUE

C---- Start a new page if necessary
      IF (ILINE.GE.NLINES - 10) CALL ASTHED

C---- Print column headings
      NPRINT = 0
      WRITE(7,120)
 120  FORMAT(//,
     -    35X,'M O R R I S   E T   A L .   C L A S S I F I C A ',
     -    'T I O N',/)
      ILINE = ILINE + 4
      WRITE(7,140)
 140  FORMAT(
     -    15X,'                        Mean  St.dev                 ',
     -        'Classification',/,
     -    15X,'Parameter                 m     s           1        ',
     -        ' 2          3        4       Value     Class',/,
     -    15X,'---------               ----   ---      -------------',
     -        '-----------------------      -----     -----')
      ILINE = ILINE + 3

C---- Write out the table of results
      WRITE(7,160)
     -    (100.0 - BAND(I,1), I = 1, 3), 100.0 - BAND(3,1),
     -    100.0 - TVALUE(1), ICLASS(1), MORCHM, MORCHS,
     -    (BAND(I,2), I = 1, 3), BAND(3,2), TVALUE(2), ICLASS(2),
     -    MORHBM, MORHBS,
     -    (BAND(I,3), I = 1, 3), BAND(3,3), TVALUE(3), ICLASS(3)
 160  FORMAT(
     -    15X,'Phi-psi distribution','     -  ','    - ',3X,3(4X,'>',
     -    F4.1,'%'),4X,'<',F4.1,'%',2X,F8.1,7X,I1,/,
     -    15X,'Chi-1 st.dev.       ',F8.1,F6.1,3X,3(4X,'<',F4.1,' '),
     -    4X,'>',F4.1,' ',2X,F8.1,7X,I1,/,
     -    15X,'H-bond energy st dev',F9.2,F6.2,2X,3(4X,'<',F4.2,' '),
     -    4X,'>',F4.2,' ',2X,F8.2,7X,I1)
      ILINE = ILINE + 3

CHECK v.3.2-->
C---- Save the Morris et al classification
      MCLAST(1) = ICLASS(1)
      MCLAST(2) = ICLASS(2)
      MCLAST(3) = ICLASS(3)
CHECK v.3.2<--

      RETURN
      END

C--------------------------------------------------------------------------
C**************************************************************************
C
C  SUBROUTINE GFACTS  -  Print the structure's G-factors - ie the measures
C                        showing how typical this protein's geometry is
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE GFACTS

      INCLUDE 'pplot.inc'

      INTEGER       IDISTR

C---- Start a new page if necessary
      IF (ILINE.GE.NLINES - 26) CALL ASTHED

C---- Print column headings
      NPRINT = 0
      WRITE(7,120)
 120  FORMAT(//,
     -    54X,'G - F A C T O R S',/)
      ILINE = ILINE + 4
      WRITE(7,140)
 140  FORMAT(
     -    29X,'                                                       ',
     -    '   Average',/,
     -    29X,'Parameter                                 Score        ',
     -    '    Score',/,
     -    29X,'---------                                 -----        ',
     -    '    -----',/,
     -    29X,'Dihedral angles:-')
      ILINE = ILINE + 4

C---- Write out the table of results
      WRITE(7,160) (GFACTR(IDISTR), IDISTR = 1, NDIHED + 1)
 160  FORMAT(
     -    29X,'     Phi-psi distribution                ',F6.2,/,
     -    29X,'     Chi1-chi2 distribution              ',F6.2,/,
     -    29X,'     Chi1 only                           ',F6.2,/,
     -    29X,'     Chi3 & chi4                         ',F6.2,/,
     -    29X,'     Omega                               ',F6.2,/,
     -    29X,'                                         ------        ',
     -    '   ',F6.2,/,
     -    29X,'                                                       ',
     -    '    =====')
      ILINE = ILINE + 7

      WRITE(7,180) (GFACTR(IDISTR), IDISTR = NDIHED + 2,
     -     NDIHED + NCOVAL + 2)
 180  FORMAT(
     -    29X,'Main-chain covalent forces:-',/,
     -    29X,'     Main-chain bond lengths             ',F6.2,/,
     -    29X,'     Main-chain bond angles              ',F6.2,/,
     -    29X,'                                         ------        ',
     -    '   ',F6.2,/,
     -    29X,'                                                       ',
     -    '    =====')
      ILINE = ILINE + 5

      WRITE(7,200) GFACTR(NDISTR)
 200  FORMAT(//
     -    29X,'OVERALL AVERAGE                                        ',
     -    '   ',F6.2,/,
     -    29X,'                                                       ',
     -    '    =====',//,
     -    29X,'Ideally, scores should be above -0.5. Values below -1.0',
     -    ' may need investigation.')
      ILINE = ILINE + 6

      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.3.2-->
C**************************************************************************
C
C  SUBROUTINE GHTML  -  Print the structure's G-factors to the output
C                       html file
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE GHTML

      INCLUDE 'pplot.inc'

      CHARACTER*6   BLDOFF, BOLDON
      CHARACTER*25  DIHED(10)
      CHARACTER*60  DDESC
      INTEGER       DLEN, IDISTR

      DATA DIHED  / 'Phi-psi distribution   ',
     -              'Chi1-chi2 distribution ',
     -              'Chi1 only              ',
     -              'Chi3 & chi4            ',
     -              'Omega                  ',
     -              '                       ',
     -              'Main-chain bond lengths',
     -              'Main-chain bond angles ',
     -              '                       ',
     -              'OVERALL AVERAGE        ' /

C---- Print column headings
      WRITE(15,120)
 120  FORMAT('<h2>2. G-Factors</h2>',/)
      WRITE(15,110) '<pre>'
 110  FORMAT(10A)
      WRITE(15,140)
 140  FORMAT('<b>                                             ',
     -    '   Average',/,
     -       'Parameter                            Score   ',
     -    '    Score',/,
     -       '---------                            -----   ',
     -    '    -----</b>',/,
CHECK v.3.4.3-->
C     -       '<em>Dihedral angles:-</em>')
     -       'Dihedral angles:-')
CHECK v.3.4.3<--

C---- Write out the table of results for dihedral angles
      DO 200, IDISTR = 1, NDIHED + 1
          BLDOFF = ' '
          BOLDON = ' '
          DLEN = 31
          IF (GFACTR(IDISTR).LT.-1.0) THEN
              BOLDON = '<b>'
              BLDOFF = '**</b>'
              DLEN = DLEN + 3
          ELSE IF (GFACTR(IDISTR).LT.-0.5) THEN
CHECK v.3.4.3-->
C              BOLDON = '<em>'
C              BLDOFF = '*</em>'
C              DLEN = DLEN + 4
              BOLDON = ' '
              BLDOFF = '*'
CHECK v.3.4.3<--
          ENDIF
          DDESC = DIHED(IDISTR) // BOLDON
          IF (IDISTR.EQ.NDIHED + 1) DLEN = DLEN + 13
          WRITE(15,160) DDESC(1:DLEN), GFACTR(IDISTR), BLDOFF
 160      FORMAT(5X,A,F6.2,A)
 200  CONTINUE
      WRITE(15,220)
 220  FORMAT('                                                  ',
     -    '=====')

C---- Write out the table of results for dihedral angles
      WRITE(15,240)
CHECK v.3.4.3-->
C 240  FORMAT('<em>Main-chain covalent forces:-</em>')
 240  FORMAT('Main-chain covalent forces:-')
CHECK v.3.4.3<--
      DO 400, IDISTR = NDIHED + 2, NDISTR
          BLDOFF = ' '
          BOLDON = ' '
          DLEN = 31
          IF (GFACTR(IDISTR).LT.-1.0) THEN
              BOLDON = '<b>'
              BLDOFF = '**</b>'
              DLEN = DLEN + 3
          ELSE IF (GFACTR(IDISTR).LT.-0.5) THEN
CHECK v.3.4.3-->
C              BOLDON = '<em>'
C              BLDOFF = '*</em>'
C              DLEN = DLEN + 4
              BOLDON = ' '
              BLDOFF = '*'
CHECK v.3.4.3<--
          ENDIF
          DDESC = DIHED(IDISTR) // BOLDON
          IF (IDISTR.GE.NDIHED + NCOVAL + 2) DLEN = DLEN + 13
          WRITE(15,160) DDESC(1:DLEN), GFACTR(IDISTR), BLDOFF
          IF (IDISTR.GE.NDIHED + NCOVAL + 2) THEN
              WRITE(15,220)
              WRITE(15,*)
          ENDIF
 400  CONTINUE

C---- Write out explanatory text
      WRITE(15,420)
 420  FORMAT('</pre>',/,'<p>',/,
     -    '<b>G-factors</b> provide a measure of how <b>unusual</b>,',
     -    ' or out-of-the-ordinary, a property is.')
      WRITE(15,440)
 440  FORMAT('<pre>',/,
CHECK v.3.4.3-->
C     -       'Values below <em>-0.5*</em>  - unusual',/,
     -       'Values below -0.5*  - unusual',/,
CHECK v.3.4.3<--
     -       'Values below <b>-1.0**</b> - highly unusual')

C---- Finish off print
      WRITE(15,110) '</pre>'
      WRITE(15,110) '<b>Important note:</b> The main-chain'
      WRITE(15,110) 'bond-lengths and bond angles are compared with'
      WRITE(15,110) 'the Engh & Huber (1991) ideal values derived'
      WRITE(15,110) 'from small-molecule data. Therefore, structures'
      WRITE(15,110) 'refined using different restraints may show'
      WRITE(15,110) 'apparently large deviations from normality.'
      WRITE(15,110) '<hr>'

      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.3.2<--
C**************************************************************************
C
C  SUBROUTINE WRIPAR  -  Write out the stereochemical parameters to the
C                        .sco file
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE WRIPAR

      INCLUDE 'pplot.inc'

      INTEGER       I

C---- Open output file, <filename>.sco
      OPEN(UNIT=8, FILE=FILSCO, STATUS='UNKNOWN', FORM='FORMATTED',
     -    ACCESS='SEQUENTIAL',
CVAX     -    CARRIAGECONTROL='LIST',RECL=132,
     -    ERR=900)

C---- Write out the stereochemical parameters
      WRITE(8,110) RESOL, (SVALUE(I), I = 1, 10)
 110  FORMAT(F5.3,10F7.3)

C---- Close the .sco file
      CLOSE(8)

      GO TO 999

C---- Fatal errors
 900  CONTINUE
      PRINT*, '*** ERROR. Unable to open output file [', FILSCO, ']',
     -    ' Program aborted'
      GO TO 990

990   CONTINUE
      IFAIL = .TRUE.
 
999   CONTINUE
      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.2-->
C**************************************************************************
C
C  SUBROUTINE WRISUM  -  Write out the summary data to the summary file
C
C----------------------------------------------------------------------+--- 

      SUBROUTINE WRISUM

      INCLUDE 'pplot.inc'

      CHARACTER*6   CNUMB
      CHARACTER*7   MNUMBS
      CHARACTER*79  BLNKLN, SUMLIN
      INTEGER       IPOS
      REAL          GMIN

      DATA BLNKLN( 1:40) / ' |                                      ' /
      DATA BLNKLN(41:79) / '                                      |'  /

C---- Residue properties
      SUMLIN = BLNKLN
      SUMLIN(4:38) = 'Residue properties: Max.deviation:'
      WRITE(CNUMB,100) OMAXDV(1)
 100  FORMAT(F6.1)
      SUMLIN(40:45) = CNUMB
      SUMLIN(60:72) = 'Bad contacts:'
      WRITE(CNUMB,200) NBADPR
 200  FORMAT(I5,1X)
      SUMLIN(73:77) = CNUMB(1:5)

C---- Determine whether to mark the line with a + or a *
      IF (OMAXDV(1).GT.3.0 .OR. NBADPR.GT.5) SUMLIN(1:1) = '+'
      IF (OMAXDV(2).GT.5.0 .OR. NBADPR.GT.10) SUMLIN(1:1) = '*'

C---- Write the line out to the summary file
      WRITE(14,300) SUMLIN
 300  FORMAT(A)

C---- Main-chain bond lengths and angles
      SUMLIN = BLNKLN
      SUMLIN(24:38) = 'Bond len/angle:'
      WRITE(CNUMB,100) OMAXDV(2)
      SUMLIN(40:45) = CNUMB
      SUMLIN(50:69) = 'Morris et al class:'
      WRITE(MNUMBS,400) MCLAST(1), MCLAST(2), MCLAST(3)
 400  FORMAT(I1,2X,I1,2X,I1)
      SUMLIN(71:77) = MNUMBS

C---- Determine whether to mark the line with a + or a *
      IF (OMAXDV(2).GT.3.0) SUMLIN(1:1) = '+'
      IF (OMAXDV(2).GT.5.0) SUMLIN(1:1) = '*'

C---- Write the line out to the summary file
      WRITE(14,300) SUMLIN

C---- If there are any cis-peptides or D-amino acids, write these out
      IF (NDAM.GT.0 .OR. NCIS.GT.0) THEN
          SUMLIN = BLNKLN
          IPOS = 3

C----     If any cis peptides, write out how many
          IF (NCIS.GT.0) THEN
              WRITE(CNUMB,500) NCIS
 500          FORMAT(I6)
              SUMLIN(IPOS:IPOS + 5) = CNUMB
              SUMLIN(IPOS + 7:IPOS + 18) = 'cis-peptides'
              IPOS = 24
          ENDIF

C----     If any D amino acids, write out how many
          IF (NDAM.GT.0) THEN
              WRITE(CNUMB,500) NDAM
              SUMLIN(IPOS:IPOS + 5) = CNUMB
              SUMLIN(IPOS + 7:IPOS + 19) = 'D amino acids'
          ENDIF

C----     Determine whether to mark the line with a + or a *
          SUMLIN(1:1) = '+'
          IF (NDAM.GT.0 .OR. NCIS.GT.3) SUMLIN(1:1) = '*'

C----     Write out the summary line
          WRITE(14,300) SUMLIN

C---- Otherwise, write out a blank line
      ELSE
          WRITE(14,300) BLNKLN
      ENDIF

C---- G-factors
      SUMLIN = BLNKLN
      SUMLIN(4:13) = 'G-factors'
      WRITE(MNUMBS,600) GFACTR(NDIHED + 1)
 600  FORMAT(F7.2)
      SUMLIN(34:40) = MNUMBS
      SUMLIN(24:33) = 'Dihedrals:'
      WRITE(MNUMBS,600) GFACTR(NDIHED + NCOVAL + 2)
      SUMLIN(52:58) = MNUMBS
      SUMLIN(43:51) = 'Covalent:'
      WRITE(MNUMBS,600) GFACTR(NDISTR)
      SUMLIN(71:77) = MNUMBS
      SUMLIN(63:70) = 'Overall:'

C---- Determine whether to mark the line with a + or a *
      GMIN = MIN(GFACTR(NDIHED + 1),GFACTR(NDIHED + NCOVAL + 2))
      GMIN = MIN(GFACTR(NDISTR),GMIN)
      IF (GMIN.LT.-0.5) SUMLIN(1:1) = '+'
      IF (GMIN.LT.-2.0) SUMLIN(1:1) = '*'

C---- Write the line the the summary file
      WRITE(14,300) SUMLIN
      WRITE(14,300) BLNKLN

      RETURN
      END

C--------------------------------------------------------------------------
CHECK v.3.2<--
